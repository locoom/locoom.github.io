(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

console.warn('Compiled in DEV mode. Follow the advice at https://elm-lang.org/0.19.0/optimize for better performance and smaller assets.');


var _List_Nil_UNUSED = { $: 0 };
var _List_Nil = { $: '[]' };

function _List_Cons_UNUSED(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === elm$core$Basics$EQ ? 0 : ord === elm$core$Basics$LT ? -1 : 1;
	}));
});



// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	/**/
	if (x.$ === 'Set_elm_builtin')
	{
		x = elm$core$Set$toList(x);
		y = elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = elm$core$Dict$toList(x);
		y = elm$core$Dict$toList(y);
	}
	//*/

	/**_UNUSED/
	if (x.$ < 0)
	{
		x = elm$core$Dict$toList(x);
		y = elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**_UNUSED/
	if (!x.$)
	//*/
	/**/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? elm$core$Basics$LT : n ? elm$core$Basics$GT : elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0_UNUSED = 0;
var _Utils_Tuple0 = { $: '#0' };

function _Utils_Tuple2_UNUSED(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3_UNUSED(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr_UNUSED(c) { return c; }
function _Utils_chr(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log_UNUSED = F2(function(tag, value)
{
	return value;
});

var _Debug_log = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString_UNUSED(value)
{
	return '<internals>';
}

function _Debug_toString(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[94m' + string + '\x1b[0m' : string;
}



// CRASH


function _Debug_crash_UNUSED(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.start.line === region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'on lines ' + region.start.line + ' through ' + region.end.line;
}



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800)
			+
			String.fromCharCode(code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return word
		? elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? elm$core$Maybe$Nothing
		: elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? elm$core$Maybe$Just(n) : elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




/**/
function _Json_errorToString(error)
{
	return elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

var _Json_decodeInt = { $: 2 };
var _Json_decodeBool = { $: 3 };
var _Json_decodeFloat = { $: 4 };
var _Json_decodeValue = { $: 5 };
var _Json_decodeString = { $: 6 };

function _Json_decodeList(decoder) { return { $: 7, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 8, b: decoder }; }

function _Json_decodeNull(value) { return { $: 9, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 10,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 11,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 12,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 13,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 14,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 15,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return elm$core$Result$Err(A2(elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 3:
			return (typeof value === 'boolean')
				? elm$core$Result$Ok(value)
				: _Json_expecting('a BOOL', value);

		case 2:
			if (typeof value !== 'number') {
				return _Json_expecting('an INT', value);
			}

			if (-2147483647 < value && value < 2147483647 && (value | 0) === value) {
				return elm$core$Result$Ok(value);
			}

			if (isFinite(value) && !(value % 1)) {
				return elm$core$Result$Ok(value);
			}

			return _Json_expecting('an INT', value);

		case 4:
			return (typeof value === 'number')
				? elm$core$Result$Ok(value)
				: _Json_expecting('a FLOAT', value);

		case 6:
			return (typeof value === 'string')
				? elm$core$Result$Ok(value)
				: (value instanceof String)
					? elm$core$Result$Ok(value + '')
					: _Json_expecting('a STRING', value);

		case 9:
			return (value === null)
				? elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 5:
			return elm$core$Result$Ok(_Json_wrap(value));

		case 7:
			if (!Array.isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 8:
			if (!Array.isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 10:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return (elm$core$Result$isOk(result)) ? result : elm$core$Result$Err(A2(elm$json$Json$Decode$Field, field, result.a));

		case 11:
			var index = decoder.e;
			if (!Array.isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return (elm$core$Result$isOk(result)) ? result : elm$core$Result$Err(A2(elm$json$Json$Decode$Index, index, result.a));

		case 12:
			if (typeof value !== 'object' || value === null || Array.isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!elm$core$Result$isOk(result))
					{
						return elm$core$Result$Err(A2(elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return elm$core$Result$Ok(elm$core$List$reverse(keyValuePairs));

		case 13:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return elm$core$Result$Ok(answer);

		case 14:
			var result = _Json_runHelp(decoder.b, value);
			return (!elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 15:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if (elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return elm$core$Result$Err(elm$json$Json$Decode$OneOf(elm$core$List$reverse(errors)));

		case 1:
			return elm$core$Result$Err(A2(elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!elm$core$Result$isOk(result))
		{
			return elm$core$Result$Err(A2(elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return elm$core$Result$Ok(toElmValue(array));
}

function _Json_toElmArray(array)
{
	return A2(elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return elm$core$Result$Err(A2(elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 3:
		case 2:
		case 4:
		case 6:
		case 5:
			return true;

		case 9:
			return x.c === y.c;

		case 7:
		case 8:
		case 12:
			return _Json_equality(x.b, y.b);

		case 10:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 11:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 13:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 14:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 15:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap(value) { return { $: 0, a: value }; }
function _Json_unwrap(value) { return value.a; }

function _Json_wrap_UNUSED(value) { return value; }
function _Json_unwrap_UNUSED(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	elm$core$Result$isOk(result) || _Debug_crash(2 /**/, _Json_errorToString(result.a) /**/);
	var managers = {};
	result = init(result.a);
	var model = result.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		result = A2(update, msg, model);
		stepper(model = result.a, viewMetadata);
		_Platform_dispatchEffects(managers, result.b, subscriptions(model));
	}

	_Platform_dispatchEffects(managers, result.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				p: bag.n,
				q: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.q)
		{
			x = temp.p(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		r: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].r;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		r: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].r;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**_UNUSED/
	var node = args['node'];
	//*/
	/**/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS


function _VirtualDom_noScript(tag)
{
	return tag == 'script' ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return /^(on|formAction$)/i.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri_UNUSED(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,'')) ? '' : value;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,''))
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri_UNUSED(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value) ? '' : value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value)
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2(elm$json$Json$Decode$map, func, handler.a)
				:
			A3(elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		message: func(record.message),
		stopPropagation: record.stopPropagation,
		preventDefault: record.preventDefault
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.message;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.stopPropagation;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.preventDefault) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});


function _Url_percentEncode(string)
{
	return encodeURIComponent(string);
}

function _Url_percentDecode(string)
{
	try
	{
		return elm$core$Maybe$Just(decodeURIComponent(string));
	}
	catch (e)
	{
		return elm$core$Maybe$Nothing;
	}
}



// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var view = impl.view;
			/**_UNUSED/
			var domNode = args['node'];
			//*/
			/**/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.init,
		impl.update,
		impl.subscriptions,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.setup && impl.setup(sendToApp)
			var view = impl.view;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.body);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.title) && (_VirtualDom_doc.title = title = doc.title);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.onUrlChange;
	var onUrlRequest = impl.onUrlRequest;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		setup: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.protocol === next.protocol
							&& curr.host === next.host
							&& curr.port_.a === next.port_.a
						)
							? elm$browser$Browser$Internal(next)
							: elm$browser$Browser$External(href)
					));
				}
			});
		},
		init: function(flags)
		{
			return A3(impl.init, flags, _Browser_getUrl(), key);
		},
		view: impl.view,
		update: impl.update,
		subscriptions: impl.subscriptions
	});
}

function _Browser_getUrl()
{
	return elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return elm$core$Result$isOk(result) ? elm$core$Maybe$Just(result.a) : elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { hidden: 'hidden', change: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { hidden: 'mozHidden', change: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { hidden: 'msHidden', change: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { hidden: 'webkitHidden', change: 'webkitvisibilitychange' }
		: { hidden: 'hidden', change: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail(elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		scene: _Browser_getScene(),
		viewport: {
			x: _Browser_window.pageXOffset,
			y: _Browser_window.pageYOffset,
			width: _Browser_doc.documentElement.clientWidth,
			height: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		width: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		height: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			scene: {
				width: node.scrollWidth,
				height: node.scrollHeight
			},
			viewport: {
				x: node.scrollLeft,
				y: node.scrollTop,
				width: node.clientWidth,
				height: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			scene: _Browser_getScene(),
			viewport: {
				x: x,
				y: y,
				width: _Browser_doc.documentElement.clientWidth,
				height: _Browser_doc.documentElement.clientHeight
			},
			element: {
				x: x + rect.left,
				y: y + rect.top,
				width: rect.width,
				height: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2(elm$core$Task$perform, elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}



function _Time_now(millisToPosix)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(millisToPosix(Date.now())));
	});
}

var _Time_setInterval = F2(function(interval, task)
{
	return _Scheduler_binding(function(callback)
	{
		var id = setInterval(function() { _Scheduler_rawSpawn(task); }, interval);
		return function() { clearInterval(id); };
	});
});

function _Time_here()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(
			A2(elm$time$Time$customZone, -(new Date().getTimezoneOffset()), _List_Nil)
		));
	});
}


function _Time_getZoneName()
{
	return _Scheduler_binding(function(callback)
	{
		try
		{
			var name = elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
		}
		catch (e)
		{
			var name = elm$time$Time$Offset(new Date().getTimezoneOffset());
		}
		callback(_Scheduler_succeed(name));
	});
}


// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.multiline) { flags += 'm'; }
	if (options.caseInsensitive) { flags += 'i'; }

	try
	{
		return elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? elm$core$Maybe$Just(submatch)
				: elm$core$Maybe$Nothing;
		}
		out.push(A4(elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? elm$core$Maybe$Just(submatch)
				: elm$core$Maybe$Nothing;
		}
		return replacer(A4(elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;
var author$project$Main$ChangedUrl = function (a) {
	return {$: 'ChangedUrl', a: a};
};
var author$project$Main$ClickedLink = function (a) {
	return {$: 'ClickedLink', a: a};
};
var author$project$Architecture$Layout$init = {backSideIndex: 0, coreIndex: 0, frontSideIndex: 0, northIndex: 0};
var author$project$Main$Blank = function (a) {
	return {$: 'Blank', a: a};
};
var author$project$Main$Interior = function (a) {
	return {$: 'Interior', a: a};
};
var author$project$Main$Layout = function (a) {
	return {$: 'Layout', a: a};
};
var author$project$Main$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var author$project$Pages$Interior$toSession = function (model) {
	return model.session;
};
var author$project$Main$toSession = function (model) {
	switch (model.$) {
		case 'Interior':
			var interiorModel = model.a;
			return author$project$Pages$Interior$toSession(interiorModel);
		case 'Layout':
			var session = model.a;
			return session;
		case 'NotFound':
			var session = model.a;
			return session;
		default:
			var session = model.a;
			return session;
	}
};
var author$project$Architecture$Equipment$Downstairs = {$: 'Downstairs'};
var elm$core$Basics$EQ = {$: 'EQ'};
var elm$core$Basics$GT = {$: 'GT'};
var elm$core$Basics$LT = {$: 'LT'};
var elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3(elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var elm$core$List$cons = _List_cons;
var elm$core$Dict$toList = function (dict) {
	return A3(
		elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var elm$core$Dict$keys = function (dict) {
	return A3(
		elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2(elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var elm$core$Set$toList = function (_n0) {
	var dict = _n0.a;
	return elm$core$Dict$keys(dict);
};
var elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var elm$core$Array$foldr = F3(
	function (func, baseCase, _n0) {
		var tree = _n0.c;
		var tail = _n0.d;
		var helper = F2(
			function (node, acc) {
				if (node.$ === 'SubTree') {
					var subTree = node.a;
					return A3(elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3(elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			elm$core$Elm$JsArray$foldr,
			helper,
			A3(elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var elm$core$Array$toList = function (array) {
	return A3(elm$core$Array$foldr, elm$core$List$cons, _List_Nil, array);
};
var elm$core$Basics$fdiv = _Basics_fdiv;
var elm$core$Basics$mul = _Basics_mul;
var author$project$Grid$Units$defaultPixelsPerMillimeter = (5.0e-2 * 160) / 159;
var author$project$Pages$Interior$AddEquipment = {$: 'AddEquipment'};
var author$project$Pages$Interior$Default = {$: 'Default'};
var author$project$Pages$Interior$NotDragging = {$: 'NotDragging'};
var author$project$Pages$Interior$UnknownMouseDownLocation = {$: 'UnknownMouseDownLocation'};
var author$project$Grid$Boundary$east = function (_n0) {
	var data = _n0.a;
	return data.east;
};
var author$project$Grid$Boundary$north = function (_n0) {
	var data = _n0.a;
	return data.north;
};
var author$project$Grid$Boundary$south = function (_n0) {
	var data = _n0.a;
	return data.south;
};
var author$project$Grid$Boundary$GridBoundary = function (a) {
	return {$: 'GridBoundary', a: a};
};
var author$project$Grid$Vector$xComponent = function (_n0) {
	var x = _n0.a;
	return x;
};
var author$project$Grid$Vector$yComponent = function (_n0) {
	var y = _n0.b;
	return y;
};
var elm$core$Basics$add = _Basics_add;
var elm$core$Basics$identity = function (x) {
	return x;
};
var author$project$Grid$Boundary$translate = F2(
	function (vector, _n0) {
		var data = _n0.a;
		return author$project$Grid$Boundary$GridBoundary(
			{
				east: data.east + author$project$Grid$Vector$xComponent(vector),
				north: data.north + author$project$Grid$Vector$yComponent(vector),
				south: data.south + author$project$Grid$Vector$yComponent(vector),
				west: data.west + author$project$Grid$Vector$xComponent(vector)
			});
	});
var author$project$Grid$Boundary$west = function (_n0) {
	var data = _n0.a;
	return data.west;
};
var author$project$Grid$Footprint$Footprint = function (a) {
	return {$: 'Footprint', a: a};
};
var elm$core$Basics$gt = _Utils_gt;
var elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var elm$core$List$reverse = function (list) {
	return A3(elm$core$List$foldl, elm$core$List$cons, _List_Nil, list);
};
var elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							elm$core$List$foldl,
							fn,
							acc,
							elm$core$List$reverse(r4)) : A4(elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4(elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var author$project$Grid$Footprint$mapBoundaries = F2(
	function (_function, _n0) {
		var gridBoundaries = _n0.a;
		return author$project$Grid$Footprint$Footprint(
			A2(elm$core$List$map, _function, gridBoundaries));
	});
var elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var elm$core$Basics$lt = _Utils_lt;
var elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var elm$core$Maybe$Just = function (a) {
	return {$: 'Just', a: a};
};
var elm$core$Maybe$Nothing = {$: 'Nothing'};
var elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var author$project$Grid$Boundary$aggregate = function (boundaries) {
	var addBoundary = F2(
		function (_n1, currentAggregate) {
			var nextBoundary = _n1.a;
			if (currentAggregate.$ === 'Nothing') {
				return elm$core$Maybe$Just(
					author$project$Grid$Boundary$GridBoundary(nextBoundary));
			} else {
				var data = currentAggregate.a.a;
				return elm$core$Maybe$Just(
					author$project$Grid$Boundary$GridBoundary(
						{
							east: A2(elm$core$Basics$max, nextBoundary.east, data.east),
							north: A2(elm$core$Basics$max, nextBoundary.north, data.north),
							south: A2(elm$core$Basics$min, nextBoundary.south, data.south),
							west: A2(elm$core$Basics$min, nextBoundary.west, data.west)
						}));
			}
		});
	return A2(
		elm$core$Maybe$withDefault,
		author$project$Grid$Boundary$GridBoundary(
			{east: 0, north: 0, south: 0, west: 0}),
		A3(elm$core$List$foldl, addBoundary, elm$core$Maybe$Nothing, boundaries));
};
var author$project$Grid$Footprint$toBoundary = function (_n0) {
	var gridBoundaries = _n0.a;
	return author$project$Grid$Boundary$aggregate(gridBoundaries);
};
var author$project$Grid$Point$GridPoint = F2(
	function (a, b) {
		return {$: 'GridPoint', a: a, b: b};
	});
var author$project$Grid$Point$gridPoint = author$project$Grid$Point$GridPoint;
var author$project$Grid$Point$xCoordinate = function (_n0) {
	var x = _n0.a;
	return x;
};
var author$project$Grid$Point$yCoordinate = function (_n0) {
	var y = _n0.b;
	return y;
};
var author$project$Grid$Vector$GridVector = F2(
	function (a, b) {
		return {$: 'GridVector', a: a, b: b};
	});
var author$project$Grid$Vector$gridVector = author$project$Grid$Vector$GridVector;
var author$project$Grid$Units$millimetersPerUnit = 100;
var elm$core$Basics$toFloat = _Basics_toFloat;
var author$project$Grid$Units$toMillimeters = function (units) {
	return units * author$project$Grid$Units$millimetersPerUnit;
};
var ianmackenzie$elm_geometry$Geometry$Types$Vector2d = function (a) {
	return {$: 'Vector2d', a: a};
};
var ianmackenzie$elm_geometry$Vector2d$fromComponents = ianmackenzie$elm_geometry$Geometry$Types$Vector2d;
var author$project$Grid$Vector$toVector2d = function (_n0) {
	var x = _n0.a;
	var y = _n0.b;
	return ianmackenzie$elm_geometry$Vector2d$fromComponents(
		_Utils_Tuple2(
			author$project$Grid$Units$toMillimeters(x),
			author$project$Grid$Units$toMillimeters(y)));
};
var elm$core$Basics$False = {$: 'False'};
var elm$core$Basics$True = {$: 'True'};
var elm$core$Result$isOk = function (result) {
	if (result.$ === 'Ok') {
		return true;
	} else {
		return false;
	}
};
var elm$core$Array$branchFactor = 32;
var elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 'Array_elm_builtin', a: a, b: b, c: c, d: d};
	});
var elm$core$Basics$ceiling = _Basics_ceiling;
var elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var elm$core$Array$shiftStep = elm$core$Basics$ceiling(
	A2(elm$core$Basics$logBase, 2, elm$core$Array$branchFactor));
var elm$core$Elm$JsArray$empty = _JsArray_empty;
var elm$core$Array$empty = A4(elm$core$Array$Array_elm_builtin, 0, elm$core$Array$shiftStep, elm$core$Elm$JsArray$empty, elm$core$Elm$JsArray$empty);
var elm$core$Array$Leaf = function (a) {
	return {$: 'Leaf', a: a};
};
var elm$core$Array$SubTree = function (a) {
	return {$: 'SubTree', a: a};
};
var elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _n0 = A2(elm$core$Elm$JsArray$initializeFromList, elm$core$Array$branchFactor, nodes);
			var node = _n0.a;
			var remainingNodes = _n0.b;
			var newAcc = A2(
				elm$core$List$cons,
				elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var elm$core$Basics$eq = _Utils_equal;
var elm$core$Tuple$first = function (_n0) {
	var x = _n0.a;
	return x;
};
var elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = elm$core$Basics$ceiling(nodeListSize / elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2(elm$core$Elm$JsArray$initializeFromList, elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2(elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var elm$core$Basics$floor = _Basics_floor;
var elm$core$Basics$sub = _Basics_sub;
var elm$core$Elm$JsArray$length = _JsArray_length;
var elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.nodeListSize) {
			return A4(
				elm$core$Array$Array_elm_builtin,
				elm$core$Elm$JsArray$length(builder.tail),
				elm$core$Array$shiftStep,
				elm$core$Elm$JsArray$empty,
				builder.tail);
		} else {
			var treeLen = builder.nodeListSize * elm$core$Array$branchFactor;
			var depth = elm$core$Basics$floor(
				A2(elm$core$Basics$logBase, elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? elm$core$List$reverse(builder.nodeList) : builder.nodeList;
			var tree = A2(elm$core$Array$treeFromBuilder, correctNodeList, builder.nodeListSize);
			return A4(
				elm$core$Array$Array_elm_builtin,
				elm$core$Elm$JsArray$length(builder.tail) + treeLen,
				A2(elm$core$Basics$max, 5, depth * elm$core$Array$shiftStep),
				tree,
				builder.tail);
		}
	});
var elm$core$Basics$idiv = _Basics_idiv;
var elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					elm$core$Array$builderToArray,
					false,
					{nodeList: nodeList, nodeListSize: (len / elm$core$Array$branchFactor) | 0, tail: tail});
			} else {
				var leaf = elm$core$Array$Leaf(
					A3(elm$core$Elm$JsArray$initialize, elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2(elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var elm$core$Basics$le = _Utils_le;
var elm$core$Basics$remainderBy = _Basics_remainderBy;
var elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return elm$core$Array$empty;
		} else {
			var tailLen = len % elm$core$Array$branchFactor;
			var tail = A3(elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - elm$core$Array$branchFactor;
			return A5(elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var elm$core$Result$Err = function (a) {
	return {$: 'Err', a: a};
};
var elm$core$Result$Ok = function (a) {
	return {$: 'Ok', a: a};
};
var elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 'Failure', a: a, b: b};
	});
var elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 'Field', a: a, b: b};
	});
var elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 'Index', a: a, b: b};
	});
var elm$json$Json$Decode$OneOf = function (a) {
	return {$: 'OneOf', a: a};
};
var elm$core$Basics$and = _Basics_and;
var elm$core$Basics$append = _Utils_append;
var elm$core$Basics$or = _Basics_or;
var elm$core$Char$toCode = _Char_toCode;
var elm$core$Char$isLower = function (_char) {
	var code = elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var elm$core$Char$isUpper = function (_char) {
	var code = elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var elm$core$Char$isAlpha = function (_char) {
	return elm$core$Char$isLower(_char) || elm$core$Char$isUpper(_char);
};
var elm$core$Char$isDigit = function (_char) {
	var code = elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var elm$core$Char$isAlphaNum = function (_char) {
	return elm$core$Char$isLower(_char) || (elm$core$Char$isUpper(_char) || elm$core$Char$isDigit(_char));
};
var elm$core$List$length = function (xs) {
	return A3(
		elm$core$List$foldl,
		F2(
			function (_n0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var elm$core$List$map2 = _List_map2;
var elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2(elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var elm$core$List$range = F2(
	function (lo, hi) {
		return A3(elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			elm$core$List$map2,
			f,
			A2(
				elm$core$List$range,
				0,
				elm$core$List$length(xs) - 1),
			xs);
	});
var elm$core$String$all = _String_all;
var elm$core$String$fromInt = _String_fromNumber;
var elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var elm$core$String$uncons = _String_uncons;
var elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var elm$json$Json$Decode$indent = function (str) {
	return A2(
		elm$core$String$join,
		'\n    ',
		A2(elm$core$String$split, '\n', str));
};
var elm$json$Json$Encode$encode = _Json_encode;
var elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + (elm$core$String$fromInt(i + 1) + (') ' + elm$json$Json$Decode$indent(
			elm$json$Json$Decode$errorToString(error))));
	});
var elm$json$Json$Decode$errorToString = function (error) {
	return A2(elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 'Field':
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _n1 = elm$core$String$uncons(f);
						if (_n1.$ === 'Nothing') {
							return false;
						} else {
							var _n2 = _n1.a;
							var _char = _n2.a;
							var rest = _n2.b;
							return elm$core$Char$isAlpha(_char) && A2(elm$core$String$all, elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2(elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'Index':
					var i = error.a;
					var err = error.b;
					var indexName = '[' + (elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2(elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 'OneOf':
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									elm$core$String$join,
									'',
									elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										elm$core$String$join,
										'',
										elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + (elm$core$String$fromInt(
								elm$core$List$length(errors)) + ' ways:'));
							return A2(
								elm$core$String$join,
								'\n\n',
								A2(
									elm$core$List$cons,
									introduction,
									A2(elm$core$List$indexedMap, elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								elm$core$String$join,
								'',
								elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + (elm$json$Json$Decode$indent(
						A2(elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var elm$json$Json$Decode$map = _Json_map1;
var elm$json$Json$Decode$map2 = _Json_map2;
var elm$json$Json$Decode$succeed = _Json_succeed;
var elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 'Normal':
			return 0;
		case 'MayStopPropagation':
			return 1;
		case 'MayPreventDefault':
			return 2;
		default:
			return 3;
	}
};
var elm$virtual_dom$VirtualDom$nodeNS = function (tag) {
	return _VirtualDom_nodeNS(
		_VirtualDom_noScript(tag));
};
var author$project$TypedSvg$Core$node = elm$virtual_dom$VirtualDom$nodeNS('http://www.w3.org/2000/svg');
var author$project$TypedSvg$g = author$project$TypedSvg$Core$node('g');
var elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var author$project$TypedSvg$Core$attribute = elm$virtual_dom$VirtualDom$attribute;
var elm$core$String$concat = function (strings) {
	return A2(elm$core$String$join, '', strings);
};
var elm$core$String$fromFloat = _String_fromNumber;
var author$project$TypedSvg$TypesToStrings$transformToString = function (xform) {
	var tr = F2(
		function (name, args) {
			return elm$core$String$concat(
				_List_fromArray(
					[
						name,
						'(',
						A2(
						elm$core$String$join,
						' ',
						A2(elm$core$List$map, elm$core$String$fromFloat, args)),
						')'
					]));
		});
	switch (xform.$) {
		case 'Matrix':
			var a = xform.a;
			var b = xform.b;
			var c = xform.c;
			var d = xform.d;
			var e = xform.e;
			var f = xform.f;
			return A2(
				tr,
				'matrix',
				_List_fromArray(
					[a, b, c, d, e, f]));
		case 'Rotate':
			var a = xform.a;
			var x = xform.b;
			var y = xform.c;
			return A2(
				tr,
				'rotate',
				_List_fromArray(
					[a, x, y]));
		case 'Scale':
			var x = xform.a;
			var y = xform.b;
			return A2(
				tr,
				'scale',
				_List_fromArray(
					[x, y]));
		case 'SkewX':
			var x = xform.a;
			return A2(
				tr,
				'skewX',
				_List_fromArray(
					[x]));
		case 'SkewY':
			var y = xform.a;
			return A2(
				tr,
				'skewY',
				_List_fromArray(
					[y]));
		default:
			var x = xform.a;
			var y = xform.b;
			return A2(
				tr,
				'translate',
				_List_fromArray(
					[x, y]));
	}
};
var author$project$TypedSvg$Attributes$transform = function (transforms) {
	return A2(
		author$project$TypedSvg$Core$attribute,
		'transform',
		A2(
			elm$core$String$join,
			' ',
			A2(elm$core$List$map, author$project$TypedSvg$TypesToStrings$transformToString, transforms)));
};
var author$project$TypedSvg$Types$Translate = F2(
	function (a, b) {
		return {$: 'Translate', a: a, b: b};
	});
var ianmackenzie$elm_geometry$Vector2d$components = function (_n0) {
	var components_ = _n0.a;
	return components_;
};
var author$project$Utilities$translate = function (vector) {
	var _n0 = ianmackenzie$elm_geometry$Vector2d$components(vector);
	var x = _n0.a;
	var y = _n0.b;
	return A2(author$project$TypedSvg$Types$Translate, x, y);
};
var elm$core$Basics$negate = function (n) {
	return -n;
};
var author$project$Architecture$Equipment$normalizeOrigin = function (properties) {
	var footprintHull = author$project$Grid$Footprint$toBoundary(properties.rawFootprint);
	var midpointOffset = A2(
		author$project$Grid$Vector$gridVector,
		((-(author$project$Grid$Boundary$west(footprintHull) + author$project$Grid$Boundary$east(footprintHull))) / 2) | 0,
		((-(author$project$Grid$Boundary$south(footprintHull) + author$project$Grid$Boundary$north(footprintHull))) / 2) | 0);
	var translate = author$project$Grid$Boundary$translate(midpointOffset);
	var translateEdgeAccess = function (edgeAccess) {
		return _Utils_update(
			edgeAccess,
			{
				start: A2(
					author$project$Grid$Point$gridPoint,
					author$project$Grid$Point$xCoordinate(edgeAccess.start) + author$project$Grid$Vector$xComponent(midpointOffset),
					author$project$Grid$Point$yCoordinate(edgeAccess.start) + author$project$Grid$Vector$yComponent(midpointOffset))
			});
	};
	var translateEdgeAccessAlternative = function (alternative) {
		return A2(elm$core$List$map, translateEdgeAccess, alternative);
	};
	var computedFootprint = A2(author$project$Grid$Footprint$mapBoundaries, translate, properties.rawFootprint);
	return {
		edgeAccessAlternatives: A2(elm$core$List$map, translateEdgeAccessAlternative, properties.rawEdgeAccessAlternatives),
		footprint: computedFootprint,
		markup: _List_fromArray(
			[
				A2(
				author$project$TypedSvg$g,
				_List_fromArray(
					[
						author$project$TypedSvg$Attributes$transform(
						_List_fromArray(
							[
								author$project$Utilities$translate(
								author$project$Grid$Vector$toVector2d(midpointOffset))
							]))
					]),
				properties.rawMarkup)
			]),
		viewBoundary: author$project$Grid$Footprint$toBoundary(computedFootprint)
	};
};
var author$project$Architecture$Equipment$accessToWashbasin = function (_n0) {
	var start = _n0.start;
	var edgeDirection = _n0.edgeDirection;
	var length = _n0.length;
	return _List_fromArray(
		[
			{edgeDirection: edgeDirection, exceptions: elm$core$Maybe$Nothing, length: length, locationLabel: 'to wash comfortably', spaceRequired: 8, start: start}
		]);
};
var author$project$Grid$Rotation$HalfTurn = {$: 'HalfTurn'};
var author$project$Grid$Rotation$QuarterTurnClockwise = {$: 'QuarterTurnClockwise'};
var author$project$Grid$Rotation$QuarterTurnCounterclockwise = {$: 'QuarterTurnCounterclockwise'};
var author$project$Grid$Rotation$rotationKey = function (rotation) {
	switch (rotation.$) {
		case 'QuarterTurnClockwise':
			return 0;
		case 'HalfTurn':
			return 1;
		default:
			return 2;
	}
};
var elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var elm$core$Dict$RBEmpty_elm_builtin = {$: 'RBEmpty_elm_builtin'};
var elm$core$Dict$empty = elm$core$Dict$RBEmpty_elm_builtin;
var elm$core$Dict$Black = {$: 'Black'};
var elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: 'RBNode_elm_builtin', a: a, b: b, c: c, d: d, e: e};
	});
var elm$core$Basics$compare = _Utils_compare;
var elm$core$Dict$Red = {$: 'Red'};
var elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Red')) {
			var _n1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
				var _n3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Red,
					key,
					value,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, lK, lV, lLeft, lRight),
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, rK, rV, rLeft, rRight));
			} else {
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) && (left.d.$ === 'RBNode_elm_builtin')) && (left.d.a.$ === 'Red')) {
				var _n5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _n6 = left.d;
				var _n7 = _n6.a;
				var llK = _n6.b;
				var llV = _n6.c;
				var llLeft = _n6.d;
				var llRight = _n6.e;
				var lRight = left.e;
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Red,
					lK,
					lV,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, llK, llV, llLeft, llRight),
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, key, value, lRight, right));
			} else {
				return A5(elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, key, value, elm$core$Dict$RBEmpty_elm_builtin, elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _n1 = A2(elm$core$Basics$compare, key, nKey);
			switch (_n1.$) {
				case 'LT':
					return A5(
						elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3(elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 'EQ':
					return A5(elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3(elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _n0 = A3(elm$core$Dict$insertHelp, key, value, dict);
		if ((_n0.$ === 'RBNode_elm_builtin') && (_n0.a.$ === 'Red')) {
			var _n1 = _n0.a;
			var k = _n0.b;
			var v = _n0.c;
			var l = _n0.d;
			var r = _n0.e;
			return A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _n0;
			return x;
		}
	});
var elm$core$Dict$fromList = function (assocs) {
	return A3(
		elm$core$List$foldl,
		F2(
			function (_n0, dict) {
				var key = _n0.a;
				var value = _n0.b;
				return A3(elm$core$Dict$insert, key, value, dict);
			}),
		elm$core$Dict$empty,
		assocs);
};
var turboMaCk$any_dict$Dict$Any$AnyDict = function (a) {
	return {$: 'AnyDict', a: a};
};
var turboMaCk$any_dict$Dict$Any$fromList = F2(
	function (f, xs) {
		return turboMaCk$any_dict$Dict$Any$AnyDict(
			{
				dict: elm$core$Dict$fromList(
					A2(
						elm$core$List$map,
						function (_n0) {
							var k = _n0.a;
							var v = _n0.b;
							return _Utils_Tuple2(
								f(k),
								_Utils_Tuple2(k, v));
						},
						xs)),
				toKey: f
			});
	});
var turboMaCk$any_set$Set$Any$AnySet = function (a) {
	return {$: 'AnySet', a: a};
};
var turboMaCk$any_set$Set$Any$fromList = function (toComparable) {
	return A2(
		elm$core$Basics$composeL,
		A2(
			elm$core$Basics$composeL,
			turboMaCk$any_set$Set$Any$AnySet,
			turboMaCk$any_dict$Dict$Any$fromList(toComparable)),
		elm$core$List$map(
			function (a) {
				return _Utils_Tuple2(a, _Utils_Tuple0);
			}));
};
var author$project$Architecture$Equipment$allRotations = A2(
	turboMaCk$any_set$Set$Any$fromList,
	author$project$Grid$Rotation$rotationKey,
	_List_fromArray(
		[author$project$Grid$Rotation$QuarterTurnClockwise, author$project$Grid$Rotation$HalfTurn, author$project$Grid$Rotation$QuarterTurnCounterclockwise]));
var author$project$Architecture$Equipment$exactBasinCornerRadius = 70;
var author$project$Svg$Path$Internal$LineRelative = function (a) {
	return {$: 'LineRelative', a: a};
};
var author$project$Svg$Path$lineBy = author$project$Svg$Path$Internal$LineRelative;
var author$project$Svg$Path$CloseOption = function (a) {
	return {$: 'CloseOption', a: a};
};
var author$project$Svg$Path$open = author$project$Svg$Path$CloseOption(false);
var author$project$Svg$Path$Internal$CubicAbsolute = F3(
	function (a, b, c) {
		return {$: 'CubicAbsolute', a: a, b: b, c: c};
	});
var author$project$Svg$Path$Internal$CubicRelative = F3(
	function (a, b, c) {
		return {$: 'CubicRelative', a: a, b: b, c: c};
	});
var author$project$Svg$Path$Internal$QuadraticAbsolute = F2(
	function (a, b) {
		return {$: 'QuadraticAbsolute', a: a, b: b};
	});
var author$project$Svg$Path$Internal$QuadraticRelative = F2(
	function (a, b) {
		return {$: 'QuadraticRelative', a: a, b: b};
	});
var author$project$Svg$Path$Internal$concatMapString = function (f) {
	return A2(
		elm$core$List$foldl,
		F2(
			function (e, accum) {
				return _Utils_ap(
					accum,
					f(e));
			}),
		'');
};
var elm$core$Basics$pow = _Basics_pow;
var elm$core$Basics$round = _Basics_round;
var author$project$Svg$Path$Internal$fixed = F2(
	function (i, n) {
		var pow = A2(elm$core$Basics$pow, 10, i);
		var nInt = elm$core$Basics$round(n * pow);
		return elm$core$String$fromFloat(nInt / pow);
	});
var author$project$Svg$Path$Internal$roundToAtMost = function (doRound) {
	if (doRound.$ === 'Nothing') {
		return elm$core$String$fromFloat;
	} else {
		var n = doRound.a;
		return author$project$Svg$Path$Internal$fixed(n);
	}
};
var author$project$Svg$Path$Internal$formatPointWithPrecision = F2(
	function (dp, _n0) {
		var x = _n0.a;
		var y = _n0.b;
		return A2(author$project$Svg$Path$Internal$roundToAtMost, dp, x) + (',' + A2(author$project$Svg$Path$Internal$roundToAtMost, dp, y));
	});
var author$project$Svg$Path$Internal$formatInstruction = F2(
	function (dp, segment) {
		var formatPoint = author$project$Svg$Path$Internal$formatPointWithPrecision(dp);
		var letterAndPoint = F2(
			function (letter, point) {
				return _Utils_ap(
					letter,
					formatPoint(point));
			});
		var letterAndPoint2 = F3(
			function (letter, p1, p2) {
				return letter + (formatPoint(p1) + (' ' + formatPoint(p2)));
			});
		var letterAndPoint3 = F4(
			function (letter, p1, p2, p3) {
				return letter + (formatPoint(p1) + (' ' + (formatPoint(p2) + (' ' + formatPoint(p3)))));
			});
		var letterAndPoints = F2(
			function (letter, points) {
				return _Utils_ap(
					letter,
					A2(
						elm$core$String$join,
						' ',
						A2(elm$core$List$map, formatPoint, points)));
			});
		var formatCurveContinuation = function (continuation) {
			switch (continuation.$) {
				case 'QuadAbsolute':
					var goal = continuation.a;
					return A2(letterAndPoint, 'T', goal);
				case 'QuadRelative':
					var goal = continuation.a;
					return A2(letterAndPoint, 't', goal);
				case 'CubiAbsolute':
					var control = continuation.a;
					var goal = continuation.b;
					return A3(letterAndPoint2, 'S', control, goal);
				default:
					var control = continuation.a;
					var goal = continuation.b;
					return A3(letterAndPoint2, 's', control, goal);
			}
		};
		var doRound = author$project$Svg$Path$Internal$roundToAtMost(dp);
		var letterAndFloat = F2(
			function (letter, num) {
				return _Utils_ap(
					letter,
					doRound(num));
			});
		switch (segment.$) {
			case 'ClosePath':
				return 'Z';
			case 'MoveAbsolute':
				var point = segment.a;
				return A2(letterAndPoint, 'M', point);
			case 'MoveRelative':
				var point = segment.a;
				return A2(letterAndPoint, 'm', point);
			case 'LineAbsolute':
				var point = segment.a;
				return A2(letterAndPoint, 'L', point);
			case 'LineAbsoluteMany':
				var points = segment.a;
				if (!points.b) {
					return '';
				} else {
					return A2(letterAndPoints, 'L', points);
				}
			case 'LineRelative':
				var point = segment.a;
				return A2(letterAndPoint, 'l', point);
			case 'LineRelativeMany':
				var points = segment.a;
				if (!points.b) {
					return '';
				} else {
					return A2(letterAndPoints, 'l', points);
				}
			case 'VerticalAbsolute':
				var y = segment.a;
				return A2(letterAndFloat, 'V', y);
			case 'VerticalRelative':
				var dy = segment.a;
				return A2(letterAndFloat, 'v', dy);
			case 'HorizontalAbsolute':
				var x = segment.a;
				return A2(letterAndFloat, 'H', x);
			case 'HorizontalRelative':
				var dx = segment.a;
				return A2(letterAndFloat, 'h', dx);
			case 'QuadraticAbsolute':
				var control = segment.a;
				var goal = segment.b;
				return A3(letterAndPoint2, 'Q', control, goal);
			case 'QuadraticRelative':
				var control = segment.a;
				var goal = segment.b;
				return A3(letterAndPoint2, 'q', control, goal);
			case 'CubicAbsolute':
				var c1 = segment.a;
				var c2 = segment.b;
				var point = segment.c;
				return A4(letterAndPoint3, 'C', c1, c2, point);
			case 'CubicRelative':
				var dc1 = segment.a;
				var dc2 = segment.b;
				var dpoint = segment.c;
				return A4(letterAndPoint3, 'c', dc1, dc2, dpoint);
			case 'QuadraticAbsoluteMany':
				var control = segment.a;
				var goal = segment.b;
				var continuations = segment.c;
				return _Utils_ap(
					A2(
						author$project$Svg$Path$Internal$formatInstruction,
						dp,
						A2(author$project$Svg$Path$Internal$QuadraticAbsolute, control, goal)),
					A2(author$project$Svg$Path$Internal$concatMapString, formatCurveContinuation, continuations));
			case 'QuadraticRelativeMany':
				var dcontrol = segment.a;
				var dgoal = segment.b;
				var continuations = segment.c;
				return _Utils_ap(
					A2(
						author$project$Svg$Path$Internal$formatInstruction,
						dp,
						A2(author$project$Svg$Path$Internal$QuadraticRelative, dcontrol, dgoal)),
					A2(author$project$Svg$Path$Internal$concatMapString, formatCurveContinuation, continuations));
			case 'CubicAbsoluteMany':
				var c1 = segment.a;
				var c2 = segment.b;
				var goal = segment.c;
				var continuations = segment.d;
				return _Utils_ap(
					A2(
						author$project$Svg$Path$Internal$formatInstruction,
						dp,
						A3(author$project$Svg$Path$Internal$CubicAbsolute, c1, c2, goal)),
					A2(author$project$Svg$Path$Internal$concatMapString, formatCurveContinuation, continuations));
			case 'CubicRelativeMany':
				var dc1 = segment.a;
				var dc2 = segment.b;
				var dgoal = segment.c;
				var continuations = segment.d;
				return _Utils_ap(
					A2(
						author$project$Svg$Path$Internal$formatInstruction,
						dp,
						A3(author$project$Svg$Path$Internal$CubicRelative, dc1, dc2, dgoal)),
					A2(author$project$Svg$Path$Internal$concatMapString, formatCurveContinuation, continuations));
			case 'ArcTo':
				var _n3 = segment.a;
				var rx = _n3.a;
				var ry = _n3.b;
				var xAxisRotate = segment.b;
				var _n4 = segment.c;
				var arcFlag = _n4.a;
				var sweepFlag = _n4.b;
				var _n5 = segment.d;
				var x = _n5.a;
				var y = _n5.b;
				var sweep = function () {
					if (sweepFlag.$ === 'AntiClockwise') {
						return '0';
					} else {
						return '1';
					}
				}();
				var arc = function () {
					if (arcFlag.$ === 'Smallest') {
						return '0';
					} else {
						return '1';
					}
				}();
				return 'A' + (formatPoint(
					_Utils_Tuple2(rx, ry)) + (' ' + (doRound(xAxisRotate) + (' ' + (arc + (',' + (sweep + (' ' + formatPoint(
					_Utils_Tuple2(x, y))))))))));
			default:
				var _n8 = segment.a;
				var rx = _n8.a;
				var ry = _n8.b;
				var xAxisRotate = segment.b;
				var _n9 = segment.c;
				var arcFlag = _n9.a;
				var sweepFlag = _n9.b;
				var _n10 = segment.d;
				var x = _n10.a;
				var y = _n10.b;
				var sweep = function () {
					if (sweepFlag.$ === 'AntiClockwise') {
						return '0';
					} else {
						return '1';
					}
				}();
				var arc = function () {
					if (arcFlag.$ === 'Smallest') {
						return '0';
					} else {
						return '1';
					}
				}();
				return 'a' + (formatPoint(
					_Utils_Tuple2(rx, ry)) + (' ' + (doRound(xAxisRotate) + (' ' + (arc + (',' + (sweep + (' ' + formatPoint(
					_Utils_Tuple2(x, y))))))))));
		}
	});
var author$project$Svg$Path$instructionsToString = function (maxNumOfDecimals) {
	return A2(
		elm$core$Basics$composeL,
		elm$core$String$join(' '),
		elm$core$List$map(
			author$project$Svg$Path$Internal$formatInstruction(maxNumOfDecimals)));
};
var author$project$Svg$Path$Internal$ClosePath = {$: 'ClosePath'};
var author$project$Svg$Path$toStart = author$project$Svg$Path$Internal$ClosePath;
var author$project$Svg$Path$subPathToInstructions = F2(
	function (_n0, accum) {
		var start = _n0.a.a;
		var closePath = _n0.b.a;
		var segments = _n0.c;
		return closePath ? _Utils_ap(
			A2(elm$core$List$cons, start, segments),
			A2(elm$core$List$cons, author$project$Svg$Path$toStart, accum)) : _Utils_ap(
			A2(elm$core$List$cons, start, segments),
			accum);
	});
var elm$svg$Svg$Attributes$d = _VirtualDom_attribute('d');
var author$project$Svg$Path$pathToAttribute = function (path) {
	return elm$svg$Svg$Attributes$d(
		A2(
			author$project$Svg$Path$instructionsToString,
			elm$core$Maybe$Nothing,
			A3(elm$core$List$foldr, author$project$Svg$Path$subPathToInstructions, _List_Nil, path)));
};
var author$project$Svg$Path$StartingPoint = function (a) {
	return {$: 'StartingPoint', a: a};
};
var author$project$Svg$Path$Internal$MoveAbsolute = function (a) {
	return {$: 'MoveAbsolute', a: a};
};
var author$project$Svg$Path$startAt = A2(elm$core$Basics$composeL, author$project$Svg$Path$StartingPoint, author$project$Svg$Path$Internal$MoveAbsolute);
var author$project$Svg$Path$Subpath = F3(
	function (a, b, c) {
		return {$: 'Subpath', a: a, b: b, c: c};
	});
var author$project$Svg$Path$subpath = author$project$Svg$Path$Subpath;
var author$project$TypedSvg$path = author$project$TypedSvg$Core$node('path');
var author$project$TypedSvg$rect = author$project$TypedSvg$Core$node('rect');
var author$project$TypedSvg$TypesToStrings$lengthToString = function (length) {
	switch (length.$) {
		case 'Cm':
			var x = length.a;
			return elm$core$String$fromFloat(x) + 'cm';
		case 'Em':
			var x = length.a;
			return elm$core$String$fromFloat(x) + 'em';
		case 'Ex':
			var x = length.a;
			return elm$core$String$fromFloat(x) + 'ex';
		case 'In':
			var x = length.a;
			return elm$core$String$fromFloat(x) + 'in';
		case 'Mm':
			var x = length.a;
			return elm$core$String$fromFloat(x) + 'mm';
		case 'Num':
			var x = length.a;
			return elm$core$String$fromFloat(x);
		case 'Pc':
			var x = length.a;
			return elm$core$String$fromFloat(x) + 'pc';
		case 'Percent':
			var x = length.a;
			return elm$core$String$fromFloat(x) + '%';
		case 'Pt':
			var x = length.a;
			return elm$core$String$fromFloat(x) + 'pt';
		default:
			var x = length.a;
			return elm$core$String$fromFloat(x) + 'px';
	}
};
var author$project$TypedSvg$Attributes$height = function (length) {
	return A2(
		author$project$TypedSvg$Core$attribute,
		'height',
		author$project$TypedSvg$TypesToStrings$lengthToString(length));
};
var author$project$TypedSvg$Types$Px = function (a) {
	return {$: 'Px', a: a};
};
var author$project$TypedSvg$Types$px = author$project$TypedSvg$Types$Px;
var author$project$TypedSvg$Attributes$InPx$height = function (value) {
	return author$project$TypedSvg$Attributes$height(
		author$project$TypedSvg$Types$px(value));
};
var author$project$TypedSvg$Attributes$rx = function (length) {
	return A2(
		author$project$TypedSvg$Core$attribute,
		'rx',
		author$project$TypedSvg$TypesToStrings$lengthToString(length));
};
var author$project$TypedSvg$Attributes$InPx$rx = function (value) {
	return author$project$TypedSvg$Attributes$rx(
		author$project$TypedSvg$Types$px(value));
};
var author$project$TypedSvg$Attributes$width = function (length) {
	return A2(
		author$project$TypedSvg$Core$attribute,
		'width',
		author$project$TypedSvg$TypesToStrings$lengthToString(length));
};
var author$project$TypedSvg$Attributes$InPx$width = function (value) {
	return author$project$TypedSvg$Attributes$width(
		author$project$TypedSvg$Types$px(value));
};
var author$project$TypedSvg$Attributes$x = function (length) {
	return A2(
		author$project$TypedSvg$Core$attribute,
		'x',
		author$project$TypedSvg$TypesToStrings$lengthToString(length));
};
var author$project$TypedSvg$Attributes$InPx$x = function (value) {
	return author$project$TypedSvg$Attributes$x(
		author$project$TypedSvg$Types$px(value));
};
var author$project$TypedSvg$Attributes$y = function (length) {
	return A2(
		author$project$TypedSvg$Core$attribute,
		'y',
		author$project$TypedSvg$TypesToStrings$lengthToString(length));
};
var author$project$TypedSvg$Attributes$InPx$y = function (value) {
	return author$project$TypedSvg$Attributes$y(
		author$project$TypedSvg$Types$px(value));
};
var author$project$Architecture$Equipment$basin = F2(
	function (_n0, offset) {
		var faucetShelfWidth = _n0.faucetShelfWidth;
		var basinWidth = _n0.basinWidth;
		var basinLength = _n0.basinLength;
		var faucetLineLength = 200;
		var exactLength = author$project$Grid$Units$toMillimeters(basinLength);
		var lineAcrossBasinCenter = F3(
			function (lineOffset, width, y) {
				return A2(
					author$project$TypedSvg$path,
					_List_fromArray(
						[
							author$project$Svg$Path$pathToAttribute(
							_List_fromArray(
								[
									A3(
									author$project$Svg$Path$subpath,
									author$project$Svg$Path$startAt(
										_Utils_Tuple2((lineOffset + (exactLength / 2)) - (width / 2), y)),
									author$project$Svg$Path$open,
									_List_fromArray(
										[
											author$project$Svg$Path$lineBy(
											_Utils_Tuple2(width, 0))
										]))
								]))
						]),
					_List_Nil);
			});
		var drainLineLength = 100;
		return _List_fromArray(
			[
				A2(
				author$project$TypedSvg$rect,
				_List_fromArray(
					[
						author$project$TypedSvg$Attributes$InPx$height(basinWidth),
						author$project$TypedSvg$Attributes$InPx$width(exactLength),
						author$project$TypedSvg$Attributes$InPx$x(offset),
						author$project$TypedSvg$Attributes$InPx$y(-(faucetShelfWidth + basinWidth)),
						author$project$TypedSvg$Attributes$InPx$rx(author$project$Architecture$Equipment$exactBasinCornerRadius)
					]),
				_List_Nil),
				A3(lineAcrossBasinCenter, offset, drainLineLength, -(faucetShelfWidth + 120)),
				A3(lineAcrossBasinCenter, offset, faucetLineLength, -(faucetShelfWidth - 50))
			]);
	});
var author$project$Architecture$Equipment$basinToCounterEdge = 60;
var author$project$Architecture$Equipment$bathroomEquipmentAllowedCloser = function (otherEquipmentType) {
	switch (otherEquipmentType.$) {
		case 'WashbasinCounter':
			return -1;
		case 'Washbasin':
			return -1;
		case 'Pissoir':
			return -1;
		case 'BuiltInToilet':
			return -1;
		case 'ToiletWithShelfLikeEnclosure':
			return -1;
		case 'ToiletWithFullHeightEnclosure':
			return -1;
		default:
			return 0;
	}
};
var author$project$Architecture$Equipment$exactChairWidth = 440;
var author$project$Architecture$Equipment$chair = function (transforms) {
	return A2(
		author$project$TypedSvg$g,
		_List_fromArray(
			[
				author$project$TypedSvg$Attributes$transform(transforms)
			]),
		_List_fromArray(
			[
				A2(
				author$project$TypedSvg$rect,
				_List_fromArray(
					[
						author$project$TypedSvg$Attributes$InPx$height(400),
						author$project$TypedSvg$Attributes$InPx$width(author$project$Architecture$Equipment$exactChairWidth),
						author$project$TypedSvg$Attributes$InPx$x((-author$project$Architecture$Equipment$exactChairWidth) / 2),
						author$project$TypedSvg$Attributes$InPx$y(50)
					]),
				_List_Nil),
				A2(
				author$project$TypedSvg$path,
				_List_fromArray(
					[
						author$project$Svg$Path$pathToAttribute(
						_List_fromArray(
							[
								A3(
								author$project$Svg$Path$subpath,
								author$project$Svg$Path$startAt(
									_Utils_Tuple2((-author$project$Architecture$Equipment$exactChairWidth) / 2, 0)),
								author$project$Svg$Path$open,
								_List_fromArray(
									[
										author$project$Svg$Path$lineBy(
										_Utils_Tuple2(author$project$Architecture$Equipment$exactChairWidth, 0))
									]))
							]))
					]),
				_List_Nil)
			]));
};
var author$project$Architecture$Equipment$chairWidth = 4;
var author$project$Architecture$Equipment$enoughForChairAtDiningTable = 6;
var author$project$Architecture$Equipment$enoughToPassBehindChairAtTable = 10;
var author$project$Architecture$Equipment$enoughToPassNextToCounterCarryingStuff = 6;
var author$project$Architecture$Equipment$enoughToPassNextToLowFurniture = 6;
var author$project$Architecture$Equipment$enoughToReachLowDeepShelf = 12;
var author$project$Architecture$Equipment$enoughToReachLowShelf = 10;
var author$project$Architecture$Equipment$exactBowlWidth = 370;
var author$project$Architecture$Equipment$exactBowlLength = 550;
var author$project$Architecture$Equipment$setDepth = 7;
var author$project$Architecture$Equipment$exactEnclosureDepth = author$project$Grid$Units$toMillimeters(author$project$Architecture$Equipment$setDepth) - author$project$Architecture$Equipment$exactBowlLength;
var author$project$Architecture$Equipment$fridgeWidth = 6;
var author$project$Grid$Point$coordinates = function (_n0) {
	var x = _n0.a;
	var y = _n0.b;
	return _Utils_Tuple2(x, y);
};
var author$project$Grid$Boundary$gridBoundary = F2(
	function (point1, point2) {
		var _n0 = author$project$Grid$Point$coordinates(point2);
		var x2 = _n0.a;
		var y2 = _n0.b;
		var _n1 = author$project$Grid$Point$coordinates(point1);
		var x1 = _n1.a;
		var y1 = _n1.b;
		return author$project$Grid$Boundary$GridBoundary(
			{
				east: A2(elm$core$Basics$max, x1, x2),
				north: A2(elm$core$Basics$max, y1, y2),
				south: A2(elm$core$Basics$min, y1, y2),
				west: A2(elm$core$Basics$min, x1, x2)
			});
	});
var author$project$Grid$Boundary$rotate = F2(
	function (rotation, boundary) {
		var _n0 = boundary;
		var data = _n0.a;
		if (rotation.$ === 'Just') {
			switch (rotation.a.$) {
				case 'QuarterTurnClockwise':
					var _n2 = rotation.a;
					return author$project$Grid$Boundary$GridBoundary(
						{east: data.north, north: -data.west, south: -data.east, west: data.south});
				case 'HalfTurn':
					var _n3 = rotation.a;
					return author$project$Grid$Boundary$GridBoundary(
						{east: -data.west, north: -data.south, south: -data.north, west: -data.east});
				default:
					var _n4 = rotation.a;
					return author$project$Grid$Boundary$GridBoundary(
						{east: -data.south, north: data.east, south: data.west, west: -data.north});
			}
		} else {
			return boundary;
		}
	});
var author$project$Architecture$Equipment$kitchenEquipmentBoundary = F2(
	function (_n0, kitchenEquipment) {
		var counterWidth = _n0.counterWidth;
		switch (kitchenEquipment.$) {
			case 'BuiltInFridge':
				var fridgeTranslation = kitchenEquipment.a;
				var fridgeRotation = kitchenEquipment.b;
				return _List_fromArray(
					[
						A2(
						author$project$Grid$Boundary$translate,
						fridgeTranslation,
						A2(
							author$project$Grid$Boundary$rotate,
							fridgeRotation,
							A2(
								author$project$Grid$Boundary$gridBoundary,
								A2(author$project$Grid$Point$gridPoint, 0, 0),
								A2(author$project$Grid$Point$gridPoint, author$project$Architecture$Equipment$fridgeWidth, counterWidth))))
					]);
			case 'FullHeightCupboard':
				var cupboard = kitchenEquipment.a;
				var cupboardTranslation = kitchenEquipment.b;
				var cupboardRotation = kitchenEquipment.c;
				return _List_fromArray(
					[
						A2(
						author$project$Grid$Boundary$translate,
						cupboardTranslation,
						A2(
							author$project$Grid$Boundary$rotate,
							cupboardRotation,
							A2(
								author$project$Grid$Boundary$gridBoundary,
								A2(author$project$Grid$Point$gridPoint, 0, 0),
								A2(author$project$Grid$Point$gridPoint, cupboard.width, counterWidth))))
					]);
			default:
				return _List_Nil;
		}
	});
var author$project$Architecture$Equipment$stoveDepth = 480;
var author$project$Styles$SvgStyle$strokeWidthOnPlan = 20;
var author$project$Architecture$Equipment$stoveFrameOffset = 30 + (author$project$Styles$SvgStyle$strokeWidthOnPlan / 2);
var author$project$Architecture$Equipment$thingToCounterEdge = 60;
var author$project$TypedSvg$Types$Rotate = F3(
	function (a, b, c) {
		return {$: 'Rotate', a: a, b: b, c: c};
	});
var author$project$Grid$Rotation$toSvgTransforms = function (rotation) {
	if (rotation.$ === 'Just') {
		switch (rotation.a.$) {
			case 'QuarterTurnClockwise':
				var _n1 = rotation.a;
				return _List_fromArray(
					[
						A3(author$project$TypedSvg$Types$Rotate, 270, 0, 0)
					]);
			case 'HalfTurn':
				var _n2 = rotation.a;
				return _List_fromArray(
					[
						A3(author$project$TypedSvg$Types$Rotate, 180, 0, 0)
					]);
			default:
				var _n3 = rotation.a;
				return _List_fromArray(
					[
						A3(author$project$TypedSvg$Types$Rotate, 90, 0, 0)
					]);
		}
	} else {
		return _List_Nil;
	}
};
var elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var author$project$Grid$Vector$toSvgTransform = A2(elm$core$Basics$composeR, author$project$Grid$Vector$toVector2d, author$project$Utilities$translate);
var author$project$Styles$SvgStyle$className = function (original) {
	return original + '-329874629';
};
var author$project$Styles$SvgStyle$doorPanel = author$project$Styles$SvgStyle$className('doorPanel');
var author$project$Color$RGBA = F4(
	function (a, b, c, d) {
		return {$: 'RGBA', a: a, b: b, c: c, d: d};
	});
var author$project$Color$rgb = F3(
	function (r, g, b) {
		return A4(author$project$Color$RGBA, r, g, b, 1);
	});
var author$project$Styles$Color$almostBlack = A3(author$project$Color$rgb, 51, 51, 51);
var author$project$Styles$SvgStyle$itemStrokeColor = author$project$Styles$Color$almostBlack;
var author$project$Svg$Path$Internal$ArcTo = F4(
	function (a, b, c, d) {
		return {$: 'ArcTo', a: a, b: b, c: c, d: d};
	});
var author$project$Svg$Path$arcTo = F4(
	function (radius, xstartangle, _n0, point) {
		var largeArcFlag = _n0.a;
		var sweepFlag = _n0.b;
		return A4(
			author$project$Svg$Path$Internal$ArcTo,
			radius,
			xstartangle,
			_Utils_Tuple2(largeArcFlag, sweepFlag),
			point);
	});
var author$project$Svg$Path$Internal$Clockwise = {$: 'Clockwise'};
var author$project$Svg$Path$clockwise = author$project$Svg$Path$Internal$Clockwise;
var author$project$Svg$Path$closed = author$project$Svg$Path$CloseOption(true);
var author$project$Svg$Path$Internal$LineAbsolute = function (a) {
	return {$: 'LineAbsolute', a: a};
};
var author$project$Svg$Path$lineTo = author$project$Svg$Path$Internal$LineAbsolute;
var author$project$Svg$Path$Internal$Smallest = {$: 'Smallest'};
var author$project$Svg$Path$smallestArc = author$project$Svg$Path$Internal$Smallest;
var author$project$TypedSvg$Attributes$class = function (names) {
	return A2(
		author$project$TypedSvg$Core$attribute,
		'class',
		A2(elm$core$String$join, ' ', names));
};
var author$project$TypedSvg$Attributes$d = author$project$TypedSvg$Core$attribute('d');
var elm$core$Basics$modBy = _Basics_modBy;
var author$project$Color$fmod = F2(
	function (f, n) {
		var integer = elm$core$Basics$floor(f);
		return (A2(elm$core$Basics$modBy, n, integer) + f) - integer;
	});
var elm$core$Basics$abs = function (n) {
	return (n < 0) ? (-n) : n;
};
var elm$core$Basics$pi = _Basics_pi;
var elm$core$Basics$degrees = function (angleInDegrees) {
	return (angleInDegrees * elm$core$Basics$pi) / 180;
};
var author$project$Color$hslToRgb = F3(
	function (hue, saturation, lightness) {
		var normHue = hue / elm$core$Basics$degrees(60);
		var chroma = (1 - elm$core$Basics$abs((2 * lightness) - 1)) * saturation;
		var m = lightness - (chroma / 2);
		var x = chroma * (1 - elm$core$Basics$abs(
			A2(author$project$Color$fmod, normHue, 2) - 1));
		var _n0 = (normHue < 0) ? _Utils_Tuple3(0, 0, 0) : ((normHue < 1) ? _Utils_Tuple3(chroma, x, 0) : ((normHue < 2) ? _Utils_Tuple3(x, chroma, 0) : ((normHue < 3) ? _Utils_Tuple3(0, chroma, x) : ((normHue < 4) ? _Utils_Tuple3(0, x, chroma) : ((normHue < 5) ? _Utils_Tuple3(x, 0, chroma) : ((normHue < 6) ? _Utils_Tuple3(chroma, 0, x) : _Utils_Tuple3(0, 0, 0)))))));
		var r = _n0.a;
		var g = _n0.b;
		var b = _n0.c;
		return _Utils_Tuple3(r + m, g + m, b + m);
	});
var author$project$Color$toRgb = function (color) {
	if (color.$ === 'RGBA') {
		var r = color.a;
		var g = color.b;
		var b = color.c;
		var a = color.d;
		return {alpha: a, blue: b, green: g, red: r};
	} else {
		var h = color.a;
		var s = color.b;
		var l = color.c;
		var a = color.d;
		var _n1 = A3(author$project$Color$hslToRgb, h, s, l);
		var r = _n1.a;
		var g = _n1.b;
		var b = _n1.c;
		return {
			alpha: a,
			blue: elm$core$Basics$round(255 * b),
			green: elm$core$Basics$round(255 * g),
			red: elm$core$Basics$round(255 * r)
		};
	}
};
var author$project$Color$Convert$cssColorString = F2(
	function (kind, values) {
		return kind + ('(' + (A2(elm$core$String$join, ', ', values) + ')'));
	});
var author$project$Color$Convert$colorToCssRgba = function (cl) {
	var _n0 = author$project$Color$toRgb(cl);
	var red = _n0.red;
	var green = _n0.green;
	var blue = _n0.blue;
	var alpha = _n0.alpha;
	return A2(
		author$project$Color$Convert$cssColorString,
		'rgba',
		_List_fromArray(
			[
				elm$core$String$fromInt(red),
				elm$core$String$fromInt(green),
				elm$core$String$fromInt(blue),
				elm$core$String$fromFloat(alpha)
			]));
};
var author$project$TypedSvg$TypesToStrings$fillToString = function (fill) {
	if (fill.$ === 'Fill') {
		var color = fill.a;
		return author$project$Color$Convert$colorToCssRgba(color);
	} else {
		return 'none';
	}
};
var author$project$TypedSvg$Attributes$fill = A2(
	elm$core$Basics$composeL,
	author$project$TypedSvg$Core$attribute('fill'),
	author$project$TypedSvg$TypesToStrings$fillToString);
var author$project$TypedSvg$Types$Fill = function (a) {
	return {$: 'Fill', a: a};
};
var elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var author$project$Architecture$Equipment$kitchenEquipmentMarkup = F2(
	function (_n0, kitchenEquipment) {
		var counterWidth = _n0.counterWidth;
		switch (kitchenEquipment.$) {
			case 'Sink':
				var transforms = kitchenEquipment.a;
				return A2(
					author$project$TypedSvg$g,
					_List_fromArray(
						[
							author$project$TypedSvg$Attributes$transform(transforms)
						]),
					_List_fromArray(
						[
							A2(
							author$project$TypedSvg$rect,
							_List_fromArray(
								[
									author$project$TypedSvg$Attributes$InPx$height(400),
									author$project$TypedSvg$Attributes$InPx$rx(70),
									author$project$TypedSvg$Attributes$InPx$width(700),
									author$project$TypedSvg$Attributes$InPx$y(author$project$Architecture$Equipment$thingToCounterEdge)
								]),
							_List_Nil),
							A2(
							author$project$TypedSvg$path,
							_List_fromArray(
								[
									author$project$TypedSvg$Attributes$d('m 300,410 100,0')
								]),
							_List_Nil),
							A2(
							author$project$TypedSvg$path,
							_List_fromArray(
								[
									author$project$TypedSvg$Attributes$d('m 220,510 250,0')
								]),
							_List_Nil)
						]));
			case 'Stove':
				var transforms = kitchenEquipment.a;
				var stoveWidth = 500;
				return A2(
					author$project$TypedSvg$g,
					_List_fromArray(
						[
							author$project$TypedSvg$Attributes$transform(transforms)
						]),
					_List_fromArray(
						[
							A2(
							author$project$TypedSvg$rect,
							_List_fromArray(
								[
									author$project$TypedSvg$Attributes$InPx$height(author$project$Architecture$Equipment$stoveDepth),
									author$project$TypedSvg$Attributes$InPx$width(stoveWidth),
									author$project$TypedSvg$Attributes$InPx$y(author$project$Architecture$Equipment$thingToCounterEdge)
								]),
							_List_Nil),
							A2(
							author$project$TypedSvg$path,
							_List_fromArray(
								[
									author$project$Svg$Path$pathToAttribute(
									_List_fromArray(
										[
											A3(
											author$project$Svg$Path$subpath,
											author$project$Svg$Path$startAt(
												_Utils_Tuple2(author$project$Architecture$Equipment$stoveFrameOffset, author$project$Architecture$Equipment$thingToCounterEdge + (author$project$Architecture$Equipment$stoveDepth / 2))),
											author$project$Svg$Path$open,
											_List_fromArray(
												[
													author$project$Svg$Path$lineBy(
													_Utils_Tuple2(stoveWidth - (2 * author$project$Architecture$Equipment$stoveFrameOffset), 0))
												])),
											A3(
											author$project$Svg$Path$subpath,
											author$project$Svg$Path$startAt(
												_Utils_Tuple2(stoveWidth / 2, author$project$Architecture$Equipment$thingToCounterEdge + author$project$Architecture$Equipment$stoveFrameOffset)),
											author$project$Svg$Path$open,
											_List_fromArray(
												[
													author$project$Svg$Path$lineBy(
													_Utils_Tuple2(0, author$project$Architecture$Equipment$stoveDepth - (2 * author$project$Architecture$Equipment$stoveFrameOffset)))
												]))
										]))
								]),
							_List_Nil)
						]));
			case 'LargeStove':
				var transforms = kitchenEquipment.a;
				var yFrameOffset = author$project$Architecture$Equipment$thingToCounterEdge + author$project$Architecture$Equipment$stoveFrameOffset;
				var yAxis = author$project$Architecture$Equipment$thingToCounterEdge + (author$project$Architecture$Equipment$stoveDepth / 2);
				var stoveWidth = 700;
				var segmentWidth = stoveWidth / 3;
				return A2(
					author$project$TypedSvg$g,
					_List_fromArray(
						[
							author$project$TypedSvg$Attributes$transform(transforms)
						]),
					_List_fromArray(
						[
							A2(
							author$project$TypedSvg$rect,
							_List_fromArray(
								[
									author$project$TypedSvg$Attributes$InPx$height(author$project$Architecture$Equipment$stoveDepth),
									author$project$TypedSvg$Attributes$InPx$width(stoveWidth),
									author$project$TypedSvg$Attributes$InPx$y(author$project$Architecture$Equipment$thingToCounterEdge)
								]),
							_List_Nil),
							A2(
							author$project$TypedSvg$path,
							_List_fromArray(
								[
									author$project$Svg$Path$pathToAttribute(
									_List_fromArray(
										[
											A3(
											author$project$Svg$Path$subpath,
											author$project$Svg$Path$startAt(
												_Utils_Tuple2(segmentWidth + author$project$Architecture$Equipment$stoveFrameOffset, yAxis)),
											author$project$Svg$Path$open,
											_List_fromArray(
												[
													author$project$Svg$Path$lineBy(
													_Utils_Tuple2(2 * (segmentWidth - author$project$Architecture$Equipment$stoveFrameOffset), 0))
												])),
											A3(
											author$project$Svg$Path$subpath,
											author$project$Svg$Path$startAt(
												_Utils_Tuple2(segmentWidth, yFrameOffset)),
											author$project$Svg$Path$open,
											_List_fromArray(
												[
													author$project$Svg$Path$lineBy(
													_Utils_Tuple2(0, author$project$Architecture$Equipment$stoveDepth - (2 * author$project$Architecture$Equipment$stoveFrameOffset)))
												])),
											A3(
											author$project$Svg$Path$subpath,
											author$project$Svg$Path$startAt(
												_Utils_Tuple2(2 * segmentWidth, yFrameOffset)),
											author$project$Svg$Path$open,
											_List_fromArray(
												[
													author$project$Svg$Path$lineBy(
													_Utils_Tuple2(0, author$project$Architecture$Equipment$stoveDepth - (2 * author$project$Architecture$Equipment$stoveFrameOffset)))
												]))
										]))
								]),
							_List_Nil)
						]));
			case 'BuiltInFridge':
				var fridgeTranslation = kitchenEquipment.a;
				var fridgeRotation = kitchenEquipment.b;
				var exactFridgeWidth = author$project$Grid$Units$toMillimeters(author$project$Architecture$Equipment$fridgeWidth);
				return A2(
					author$project$TypedSvg$g,
					_List_fromArray(
						[
							author$project$TypedSvg$Attributes$transform(
							A2(
								elm$core$List$cons,
								author$project$Grid$Vector$toSvgTransform(fridgeTranslation),
								author$project$Grid$Rotation$toSvgTransforms(fridgeRotation)))
						]),
					_List_fromArray(
						[
							A2(
							author$project$TypedSvg$rect,
							_List_fromArray(
								[
									author$project$TypedSvg$Attributes$InPx$height(
									author$project$Grid$Units$toMillimeters(counterWidth)),
									author$project$TypedSvg$Attributes$InPx$width(exactFridgeWidth)
								]),
							_List_Nil),
							A2(
							author$project$TypedSvg$rect,
							_List_fromArray(
								[
									author$project$TypedSvg$Attributes$InPx$height(author$project$Styles$SvgStyle$strokeWidthOnPlan),
									author$project$TypedSvg$Attributes$InPx$width(exactFridgeWidth),
									author$project$TypedSvg$Attributes$fill(
									author$project$TypedSvg$Types$Fill(author$project$Styles$SvgStyle$itemStrokeColor))
								]),
							_List_Nil),
							A2(
							author$project$TypedSvg$path,
							_List_fromArray(
								[
									author$project$Svg$Path$pathToAttribute(
									elm$core$List$singleton(
										A3(
											author$project$Svg$Path$subpath,
											author$project$Svg$Path$startAt(
												_Utils_Tuple2(0, 0)),
											author$project$Svg$Path$closed,
											_List_fromArray(
												[
													A4(
													author$project$Svg$Path$arcTo,
													_Utils_Tuple2(exactFridgeWidth, exactFridgeWidth),
													0,
													_Utils_Tuple2(author$project$Svg$Path$smallestArc, author$project$Svg$Path$clockwise),
													_Utils_Tuple2(exactFridgeWidth, -exactFridgeWidth)),
													author$project$Svg$Path$lineTo(
													_Utils_Tuple2(exactFridgeWidth, 0))
												])))),
									author$project$TypedSvg$Attributes$class(
									_List_fromArray(
										[author$project$Styles$SvgStyle$doorPanel]))
								]),
							_List_Nil)
						]));
			case 'FullHeightCupboard':
				var data = kitchenEquipment.a;
				var cupboardTranslation = kitchenEquipment.b;
				var cupboardRotation = kitchenEquipment.c;
				return A2(
					author$project$TypedSvg$g,
					_List_fromArray(
						[
							author$project$TypedSvg$Attributes$transform(
							_List_fromArray(
								[
									author$project$Grid$Vector$toSvgTransform(cupboardTranslation)
								]))
						]),
					_List_fromArray(
						[
							A2(
							author$project$TypedSvg$rect,
							_List_fromArray(
								[
									author$project$TypedSvg$Attributes$InPx$height(
									author$project$Grid$Units$toMillimeters(counterWidth)),
									author$project$TypedSvg$Attributes$InPx$width(
									author$project$Grid$Units$toMillimeters(data.width))
								]),
							_List_Nil)
						]));
			default:
				return A2(author$project$TypedSvg$g, _List_Nil, _List_Nil);
		}
	});
var author$project$Architecture$Equipment$panelThickness = 40;
var author$project$Grid$Direction$NorthEastToSouth = {$: 'NorthEastToSouth'};
var author$project$Grid$Direction$SouthWestToNorth = {$: 'SouthWestToNorth'};
var author$project$Grid$Footprint$footprint = author$project$Grid$Footprint$Footprint;
var turboMaCk$any_dict$Dict$Any$empty = function (toKey) {
	return turboMaCk$any_dict$Dict$Any$AnyDict(
		{dict: elm$core$Dict$empty, toKey: toKey});
};
var turboMaCk$any_dict$Dict$Any$insert = F3(
	function (k, v, _n0) {
		var inner = _n0.a;
		return turboMaCk$any_dict$Dict$Any$AnyDict(
			_Utils_update(
				inner,
				{
					dict: A3(
						elm$core$Dict$insert,
						inner.toKey(k),
						_Utils_Tuple2(k, v),
						inner.dict)
				}));
	});
var turboMaCk$any_dict$Dict$Any$singleton = F3(
	function (k, v, f) {
		return A3(
			turboMaCk$any_dict$Dict$Any$insert,
			k,
			v,
			turboMaCk$any_dict$Dict$Any$empty(f));
	});
var turboMaCk$any_set$Set$Any$singleton = function (a) {
	return A2(
		elm$core$Basics$composeL,
		turboMaCk$any_set$Set$Any$AnySet,
		A2(turboMaCk$any_dict$Dict$Any$singleton, a, _Utils_Tuple0));
};
var author$project$Architecture$Equipment$pidgeonHoleLikeCasework = function (data) {
	var boundary = A2(
		author$project$Grid$Boundary$gridBoundary,
		A2(author$project$Grid$Point$gridPoint, 0, 0),
		A2(author$project$Grid$Point$gridPoint, data.depth, data.width));
	var access = F2(
		function (edgeDirection, start) {
			return {
				edgeDirection: edgeDirection,
				exceptions: elm$core$Maybe$Just(
					function (otherEquipmentType) {
						switch (otherEquipmentType.$) {
							case 'Curtain':
								return -8;
							case 'Desk':
								return -8;
							default:
								return 0;
						}
					}),
				length: data.width,
				locationLabel: 'to get things in and out',
				spaceRequired: 8,
				start: start
			};
		});
	return {
		availableRotations: A2(turboMaCk$any_set$Set$Any$singleton, author$project$Grid$Rotation$QuarterTurnClockwise, author$project$Grid$Rotation$rotationKey),
		locationPreposition: 'near',
		name: 'storage unit',
		rawEdgeAccessAlternatives: _List_fromArray(
			[
				_List_fromArray(
				[
					A2(
					access,
					author$project$Grid$Direction$NorthEastToSouth,
					A2(
						author$project$Grid$Point$gridPoint,
						author$project$Grid$Boundary$east(boundary),
						author$project$Grid$Boundary$north(boundary)))
				]),
				_List_fromArray(
				[
					A2(
					access,
					author$project$Grid$Direction$SouthWestToNorth,
					A2(
						author$project$Grid$Point$gridPoint,
						author$project$Grid$Boundary$west(boundary),
						author$project$Grid$Boundary$south(boundary)))
				])
			]),
		rawFootprint: author$project$Grid$Footprint$footprint(
			_List_fromArray(
				[boundary])),
		rawMarkup: _List_fromArray(
			[
				A2(
				author$project$TypedSvg$rect,
				_List_fromArray(
					[
						author$project$TypedSvg$Attributes$InPx$height(
						author$project$Grid$Units$toMillimeters(data.width)),
						author$project$TypedSvg$Attributes$InPx$width(
						author$project$Grid$Units$toMillimeters(data.depth))
					]),
				_List_Nil)
			])
	};
};
var author$project$Grid$Units$fromMillimeters = F2(
	function (toInt, millimeters) {
		return toInt(millimeters / author$project$Grid$Units$millimetersPerUnit);
	});
var ianmackenzie$elm_geometry$BoundingBox2d$extrema = function (_n0) {
	var extrema_ = _n0.a;
	return extrema_;
};
var author$project$Grid$Boundary$fromBoundingBox2d = function (boundingBox) {
	var _n0 = ianmackenzie$elm_geometry$BoundingBox2d$extrema(boundingBox);
	var minX = _n0.minX;
	var maxX = _n0.maxX;
	var minY = _n0.minY;
	var maxY = _n0.maxY;
	return author$project$Grid$Boundary$GridBoundary(
		{
			east: A2(author$project$Grid$Units$fromMillimeters, elm$core$Basics$ceiling, maxX),
			north: A2(author$project$Grid$Units$fromMillimeters, elm$core$Basics$ceiling, maxY),
			south: A2(author$project$Grid$Units$fromMillimeters, elm$core$Basics$floor, minY),
			west: A2(author$project$Grid$Units$fromMillimeters, elm$core$Basics$floor, minX)
		});
};
var ianmackenzie$elm_geometry$Geometry$Types$BoundingBox2d = function (a) {
	return {$: 'BoundingBox2d', a: a};
};
var ianmackenzie$elm_geometry$BoundingBox2d$fromExtrema = function (extrema_) {
	return ((_Utils_cmp(extrema_.minX, extrema_.maxX) < 1) && (_Utils_cmp(extrema_.minY, extrema_.maxY) < 1)) ? ianmackenzie$elm_geometry$Geometry$Types$BoundingBox2d(extrema_) : ianmackenzie$elm_geometry$Geometry$Types$BoundingBox2d(
		{
			maxX: A2(elm$core$Basics$max, extrema_.minX, extrema_.maxX),
			maxY: A2(elm$core$Basics$max, extrema_.minY, extrema_.maxY),
			minX: A2(elm$core$Basics$min, extrema_.minX, extrema_.maxX),
			minY: A2(elm$core$Basics$min, extrema_.minY, extrema_.maxY)
		});
};
var author$project$Grid$Boundary$toBoundingBox2d = function (_n0) {
	var data = _n0.a;
	return ianmackenzie$elm_geometry$BoundingBox2d$fromExtrema(
		{
			maxX: author$project$Grid$Units$toMillimeters(data.east),
			maxY: author$project$Grid$Units$toMillimeters(data.south),
			minX: author$project$Grid$Units$toMillimeters(data.west),
			minY: author$project$Grid$Units$toMillimeters(data.north)
		});
};
var author$project$Grid$RotationOffset$toDegrees = function (_n0) {
	var multiplier = _n0.a;
	return multiplier * 15;
};
var author$project$Grid$RotationOffset$toRadians = function (offset) {
	return elm$core$Basics$degrees(
		author$project$Grid$RotationOffset$toDegrees(offset));
};
var ianmackenzie$elm_geometry$Geometry$Types$Point2d = function (a) {
	return {$: 'Point2d', a: a};
};
var ianmackenzie$elm_geometry$Point2d$fromCoordinates = ianmackenzie$elm_geometry$Geometry$Types$Point2d;
var ianmackenzie$elm_geometry$Point2d$origin = ianmackenzie$elm_geometry$Point2d$fromCoordinates(
	_Utils_Tuple2(0, 0));
var ianmackenzie$elm_geometry$Point2d$coordinates = function (_n0) {
	var coordinates_ = _n0.a;
	return coordinates_;
};
var ianmackenzie$elm_geometry$Bootstrap$Frame2d$originPoint = function (_n0) {
	var properties = _n0.a;
	return properties.originPoint;
};
var ianmackenzie$elm_geometry$Point2d$translateBy = F2(
	function (vector, point) {
		var _n0 = ianmackenzie$elm_geometry$Vector2d$components(vector);
		var vx = _n0.a;
		var vy = _n0.b;
		var _n1 = ianmackenzie$elm_geometry$Point2d$coordinates(point);
		var px = _n1.a;
		var py = _n1.b;
		return ianmackenzie$elm_geometry$Point2d$fromCoordinates(
			_Utils_Tuple2(px + vx, py + vy));
	});
var ianmackenzie$elm_geometry$Point2d$addTo = F2(
	function (point, vector) {
		return A2(ianmackenzie$elm_geometry$Point2d$translateBy, vector, point);
	});
var ianmackenzie$elm_geometry$Bootstrap$Direction2d$components = function (_n0) {
	var components_ = _n0.a;
	return components_;
};
var ianmackenzie$elm_geometry$Bootstrap$Frame2d$xDirection = function (_n0) {
	var properties = _n0.a;
	return properties.xDirection;
};
var ianmackenzie$elm_geometry$Bootstrap$Frame2d$yDirection = function (_n0) {
	var properties = _n0.a;
	return properties.yDirection;
};
var ianmackenzie$elm_geometry$Vector2d$placeIn = function (frame) {
	var _n0 = ianmackenzie$elm_geometry$Bootstrap$Direction2d$components(
		ianmackenzie$elm_geometry$Bootstrap$Frame2d$yDirection(frame));
	var x2 = _n0.a;
	var y2 = _n0.b;
	var _n1 = ianmackenzie$elm_geometry$Bootstrap$Direction2d$components(
		ianmackenzie$elm_geometry$Bootstrap$Frame2d$xDirection(frame));
	var x1 = _n1.a;
	var y1 = _n1.b;
	return function (vector) {
		var _n2 = ianmackenzie$elm_geometry$Vector2d$components(vector);
		var x = _n2.a;
		var y = _n2.b;
		return ianmackenzie$elm_geometry$Vector2d$fromComponents(
			_Utils_Tuple2((x1 * x) + (x2 * y), (y1 * x) + (y2 * y)));
	};
};
var ianmackenzie$elm_geometry$Point2d$placeIn = F2(
	function (frame, point) {
		return A2(
			ianmackenzie$elm_geometry$Point2d$addTo,
			ianmackenzie$elm_geometry$Bootstrap$Frame2d$originPoint(frame),
			A2(
				ianmackenzie$elm_geometry$Vector2d$placeIn,
				frame,
				ianmackenzie$elm_geometry$Vector2d$fromComponents(
					ianmackenzie$elm_geometry$Point2d$coordinates(point))));
	});
var ianmackenzie$elm_geometry$Point2d$fromCoordinatesIn = F2(
	function (frame, localCoordinates) {
		return A2(
			ianmackenzie$elm_geometry$Point2d$placeIn,
			frame,
			ianmackenzie$elm_geometry$Point2d$fromCoordinates(localCoordinates));
	});
var ianmackenzie$elm_geometry$Rectangle2d$axes = function (_n0) {
	var rectangle = _n0.a;
	return rectangle.axes;
};
var ianmackenzie$elm_geometry$Rectangle2d$dimensions = function (_n0) {
	var rectangle = _n0.a;
	return rectangle.dimensions;
};
var ianmackenzie$elm_geometry$Rectangle2d$vertices = function (rectangle) {
	var localFrame = ianmackenzie$elm_geometry$Rectangle2d$axes(rectangle);
	var _n0 = ianmackenzie$elm_geometry$Rectangle2d$dimensions(rectangle);
	var width = _n0.a;
	var height = _n0.b;
	var halfHeight = height / 2;
	var halfWidth = width / 2;
	return {
		bottomLeft: A2(
			ianmackenzie$elm_geometry$Point2d$fromCoordinatesIn,
			localFrame,
			_Utils_Tuple2(-halfWidth, -halfHeight)),
		bottomRight: A2(
			ianmackenzie$elm_geometry$Point2d$fromCoordinatesIn,
			localFrame,
			_Utils_Tuple2(halfWidth, -halfHeight)),
		topLeft: A2(
			ianmackenzie$elm_geometry$Point2d$fromCoordinatesIn,
			localFrame,
			_Utils_Tuple2(-halfWidth, halfHeight)),
		topRight: A2(
			ianmackenzie$elm_geometry$Point2d$fromCoordinatesIn,
			localFrame,
			_Utils_Tuple2(halfWidth, halfHeight))
	};
};
var ianmackenzie$elm_geometry$Rectangle2d$boundingBox = function (rectangle) {
	var _n0 = ianmackenzie$elm_geometry$Rectangle2d$vertices(rectangle);
	var bottomLeft = _n0.bottomLeft;
	var bottomRight = _n0.bottomRight;
	var topRight = _n0.topRight;
	var topLeft = _n0.topLeft;
	var _n1 = ianmackenzie$elm_geometry$Point2d$coordinates(bottomLeft);
	var x1 = _n1.a;
	var y1 = _n1.b;
	var _n2 = ianmackenzie$elm_geometry$Point2d$coordinates(bottomRight);
	var x2 = _n2.a;
	var y2 = _n2.b;
	var _n3 = ianmackenzie$elm_geometry$Point2d$coordinates(topLeft);
	var x4 = _n3.a;
	var y4 = _n3.b;
	var _n4 = ianmackenzie$elm_geometry$Point2d$coordinates(topRight);
	var x3 = _n4.a;
	var y3 = _n4.b;
	return ianmackenzie$elm_geometry$BoundingBox2d$fromExtrema(
		{
			maxX: A2(
				elm$core$Basics$max,
				A2(elm$core$Basics$max, x1, x2),
				A2(elm$core$Basics$max, x3, x4)),
			maxY: A2(
				elm$core$Basics$max,
				A2(elm$core$Basics$max, y1, y2),
				A2(elm$core$Basics$max, y3, y4)),
			minX: A2(
				elm$core$Basics$min,
				A2(elm$core$Basics$min, x1, x2),
				A2(elm$core$Basics$min, x3, x4)),
			minY: A2(
				elm$core$Basics$min,
				A2(elm$core$Basics$min, y1, y2),
				A2(elm$core$Basics$min, y3, y4))
		});
};
var ianmackenzie$elm_geometry$Geometry$Types$Direction2d = function (a) {
	return {$: 'Direction2d', a: a};
};
var ianmackenzie$elm_geometry$Direction2d$unsafe = ianmackenzie$elm_geometry$Geometry$Types$Direction2d;
var ianmackenzie$elm_geometry$Direction2d$x = ianmackenzie$elm_geometry$Direction2d$unsafe(
	_Utils_Tuple2(1, 0));
var ianmackenzie$elm_geometry$Direction2d$y = ianmackenzie$elm_geometry$Direction2d$unsafe(
	_Utils_Tuple2(0, 1));
var ianmackenzie$elm_geometry$Geometry$Types$Frame2d = function (a) {
	return {$: 'Frame2d', a: a};
};
var ianmackenzie$elm_geometry$Frame2d$unsafe = ianmackenzie$elm_geometry$Geometry$Types$Frame2d;
var ianmackenzie$elm_geometry$Frame2d$atPoint = function (point) {
	return ianmackenzie$elm_geometry$Frame2d$unsafe(
		{originPoint: point, xDirection: ianmackenzie$elm_geometry$Direction2d$x, yDirection: ianmackenzie$elm_geometry$Direction2d$y});
};
var ianmackenzie$elm_geometry$Geometry$Types$Rectangle2d = function (a) {
	return {$: 'Rectangle2d', a: a};
};
var ianmackenzie$elm_geometry$Rectangle2d$fromExtrema = function (_n0) {
	var minX = _n0.minX;
	var maxX = _n0.maxX;
	var minY = _n0.minY;
	var maxY = _n0.maxY;
	var dy = maxY - minY;
	var midY = minY + (0.5 * dy);
	var dx = maxX - minX;
	var midX = minX + (0.5 * dx);
	var computedCenterPoint = ianmackenzie$elm_geometry$Point2d$fromCoordinates(
		_Utils_Tuple2(midX, midY));
	return ianmackenzie$elm_geometry$Geometry$Types$Rectangle2d(
		{
			axes: ianmackenzie$elm_geometry$Frame2d$atPoint(computedCenterPoint),
			dimensions: _Utils_Tuple2(
				elm$core$Basics$abs(dx),
				elm$core$Basics$abs(dy))
		});
};
var ianmackenzie$elm_geometry$Direction2d$toDirection = function (vector) {
	return ianmackenzie$elm_geometry$Direction2d$unsafe(
		ianmackenzie$elm_geometry$Vector2d$components(vector));
};
var ianmackenzie$elm_geometry$Direction2d$components = ianmackenzie$elm_geometry$Bootstrap$Direction2d$components;
var ianmackenzie$elm_geometry$Direction2d$toVector = function (direction) {
	return ianmackenzie$elm_geometry$Vector2d$fromComponents(
		ianmackenzie$elm_geometry$Direction2d$components(direction));
};
var elm$core$Basics$cos = _Basics_cos;
var elm$core$Basics$sin = _Basics_sin;
var ianmackenzie$elm_geometry$Vector2d$rotateBy = function (angle) {
	var sine = elm$core$Basics$sin(angle);
	var cosine = elm$core$Basics$cos(angle);
	return function (vector) {
		var _n0 = ianmackenzie$elm_geometry$Vector2d$components(vector);
		var x = _n0.a;
		var y = _n0.b;
		return ianmackenzie$elm_geometry$Vector2d$fromComponents(
			_Utils_Tuple2((x * cosine) - (y * sine), (y * cosine) + (x * sine)));
	};
};
var ianmackenzie$elm_geometry$Direction2d$rotateBy = F2(
	function (angle, direction) {
		return ianmackenzie$elm_geometry$Direction2d$toDirection(
			A2(
				ianmackenzie$elm_geometry$Vector2d$rotateBy,
				angle,
				ianmackenzie$elm_geometry$Direction2d$toVector(direction)));
	});
var ianmackenzie$elm_geometry$Frame2d$originPoint = function (_n0) {
	var frame = _n0.a;
	return frame.originPoint;
};
var ianmackenzie$elm_geometry$Frame2d$xDirection = function (_n0) {
	var frame = _n0.a;
	return frame.xDirection;
};
var ianmackenzie$elm_geometry$Frame2d$yDirection = function (_n0) {
	var frame = _n0.a;
	return frame.yDirection;
};
var ianmackenzie$elm_geometry$Bootstrap$Point2d$coordinates = function (_n0) {
	var coordinates_ = _n0.a;
	return coordinates_;
};
var ianmackenzie$elm_geometry$Vector2d$from = F2(
	function (firstPoint, secondPoint) {
		var _n0 = ianmackenzie$elm_geometry$Bootstrap$Point2d$coordinates(secondPoint);
		var x2 = _n0.a;
		var y2 = _n0.b;
		var _n1 = ianmackenzie$elm_geometry$Bootstrap$Point2d$coordinates(firstPoint);
		var x1 = _n1.a;
		var y1 = _n1.b;
		return ianmackenzie$elm_geometry$Vector2d$fromComponents(
			_Utils_Tuple2(x2 - x1, y2 - y1));
	});
var ianmackenzie$elm_geometry$Point2d$rotateAround = F2(
	function (centerPoint, angle) {
		return A2(
			elm$core$Basics$composeR,
			ianmackenzie$elm_geometry$Vector2d$from(centerPoint),
			A2(
				elm$core$Basics$composeR,
				ianmackenzie$elm_geometry$Vector2d$rotateBy(angle),
				ianmackenzie$elm_geometry$Point2d$addTo(centerPoint)));
	});
var ianmackenzie$elm_geometry$Frame2d$rotateAround = F2(
	function (centerPoint, angle) {
		var rotatePoint = A2(ianmackenzie$elm_geometry$Point2d$rotateAround, centerPoint, angle);
		var rotateDirection = ianmackenzie$elm_geometry$Direction2d$rotateBy(angle);
		return function (frame) {
			return ianmackenzie$elm_geometry$Frame2d$unsafe(
				{
					originPoint: rotatePoint(
						ianmackenzie$elm_geometry$Frame2d$originPoint(frame)),
					xDirection: rotateDirection(
						ianmackenzie$elm_geometry$Frame2d$xDirection(frame)),
					yDirection: rotateDirection(
						ianmackenzie$elm_geometry$Frame2d$yDirection(frame))
				});
		};
	});
var ianmackenzie$elm_geometry$Rectangle2d$rotateAround = F2(
	function (point, angle) {
		var rotateFrame = A2(ianmackenzie$elm_geometry$Frame2d$rotateAround, point, angle);
		return function (rectangle) {
			return ianmackenzie$elm_geometry$Geometry$Types$Rectangle2d(
				{
					axes: rotateFrame(
						ianmackenzie$elm_geometry$Rectangle2d$axes(rectangle)),
					dimensions: ianmackenzie$elm_geometry$Rectangle2d$dimensions(rectangle)
				});
		};
	});
var author$project$Grid$Boundary$addRotationOffset = F2(
	function (rotationOffset, boundary) {
		return author$project$Grid$Boundary$fromBoundingBox2d(
			ianmackenzie$elm_geometry$Rectangle2d$boundingBox(
				A3(
					ianmackenzie$elm_geometry$Rectangle2d$rotateAround,
					ianmackenzie$elm_geometry$Point2d$origin,
					author$project$Grid$RotationOffset$toRadians(rotationOffset),
					ianmackenzie$elm_geometry$Rectangle2d$fromExtrema(
						ianmackenzie$elm_geometry$BoundingBox2d$extrema(
							author$project$Grid$Boundary$toBoundingBox2d(boundary))))));
	});
var author$project$Grid$RotationOffset$toSvgTransform = function (offset) {
	return A3(
		author$project$TypedSvg$Types$Rotate,
		author$project$Grid$RotationOffset$toDegrees(offset),
		0,
		0);
};
var author$project$Grid$RotationOffset$toSvgTransforms = function (maybeOffset) {
	if (maybeOffset.$ === 'Nothing') {
		return _List_Nil;
	} else {
		var offset = maybeOffset.a;
		return _List_fromArray(
			[
				author$project$Grid$RotationOffset$toSvgTransform(offset)
			]);
	}
};
var author$project$Utilities$onlyWhen = F3(
	function (maybeArgument, _function, value) {
		if (maybeArgument.$ === 'Just') {
			var argument = maybeArgument.a;
			return A2(_function, argument, value);
		} else {
			return value;
		}
	});
var elm$core$Basics$clamp = F3(
	function (low, high, number) {
		return (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);
	});
var author$project$Architecture$Equipment$responsiveLoungeSeat = function (data) {
	var minSingleSeatWidth = 6;
	var loungeSeatWidth = A3(elm$core$Basics$clamp, 6, 78, data.width);
	var numberOfSeats = ((loungeSeatWidth - 1) / minSingleSeatWidth) | 0;
	var rawSpaceForTwoArmrests = loungeSeatWidth - (numberOfSeats * minSingleSeatWidth);
	var spaceForTwoArmrests = (rawSpaceForTwoArmrests < 3) ? 0 : rawSpaceForTwoArmrests;
	var loungeSeatDepth = A3(elm$core$Basics$clamp, 8, 9, data.depth);
	var exactLoungeSeatWidth = author$project$Grid$Units$toMillimeters(loungeSeatWidth);
	var exactLoungeSeatDepth = author$project$Grid$Units$toMillimeters(loungeSeatDepth);
	var exactArmrestWidth = author$project$Grid$Units$toMillimeters(spaceForTwoArmrests) / 2;
	var exactSeatDepth = (!spaceForTwoArmrests) ? author$project$Grid$Units$toMillimeters(6) : (exactLoungeSeatDepth - exactArmrestWidth);
	var loungeSeatMarkup = _List_fromArray(
		[
			A2(
			author$project$TypedSvg$rect,
			_List_fromArray(
				[
					author$project$TypedSvg$Attributes$InPx$width(exactLoungeSeatWidth),
					author$project$TypedSvg$Attributes$InPx$height(exactLoungeSeatDepth),
					author$project$TypedSvg$Attributes$InPx$rx(60)
				]),
			_List_Nil),
			A2(
			author$project$TypedSvg$rect,
			_List_fromArray(
				[
					author$project$TypedSvg$Attributes$InPx$x(exactArmrestWidth),
					author$project$TypedSvg$Attributes$InPx$width(exactLoungeSeatWidth - (2 * exactArmrestWidth)),
					author$project$TypedSvg$Attributes$InPx$height(exactSeatDepth)
				]),
			_List_Nil)
		]);
	return {
		boundary: A2(
			author$project$Grid$Boundary$translate,
			data.translation,
			A3(
				author$project$Utilities$onlyWhen,
				data.rotationOffset,
				author$project$Grid$Boundary$addRotationOffset,
				A2(
					author$project$Grid$Boundary$rotate,
					data.rotation,
					A2(
						author$project$Grid$Boundary$gridBoundary,
						A2(author$project$Grid$Point$gridPoint, 0, 0),
						A2(author$project$Grid$Point$gridPoint, data.width, data.depth))))),
		markup: A2(
			author$project$TypedSvg$g,
			_List_fromArray(
				[
					author$project$TypedSvg$Attributes$transform(
					A2(
						elm$core$List$cons,
						author$project$Grid$Vector$toSvgTransform(data.translation),
						_Utils_ap(
							author$project$Grid$RotationOffset$toSvgTransforms(data.rotationOffset),
							author$project$Grid$Rotation$toSvgTransforms(data.rotation))))
				]),
			loungeSeatMarkup)
	};
};
var author$project$Architecture$Equipment$singlePath = F3(
	function (startingPoint, closeOption, instructions) {
		return A2(
			author$project$TypedSvg$path,
			_List_fromArray(
				[
					author$project$Svg$Path$pathToAttribute(
					_List_fromArray(
						[
							A3(author$project$Svg$Path$subpath, startingPoint, closeOption, instructions)
						]))
				]),
			_List_Nil);
	});
var author$project$Architecture$Equipment$toPassBehindSittingPeople = 'to pass behind sitting people';
var author$project$Architecture$Equipment$spaceToServe = _Utils_Tuple2(author$project$Architecture$Equipment$enoughToPassBehindChairAtTable, author$project$Architecture$Equipment$toPassBehindSittingPeople);
var author$project$Architecture$Equipment$toSit = 'to sit';
var author$project$Architecture$Equipment$spaceToSit = _Utils_Tuple2(author$project$Architecture$Equipment$enoughForChairAtDiningTable, author$project$Architecture$Equipment$toSit);
var author$project$Architecture$Equipment$tableAllowedCloser = function (otherEquipmentType) {
	switch (otherEquipmentType.$) {
		case 'TableWithSeatsAtHead':
			return -2;
		case 'TableWithoutSeatsAtHead':
			return -2;
		default:
			return 0;
	}
};
var author$project$Architecture$Equipment$toPassNextToTable = 'to pass next to the table';
var author$project$Architecture$Equipment$toUseCupboards = 'to use cupboards under the counter';
var author$project$Grid$Direction$SouthEastToWest = {$: 'SouthEastToWest'};
var author$project$Svg$Path$Internal$ArcBy = F4(
	function (a, b, c, d) {
		return {$: 'ArcBy', a: a, b: b, c: c, d: d};
	});
var author$project$Svg$Path$arcBy = F4(
	function (radius, xstartangle, _n0, point) {
		var largeArcFlag = _n0.a;
		var direction = _n0.b;
		return A4(
			author$project$Svg$Path$Internal$ArcBy,
			radius,
			xstartangle,
			_Utils_Tuple2(largeArcFlag, direction),
			point);
	});
var author$project$Architecture$Equipment$toiletBowl = function (offset) {
	var toiletEnclosureDepth = A2(author$project$Grid$Units$fromMillimeters, elm$core$Basics$ceiling, -offset.y);
	var southExtreme = A2(author$project$Grid$Units$fromMillimeters, elm$core$Basics$floor, offset.y - author$project$Architecture$Equipment$exactBowlLength);
	var exactMinSpaceToSidesRequired = 900;
	var exactBowlAxis = offset.x + (author$project$Architecture$Equipment$exactBowlWidth / 2);
	var cornerRadius = 120;
	var roundedCornerBy = A3(
		author$project$Svg$Path$arcBy,
		_Utils_Tuple2(cornerRadius, cornerRadius),
		0,
		_Utils_Tuple2(author$project$Svg$Path$smallestArc, author$project$Svg$Path$clockwise));
	var bowlWestExtreme = A2(author$project$Grid$Units$fromMillimeters, elm$core$Basics$floor, offset.x);
	var bowlEastExtreme = A2(author$project$Grid$Units$fromMillimeters, elm$core$Basics$ceiling, offset.x + author$project$Architecture$Equipment$exactBowlWidth);
	var requiredSpaceToTheSides = A2(
		author$project$Grid$Units$fromMillimeters,
		elm$core$Basics$ceiling,
		(exactMinSpaceToSidesRequired - author$project$Grid$Units$toMillimeters(bowlEastExtreme - bowlWestExtreme)) / 2);
	return _Utils_Tuple3(
		_List_fromArray(
			[
				A2(
				author$project$TypedSvg$path,
				_List_fromArray(
					[
						author$project$Svg$Path$pathToAttribute(
						_List_fromArray(
							[
								A3(
								author$project$Svg$Path$subpath,
								author$project$Svg$Path$startAt(
									_Utils_Tuple2(offset.x, offset.y)),
								author$project$Svg$Path$closed,
								_List_fromArray(
									[
										author$project$Svg$Path$lineBy(
										_Utils_Tuple2(0, -(author$project$Architecture$Equipment$exactBowlLength - cornerRadius))),
										roundedCornerBy(
										_Utils_Tuple2(cornerRadius, -cornerRadius)),
										author$project$Svg$Path$lineBy(
										_Utils_Tuple2(author$project$Architecture$Equipment$exactBowlWidth - (2 * cornerRadius), 0)),
										roundedCornerBy(
										_Utils_Tuple2(cornerRadius, cornerRadius)),
										author$project$Svg$Path$lineBy(
										_Utils_Tuple2(0, author$project$Architecture$Equipment$exactBowlLength - cornerRadius))
									]))
							]))
					]),
				_List_Nil),
				A2(
				author$project$TypedSvg$path,
				_List_fromArray(
					[
						author$project$Svg$Path$pathToAttribute(
						_List_fromArray(
							[
								A3(
								author$project$Svg$Path$subpath,
								author$project$Svg$Path$startAt(
									_Utils_Tuple2(offset.x, (offset.y - author$project$Architecture$Equipment$exactBowlLength) + 470)),
								author$project$Svg$Path$open,
								_List_fromArray(
									[
										author$project$Svg$Path$lineBy(
										_Utils_Tuple2(author$project$Architecture$Equipment$exactBowlWidth, 0))
									]))
							]))
					]),
				_List_Nil)
			]),
		A2(
			author$project$Grid$Boundary$gridBoundary,
			A2(author$project$Grid$Point$gridPoint, bowlWestExtreme, southExtreme),
			A2(author$project$Grid$Point$gridPoint, bowlEastExtreme, -toiletEnclosureDepth)),
		_List_fromArray(
			[
				_List_fromArray(
				[
					{
					edgeDirection: author$project$Grid$Direction$SouthEastToWest,
					exceptions: elm$core$Maybe$Just(author$project$Architecture$Equipment$bathroomEquipmentAllowedCloser),
					length: ((2 * requiredSpaceToTheSides) + bowlEastExtreme) - bowlWestExtreme,
					locationLabel: 'for comfortable usage',
					spaceRequired: 11,
					start: A2(author$project$Grid$Point$gridPoint, bowlEastExtreme + requiredSpaceToTheSides, -toiletEnclosureDepth)
				}
				])
			]));
};
var author$project$Architecture$Equipment$enclosureDepth = A2(author$project$Grid$Units$fromMillimeters, elm$core$Basics$ceiling, author$project$Architecture$Equipment$exactEnclosureDepth);
var author$project$Architecture$Equipment$toiletWithEnclosure = function (enclosure) {
	var bowlX = ((author$project$Grid$Units$toMillimeters(enclosure.width) - author$project$Architecture$Equipment$exactBowlWidth) / 2) + enclosure.bowlOffsetFromMiddle;
	var _n0 = author$project$Architecture$Equipment$toiletBowl(
		{x: bowlX, y: -author$project$Architecture$Equipment$exactEnclosureDepth});
	var bowlMarkup = _n0.a;
	var bowlFootprint = _n0.b;
	var toiletEdgeAccessAlternatives = _n0.c;
	return {
		availableRotations: author$project$Architecture$Equipment$allRotations,
		locationPreposition: 'next to',
		name: 'toilet bowl',
		rawEdgeAccessAlternatives: toiletEdgeAccessAlternatives,
		rawFootprint: author$project$Grid$Footprint$footprint(
			_List_fromArray(
				[
					A2(
					author$project$Grid$Boundary$gridBoundary,
					A2(author$project$Grid$Point$gridPoint, 0, -author$project$Architecture$Equipment$enclosureDepth),
					A2(author$project$Grid$Point$gridPoint, enclosure.width, 0)),
					bowlFootprint
				])),
		rawMarkup: _Utils_ap(bowlMarkup, enclosure.enclosureMarkup)
	};
};
var author$project$Architecture$Wall$DividingWall = {$: 'DividingWall'};
var author$project$Architecture$Wall$wallTypeThickness = function (wallTypeOption) {
	if (wallTypeOption.$ === 'DividingWall') {
		return 2;
	} else {
		return 1;
	}
};
var author$project$Grid$Boundary$setEast = F2(
	function (newValue, _n0) {
		var data = _n0.a;
		return author$project$Grid$Boundary$GridBoundary(
			_Utils_update(
				data,
				{
					east: A2(elm$core$Basics$max, newValue, data.west)
				}));
	});
var author$project$Grid$Boundary$setNorth = F2(
	function (newValue, _n0) {
		var data = _n0.a;
		return author$project$Grid$Boundary$GridBoundary(
			_Utils_update(
				data,
				{
					north: A2(elm$core$Basics$max, newValue, data.south)
				}));
	});
var author$project$Grid$Boundary$setSouth = F2(
	function (newValue, _n0) {
		var data = _n0.a;
		return author$project$Grid$Boundary$GridBoundary(
			_Utils_update(
				data,
				{
					south: A2(elm$core$Basics$min, newValue, data.north)
				}));
	});
var author$project$Grid$Boundary$setWest = F2(
	function (newValue, _n0) {
		var data = _n0.a;
		return author$project$Grid$Boundary$GridBoundary(
			_Utils_update(
				data,
				{
					west: A2(elm$core$Basics$min, newValue, data.east)
				}));
	});
var elm$svg$Svg$trustedNode = _VirtualDom_nodeNS('http://www.w3.org/2000/svg');
var elm$svg$Svg$rect = elm$svg$Svg$trustedNode('rect');
var elm$svg$Svg$Attributes$height = _VirtualDom_attribute('height');
var elm$svg$Svg$Attributes$width = _VirtualDom_attribute('width');
var elm$svg$Svg$Attributes$x = _VirtualDom_attribute('x');
var elm$svg$Svg$Attributes$y = _VirtualDom_attribute('y');
var ianmackenzie$elm_geometry_svg$Geometry$Svg$boundingBox2d = F2(
	function (attributes, boundingBox) {
		var _n0 = ianmackenzie$elm_geometry$BoundingBox2d$extrema(boundingBox);
		var minX = _n0.minX;
		var minY = _n0.minY;
		var maxX = _n0.maxX;
		var maxY = _n0.maxY;
		var width = elm$svg$Svg$Attributes$width(
			elm$core$String$fromFloat(maxX - minX));
		var x = elm$svg$Svg$Attributes$x(
			elm$core$String$fromFloat(minX));
		var height = elm$svg$Svg$Attributes$height(
			elm$core$String$fromFloat(maxY - minY));
		var y = elm$svg$Svg$Attributes$y(
			elm$core$String$fromFloat(minY));
		return A2(
			elm$svg$Svg$rect,
			A2(
				elm$core$List$cons,
				x,
				A2(
					elm$core$List$cons,
					y,
					A2(
						elm$core$List$cons,
						width,
						A2(elm$core$List$cons, height, attributes)))),
			_List_Nil);
	});
var author$project$Grid$Boundary$toSvg = function (attributes) {
	return A2(
		elm$core$Basics$composeR,
		author$project$Grid$Boundary$toBoundingBox2d,
		ianmackenzie$elm_geometry_svg$Geometry$Svg$boundingBox2d(attributes));
};
var author$project$Grid$Direction$NorthWestToEast = {$: 'NorthWestToEast'};
var author$project$Grid$RotationOffset$RotationOffset = function (a) {
	return {$: 'RotationOffset', a: a};
};
var author$project$Grid$RotationOffset$rotationOffset = author$project$Grid$RotationOffset$RotationOffset;
var author$project$Styles$SvgStyle$wall = author$project$Styles$SvgStyle$className('wall');
var author$project$Svg$Path$Internal$AntiClockwise = {$: 'AntiClockwise'};
var author$project$Svg$Path$antiClockwise = author$project$Svg$Path$Internal$AntiClockwise;
var author$project$Svg$Path$cubicBy = F3(
	function (dcontrol1, dcontrol2, dpoint) {
		return A3(author$project$Svg$Path$Internal$CubicRelative, dcontrol1, dcontrol2, dpoint);
	});
var author$project$TypedSvg$circle = author$project$TypedSvg$Core$node('circle');
var author$project$TypedSvg$line = author$project$TypedSvg$Core$node('line');
var author$project$TypedSvg$TypesToStrings$opacityToString = function (opacity) {
	if (opacity.$ === 'Opacity') {
		var n = opacity.a;
		return elm$core$String$fromFloat(n);
	} else {
		return 'inherit';
	}
};
var author$project$TypedSvg$Attributes$opacity = A2(
	elm$core$Basics$composeL,
	author$project$TypedSvg$Core$attribute('opacity'),
	author$project$TypedSvg$TypesToStrings$opacityToString);
var author$project$TypedSvg$Attributes$cx = function (length) {
	return A2(
		author$project$TypedSvg$Core$attribute,
		'cx',
		author$project$TypedSvg$TypesToStrings$lengthToString(length));
};
var author$project$TypedSvg$Attributes$InPx$cx = function (value) {
	return author$project$TypedSvg$Attributes$cx(
		author$project$TypedSvg$Types$px(value));
};
var author$project$TypedSvg$Attributes$cy = function (length) {
	return A2(
		author$project$TypedSvg$Core$attribute,
		'cy',
		author$project$TypedSvg$TypesToStrings$lengthToString(length));
};
var author$project$TypedSvg$Attributes$InPx$cy = function (value) {
	return author$project$TypedSvg$Attributes$cy(
		author$project$TypedSvg$Types$px(value));
};
var author$project$TypedSvg$Attributes$r = function (length) {
	return A2(
		author$project$TypedSvg$Core$attribute,
		'r',
		author$project$TypedSvg$TypesToStrings$lengthToString(length));
};
var author$project$TypedSvg$Attributes$InPx$r = function (value) {
	return author$project$TypedSvg$Attributes$r(
		author$project$TypedSvg$Types$px(value));
};
var author$project$TypedSvg$Attributes$ry = function (length) {
	return A2(
		author$project$TypedSvg$Core$attribute,
		'ry',
		author$project$TypedSvg$TypesToStrings$lengthToString(length));
};
var author$project$TypedSvg$Attributes$InPx$ry = function (value) {
	return author$project$TypedSvg$Attributes$ry(
		author$project$TypedSvg$Types$px(value));
};
var author$project$TypedSvg$Attributes$strokeWidth = function (length) {
	return A2(
		author$project$TypedSvg$Core$attribute,
		'stroke-width',
		author$project$TypedSvg$TypesToStrings$lengthToString(length));
};
var author$project$TypedSvg$Attributes$InPx$strokeWidth = function (value) {
	return author$project$TypedSvg$Attributes$strokeWidth(
		author$project$TypedSvg$Types$px(value));
};
var author$project$TypedSvg$Attributes$x1 = function (position) {
	return A2(
		author$project$TypedSvg$Core$attribute,
		'x1',
		author$project$TypedSvg$TypesToStrings$lengthToString(position));
};
var author$project$TypedSvg$Attributes$InPx$x1 = function (value) {
	return author$project$TypedSvg$Attributes$x1(
		author$project$TypedSvg$Types$px(value));
};
var author$project$TypedSvg$Attributes$x2 = function (position) {
	return A2(
		author$project$TypedSvg$Core$attribute,
		'x2',
		author$project$TypedSvg$TypesToStrings$lengthToString(position));
};
var author$project$TypedSvg$Attributes$InPx$x2 = function (value) {
	return author$project$TypedSvg$Attributes$x2(
		author$project$TypedSvg$Types$px(value));
};
var author$project$TypedSvg$Attributes$y1 = function (position) {
	return A2(
		author$project$TypedSvg$Core$attribute,
		'y1',
		author$project$TypedSvg$TypesToStrings$lengthToString(position));
};
var author$project$TypedSvg$Attributes$InPx$y1 = function (value) {
	return author$project$TypedSvg$Attributes$y1(
		author$project$TypedSvg$Types$px(value));
};
var author$project$TypedSvg$Attributes$y2 = function (position) {
	return A2(
		author$project$TypedSvg$Core$attribute,
		'y2',
		author$project$TypedSvg$TypesToStrings$lengthToString(position));
};
var author$project$TypedSvg$Attributes$InPx$y2 = function (value) {
	return author$project$TypedSvg$Attributes$y2(
		author$project$TypedSvg$Types$px(value));
};
var author$project$TypedSvg$Types$FillNone = {$: 'FillNone'};
var author$project$TypedSvg$Types$Opacity = function (a) {
	return {$: 'Opacity', a: a};
};
var elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3(elm$core$List$foldr, elm$core$List$cons, ys, xs);
		}
	});
var elm$core$List$concat = function (lists) {
	return A3(elm$core$List$foldr, elm$core$List$append, _List_Nil, lists);
};
var elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var elm$core$List$tail = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return elm$core$Maybe$Just(xs);
	} else {
		return elm$core$Maybe$Nothing;
	}
};
var elm$core$Bitwise$and = _Bitwise_and;
var elm$random$Random$Generator = function (a) {
	return {$: 'Generator', a: a};
};
var elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var elm$random$Random$Seed = F2(
	function (a, b) {
		return {$: 'Seed', a: a, b: b};
	});
var elm$random$Random$next = function (_n0) {
	var state0 = _n0.a;
	var incr = _n0.b;
	return A2(elm$random$Random$Seed, ((state0 * 1664525) + incr) >>> 0, incr);
};
var elm$core$Bitwise$xor = _Bitwise_xor;
var elm$random$Random$peel = function (_n0) {
	var state = _n0.a;
	var word = (state ^ (state >>> ((state >>> 28) + 4))) * 277803737;
	return ((word >>> 22) ^ word) >>> 0;
};
var elm$random$Random$float = F2(
	function (a, b) {
		return elm$random$Random$Generator(
			function (seed0) {
				var seed1 = elm$random$Random$next(seed0);
				var range = elm$core$Basics$abs(b - a);
				var n1 = elm$random$Random$peel(seed1);
				var n0 = elm$random$Random$peel(seed0);
				var lo = (134217727 & n1) * 1.0;
				var hi = (67108863 & n0) * 1.0;
				var val = ((hi * 1.34217728e8) + lo) / 9.007199254740992e15;
				var scaled = (val * range) + a;
				return _Utils_Tuple2(
					scaled,
					elm$random$Random$next(seed1));
			});
	});
var elm$random$Random$initialSeed = function (x) {
	var _n0 = elm$random$Random$next(
		A2(elm$random$Random$Seed, 0, 1013904223));
	var state1 = _n0.a;
	var incr = _n0.b;
	var state2 = (state1 + x) >>> 0;
	return elm$random$Random$next(
		A2(elm$random$Random$Seed, state2, incr));
};
var elm$random$Random$step = F2(
	function (_n0, seed) {
		var generator = _n0.a;
		return generator(seed);
	});
var elm_community$list_extra$List$Extra$scanl = F3(
	function (f, b, xs) {
		var scan1 = F2(
			function (x, accAcc) {
				if (accAcc.b) {
					var acc = accAcc.a;
					return A2(
						elm$core$List$cons,
						A2(f, x, acc),
						accAcc);
				} else {
					return _List_Nil;
				}
			});
		return elm$core$List$reverse(
			A3(
				elm$core$List$foldl,
				scan1,
				_List_fromArray(
					[b]),
				xs));
	});
var turboMaCk$any_set$Set$Any$empty = A2(elm$core$Basics$composeL, turboMaCk$any_set$Set$Any$AnySet, turboMaCk$any_dict$Dict$Any$empty);
var author$project$Architecture$Equipment$rawProperties = function (equipmentTypeValue) {
	switch (equipmentTypeValue.$) {
		case 'UpstairsStorage':
			var storageWidth = equipmentTypeValue.a;
			var storageDepth = 18;
			var boundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(author$project$Grid$Point$gridPoint, 0, 0),
				A2(author$project$Grid$Point$gridPoint, storageWidth, storageDepth));
			return {
				availableRotations: turboMaCk$any_set$Set$Any$empty(author$project$Grid$Rotation$rotationKey),
				locationPreposition: 'in front of',
				name: 'storage unit',
				rawEdgeAccessAlternatives: _List_Nil,
				rawFootprint: author$project$Grid$Footprint$footprint(
					_List_fromArray(
						[boundary])),
				rawMarkup: _List_fromArray(
					[
						A2(
						author$project$TypedSvg$rect,
						_List_fromArray(
							[
								author$project$TypedSvg$Attributes$InPx$width(
								author$project$Grid$Units$toMillimeters(storageWidth)),
								author$project$TypedSvg$Attributes$InPx$height(
								author$project$Grid$Units$toMillimeters(storageDepth))
							]),
						_List_Nil)
					])
			};
		case 'Seat':
			var seatWidth = equipmentTypeValue.a;
			var seatDepth = 6;
			var boundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(author$project$Grid$Point$gridPoint, 0, 0),
				A2(author$project$Grid$Point$gridPoint, seatWidth, seatDepth));
			return {
				availableRotations: author$project$Architecture$Equipment$allRotations,
				locationPreposition: 'in',
				name: 'seat',
				rawEdgeAccessAlternatives: _List_Nil,
				rawFootprint: author$project$Grid$Footprint$footprint(
					_List_fromArray(
						[boundary])),
				rawMarkup: _List_fromArray(
					[
						A2(
						author$project$TypedSvg$rect,
						_List_fromArray(
							[
								author$project$TypedSvg$Attributes$InPx$width(
								author$project$Grid$Units$toMillimeters(seatWidth)),
								author$project$TypedSvg$Attributes$InPx$height(
								author$project$Grid$Units$toMillimeters(seatDepth))
							]),
						_List_Nil)
					])
			};
		case 'LoungeChairWithSideTable':
			var tableMarkup = A2(
				author$project$TypedSvg$circle,
				_List_fromArray(
					[
						author$project$TypedSvg$Attributes$InPx$r(200),
						author$project$TypedSvg$Attributes$transform(
						_List_fromArray(
							[
								A2(author$project$TypedSvg$Types$Translate, -700, -100)
							]))
					]),
				_List_Nil);
			var tableBoundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(author$project$Grid$Point$gridPoint, -9, -3),
				A2(author$project$Grid$Point$gridPoint, -5, 1));
			var renderedArmchair = author$project$Architecture$Equipment$responsiveLoungeSeat(
				{
					depth: 8,
					rotation: elm$core$Maybe$Nothing,
					rotationOffset: elm$core$Maybe$Just(
						author$project$Grid$RotationOffset$rotationOffset(2)),
					translation: A2(author$project$Grid$Vector$gridVector, -3, -2),
					width: 8
				});
			var armchairBoundary = renderedArmchair.boundary;
			return {
				availableRotations: author$project$Architecture$Equipment$allRotations,
				locationPreposition: 'around',
				name: 'lounge chair with a side table',
				rawEdgeAccessAlternatives: _List_fromArray(
					[
						_List_fromArray(
						[
							{
							edgeDirection: author$project$Grid$Direction$NorthEastToSouth,
							exceptions: elm$core$Maybe$Nothing,
							length: (author$project$Grid$Boundary$north(armchairBoundary) - author$project$Grid$Boundary$south(armchairBoundary)) + 6,
							locationLabel: 'to use it comfortably',
							spaceRequired: 16,
							start: A2(
								author$project$Grid$Point$gridPoint,
								author$project$Grid$Boundary$west(tableBoundary) - 1,
								author$project$Grid$Boundary$north(armchairBoundary) + 1)
						}
						])
					]),
				rawFootprint: author$project$Grid$Footprint$footprint(
					_List_fromArray(
						[armchairBoundary, tableBoundary])),
				rawMarkup: _List_fromArray(
					[renderedArmchair.markup, tableMarkup])
			};
		case 'LoungeWithSofaAndTwoArmchairs':
			var tableAccessLength = 9;
			var sofaLength = 22;
			var renderedSofa = author$project$Architecture$Equipment$responsiveLoungeSeat(
				{
					depth: 8,
					rotation: elm$core$Maybe$Just(author$project$Grid$Rotation$HalfTurn),
					rotationOffset: elm$core$Maybe$Nothing,
					translation: A2(author$project$Grid$Vector$gridVector, 0, -22),
					width: sofaLength
				});
			var tableBoundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(
					author$project$Grid$Point$gridPoint,
					author$project$Grid$Boundary$west(renderedSofa.boundary),
					author$project$Grid$Boundary$north(renderedSofa.boundary)),
				A2(
					author$project$Grid$Point$gridPoint,
					author$project$Grid$Boundary$east(renderedSofa.boundary),
					-12));
			var sofaAccessLength = author$project$Grid$Boundary$north(tableBoundary) - author$project$Grid$Boundary$south(renderedSofa.boundary);
			var exactTableWidth = 500;
			var exactTableLength = 800;
			var exactSofaLength = author$project$Grid$Units$toMillimeters(sofaLength);
			var armchair = F2(
				function (armchairTranslation, armchairRotationOffset) {
					return author$project$Architecture$Equipment$responsiveLoungeSeat(
						{
							depth: 9,
							rotation: elm$core$Maybe$Nothing,
							rotationOffset: elm$core$Maybe$Just(armchairRotationOffset),
							translation: armchairTranslation,
							width: 8
						});
				});
			var eastArmchair = A2(
				armchair,
				A2(author$project$Grid$Vector$gridVector, -9, -6),
				author$project$Grid$RotationOffset$rotationOffset(-1));
			var westArmchair = A2(
				armchair,
				A2(author$project$Grid$Vector$gridVector, -21, -10),
				author$project$Grid$RotationOffset$rotationOffset(2));
			var armchairsBoundary = A2(
				author$project$Grid$Boundary$setSouth,
				author$project$Grid$Boundary$north(tableBoundary),
				author$project$Grid$Boundary$aggregate(
					_List_fromArray(
						[eastArmchair.boundary, westArmchair.boundary])));
			var armchairsAccessLength = author$project$Grid$Boundary$north(armchairsBoundary) - author$project$Grid$Boundary$south(armchairsBoundary);
			var accessToArmchairsAndTable = F2(
				function (edgeDirection, pointsAndLengths) {
					return A2(
						elm$core$List$map,
						function (_n1) {
							var start = _n1.a;
							var length = _n1.b;
							return {edgeDirection: edgeDirection, exceptions: elm$core$Maybe$Nothing, length: length, locationLabel: 'to access the seats and table', spaceRequired: author$project$Architecture$Equipment$enoughToPassNextToLowFurniture, start: start};
						},
						pointsAndLengths);
				});
			return {
				availableRotations: author$project$Architecture$Equipment$allRotations,
				locationPreposition: 'in',
				name: 'lounge',
				rawEdgeAccessAlternatives: _List_fromArray(
					[
						A2(
						accessToArmchairsAndTable,
						author$project$Grid$Direction$NorthEastToSouth,
						_List_fromArray(
							[
								_Utils_Tuple2(
								A2(
									author$project$Grid$Point$gridPoint,
									author$project$Grid$Boundary$east(armchairsBoundary),
									author$project$Grid$Boundary$north(armchairsBoundary)),
								armchairsAccessLength),
								_Utils_Tuple2(
								A2(
									author$project$Grid$Point$gridPoint,
									author$project$Grid$Boundary$east(tableBoundary),
									author$project$Grid$Boundary$north(tableBoundary)),
								tableAccessLength)
							])),
						A2(
						accessToArmchairsAndTable,
						author$project$Grid$Direction$SouthWestToNorth,
						_List_fromArray(
							[
								_Utils_Tuple2(
								A2(
									author$project$Grid$Point$gridPoint,
									author$project$Grid$Boundary$west(armchairsBoundary),
									author$project$Grid$Boundary$south(armchairsBoundary)),
								armchairsAccessLength),
								_Utils_Tuple2(
								A2(
									author$project$Grid$Point$gridPoint,
									author$project$Grid$Boundary$west(tableBoundary),
									author$project$Grid$Boundary$north(tableBoundary) - tableAccessLength),
								tableAccessLength)
							])),
						A2(
						accessToArmchairsAndTable,
						author$project$Grid$Direction$NorthEastToSouth,
						_List_fromArray(
							[
								_Utils_Tuple2(
								A2(
									author$project$Grid$Point$gridPoint,
									author$project$Grid$Boundary$east(renderedSofa.boundary),
									author$project$Grid$Boundary$north(tableBoundary)),
								sofaAccessLength)
							])),
						A2(
						accessToArmchairsAndTable,
						author$project$Grid$Direction$SouthWestToNorth,
						_List_fromArray(
							[
								_Utils_Tuple2(
								A2(
									author$project$Grid$Point$gridPoint,
									author$project$Grid$Boundary$west(renderedSofa.boundary),
									author$project$Grid$Boundary$south(renderedSofa.boundary)),
								sofaAccessLength)
							]))
					]),
				rawFootprint: author$project$Grid$Footprint$footprint(
					_List_fromArray(
						[renderedSofa.boundary, armchairsBoundary, tableBoundary])),
				rawMarkup: _List_fromArray(
					[
						westArmchair.markup,
						eastArmchair.markup,
						renderedSofa.markup,
						A2(
						author$project$TypedSvg$rect,
						_List_fromArray(
							[
								author$project$TypedSvg$Attributes$InPx$width(exactTableLength),
								author$project$TypedSvg$Attributes$InPx$height(exactTableWidth),
								author$project$TypedSvg$Attributes$InPx$x(((-exactSofaLength) - exactTableLength) / 2),
								author$project$TypedSvg$Attributes$InPx$y(
								author$project$Grid$Units$toMillimeters(-17))
							]),
						_List_Nil)
					])
			};
		case 'LoungeWithTwoPerpendicularSofas':
			var toSitInSofa = 'to sit comfortably in the sofa';
			var toPassByTable = 'to pass by the table';
			var toPassBySofa = 'to pass by the sofa';
			var tableWidth = 8;
			var tableAccessLength = 9;
			var sofaWidth = 8;
			var sofaEdgeAccessLength = sofaWidth + (((author$project$Architecture$Equipment$enoughToPassNextToLowFurniture * 2) / 3) | 0);
			var sideSofaLength = 16;
			var roundedCornerBy = F2(
				function (radius, relativeTarget) {
					return A4(
						author$project$Svg$Path$arcBy,
						_Utils_Tuple2(radius, radius),
						0,
						_Utils_Tuple2(author$project$Svg$Path$smallestArc, author$project$Svg$Path$antiClockwise),
						relativeTarget);
				});
			var mainSofaLength = 22;
			var sideSofa = author$project$Architecture$Equipment$responsiveLoungeSeat(
				{
					depth: sofaWidth,
					rotation: elm$core$Maybe$Just(author$project$Grid$Rotation$QuarterTurnCounterclockwise),
					rotationOffset: elm$core$Maybe$Nothing,
					translation: A2(author$project$Grid$Vector$gridVector, -mainSofaLength, (-11) - sideSofaLength),
					width: sideSofaLength
				});
			var tableOffsetFromSofa = ((mainSofaLength - tableWidth) / 2) | 0;
			var mainSofa = author$project$Architecture$Equipment$responsiveLoungeSeat(
				{
					depth: sofaWidth,
					rotation: elm$core$Maybe$Nothing,
					rotationOffset: elm$core$Maybe$Nothing,
					translation: A2(author$project$Grid$Vector$gridVector, -mainSofaLength, -sofaWidth),
					width: mainSofaLength
				});
			var tableBoundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(
					author$project$Grid$Point$gridPoint,
					author$project$Grid$Boundary$east(sideSofa.boundary),
					(author$project$Grid$Boundary$south(mainSofa.boundary) - tableOffsetFromSofa) - tableWidth),
				A2(
					author$project$Grid$Point$gridPoint,
					(author$project$Grid$Boundary$east(sideSofa.boundary) + tableOffsetFromSofa) + tableWidth,
					author$project$Grid$Boundary$south(mainSofa.boundary)));
			var sofaAccessLength = author$project$Grid$Boundary$north(tableBoundary) - author$project$Grid$Boundary$south(mainSofa.boundary);
			var exactTableWidth = author$project$Grid$Units$toMillimeters(tableWidth);
			var exactTableOffsetFromSofa = author$project$Grid$Units$toMillimeters(tableOffsetFromSofa);
			var exactSofaLength = author$project$Grid$Units$toMillimeters(mainSofaLength);
			var enoughToStretchOutLegs = 5;
			var armchairsSpinOffset = 3;
			return {
				availableRotations: author$project$Architecture$Equipment$allRotations,
				locationPreposition: 'in',
				name: 'lounge',
				rawEdgeAccessAlternatives: _List_fromArray(
					[
						_List_fromArray(
						[
							{
							edgeDirection: author$project$Grid$Direction$SouthEastToWest,
							exceptions: elm$core$Maybe$Nothing,
							length: mainSofaLength,
							locationLabel: toSitInSofa,
							spaceRequired: enoughToStretchOutLegs,
							start: A2(
								author$project$Grid$Point$gridPoint,
								author$project$Grid$Boundary$east(mainSofa.boundary),
								author$project$Grid$Boundary$south(mainSofa.boundary))
						},
							{
							edgeDirection: author$project$Grid$Direction$SouthEastToWest,
							exceptions: elm$core$Maybe$Nothing,
							length: author$project$Architecture$Equipment$enoughToPassNextToLowFurniture,
							locationLabel: toPassByTable,
							spaceRequired: (((sideSofaLength - tableWidth) / 2) | 0) + 4,
							start: A2(
								author$project$Grid$Point$gridPoint,
								author$project$Grid$Boundary$east(sideSofa.boundary) + author$project$Architecture$Equipment$enoughToPassNextToLowFurniture,
								author$project$Grid$Boundary$south(tableBoundary))
						},
							{
							edgeDirection: author$project$Grid$Direction$SouthEastToWest,
							exceptions: elm$core$Maybe$Nothing,
							length: sofaEdgeAccessLength,
							locationLabel: toPassBySofa,
							spaceRequired: author$project$Architecture$Equipment$enoughToPassNextToLowFurniture,
							start: A2(
								author$project$Grid$Point$gridPoint,
								author$project$Grid$Boundary$west(sideSofa.boundary) + sofaEdgeAccessLength,
								author$project$Grid$Boundary$south(sideSofa.boundary))
						}
						]),
						_List_fromArray(
						[
							{
							edgeDirection: author$project$Grid$Direction$NorthEastToSouth,
							exceptions: elm$core$Maybe$Nothing,
							length: sideSofaLength,
							locationLabel: toSitInSofa,
							spaceRequired: enoughToStretchOutLegs,
							start: A2(
								author$project$Grid$Point$gridPoint,
								author$project$Grid$Boundary$east(sideSofa.boundary),
								author$project$Grid$Boundary$north(sideSofa.boundary))
						},
							{
							edgeDirection: author$project$Grid$Direction$NorthEastToSouth,
							exceptions: elm$core$Maybe$Nothing,
							length: author$project$Architecture$Equipment$enoughToPassNextToLowFurniture,
							locationLabel: toPassByTable,
							spaceRequired: (((mainSofaLength - tableWidth) / 2) | 0) + 4,
							start: A2(
								author$project$Grid$Point$gridPoint,
								author$project$Grid$Boundary$east(tableBoundary),
								author$project$Grid$Boundary$north(tableBoundary))
						},
							{
							edgeDirection: author$project$Grid$Direction$NorthEastToSouth,
							exceptions: elm$core$Maybe$Nothing,
							length: sofaEdgeAccessLength,
							locationLabel: toPassBySofa,
							spaceRequired: author$project$Architecture$Equipment$enoughToPassNextToLowFurniture,
							start: A2(
								author$project$Grid$Point$gridPoint,
								author$project$Grid$Boundary$east(mainSofa.boundary),
								author$project$Grid$Boundary$north(mainSofa.boundary))
						}
						])
					]),
				rawFootprint: author$project$Grid$Footprint$footprint(
					_List_fromArray(
						[mainSofa.boundary, sideSofa.boundary, tableBoundary])),
				rawMarkup: _List_fromArray(
					[
						mainSofa.markup,
						sideSofa.markup,
						A2(
						author$project$TypedSvg$rect,
						_List_fromArray(
							[
								author$project$TypedSvg$Attributes$InPx$width(exactTableWidth),
								author$project$TypedSvg$Attributes$InPx$height(exactTableWidth),
								author$project$TypedSvg$Attributes$InPx$x((-exactSofaLength) + exactTableOffsetFromSofa),
								author$project$TypedSvg$Attributes$InPx$y(
								((-author$project$Grid$Units$toMillimeters(sofaWidth)) - exactTableWidth) - exactTableOffsetFromSofa)
							]),
						_List_Nil)
					])
			};
		case 'FreestandingBathtub':
			var faucetOffset = 1;
			var exactFaucetOffset = author$project$Grid$Units$toMillimeters(faucetOffset);
			var bathtubWidth = 8;
			var exactBathtubWidth = author$project$Grid$Units$toMillimeters(bathtubWidth);
			var bathtubLength = 16;
			var boundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(author$project$Grid$Point$gridPoint, 0, 0),
				A2(author$project$Grid$Point$gridPoint, bathtubLength, bathtubWidth + faucetOffset));
			var exactBathtubLength = author$project$Grid$Units$toMillimeters(bathtubLength);
			return {
				availableRotations: author$project$Architecture$Equipment$allRotations,
				locationPreposition: 'around',
				name: 'bathtub',
				rawEdgeAccessAlternatives: _List_fromArray(
					[
						_List_fromArray(
						[
							{
							edgeDirection: author$project$Grid$Direction$NorthEastToSouth,
							exceptions: elm$core$Maybe$Nothing,
							length: bathtubWidth,
							locationLabel: 'for convenient cleaning',
							spaceRequired: 3,
							start: A2(
								author$project$Grid$Point$gridPoint,
								author$project$Grid$Boundary$east(boundary),
								bathtubWidth)
						},
							{
							edgeDirection: author$project$Grid$Direction$SouthWestToNorth,
							exceptions: elm$core$Maybe$Nothing,
							length: bathtubWidth,
							locationLabel: 'for convenient cleaning',
							spaceRequired: 3,
							start: A2(
								author$project$Grid$Point$gridPoint,
								author$project$Grid$Boundary$west(boundary),
								author$project$Grid$Boundary$south(boundary))
						},
							{
							edgeDirection: author$project$Grid$Direction$SouthEastToWest,
							exceptions: elm$core$Maybe$Nothing,
							length: author$project$Grid$Boundary$east(boundary) - author$project$Grid$Boundary$west(boundary),
							locationLabel: 'to get into the bathtub',
							spaceRequired: 7,
							start: A2(
								author$project$Grid$Point$gridPoint,
								author$project$Grid$Boundary$east(boundary),
								author$project$Grid$Boundary$south(boundary))
						}
						])
					]),
				rawFootprint: author$project$Grid$Footprint$footprint(
					_List_fromArray(
						[boundary])),
				rawMarkup: _List_fromArray(
					[
						A2(
						author$project$TypedSvg$rect,
						_List_fromArray(
							[
								author$project$TypedSvg$Attributes$InPx$height(exactBathtubWidth),
								author$project$TypedSvg$Attributes$InPx$width(exactBathtubLength),
								author$project$TypedSvg$Attributes$InPx$rx(exactBathtubWidth / 2)
							]),
						_List_Nil),
						A2(
						author$project$TypedSvg$circle,
						_List_fromArray(
							[
								author$project$TypedSvg$Attributes$InPx$r(40),
								author$project$TypedSvg$Attributes$InPx$cx(exactBathtubLength / 2),
								author$project$TypedSvg$Attributes$InPx$cy(exactBathtubWidth / 2)
							]),
						_List_Nil),
						A2(
						author$project$TypedSvg$line,
						_List_fromArray(
							[
								author$project$TypedSvg$Attributes$InPx$x1((exactBathtubLength / 2) - 100),
								author$project$TypedSvg$Attributes$InPx$y1(exactBathtubWidth + exactFaucetOffset),
								author$project$TypedSvg$Attributes$InPx$x2((exactBathtubLength / 2) + 100),
								author$project$TypedSvg$Attributes$InPx$y2(exactBathtubWidth + exactFaucetOffset)
							]),
						_List_Nil)
					])
			};
		case 'BuiltInBathtub':
			var tubFrameToBasin = 60;
			var tubFaucetShelfWidth = 160;
			var faucetLineLength = 200;
			var bathtubWidth = 7;
			var exactBathtubWidth = author$project$Grid$Units$toMillimeters(bathtubWidth);
			var bathtubLength = 16;
			var boundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(author$project$Grid$Point$gridPoint, 0, 0),
				A2(author$project$Grid$Point$gridPoint, bathtubLength, bathtubWidth));
			var exactBathtubLength = author$project$Grid$Units$toMillimeters(bathtubLength);
			return {
				availableRotations: author$project$Architecture$Equipment$allRotations,
				locationPreposition: 'in front of',
				name: 'bathtub',
				rawEdgeAccessAlternatives: _List_fromArray(
					[
						_List_fromArray(
						[
							{
							edgeDirection: author$project$Grid$Direction$SouthEastToWest,
							exceptions: elm$core$Maybe$Nothing,
							length: bathtubLength,
							locationLabel: 'to get in',
							spaceRequired: 6,
							start: A2(
								author$project$Grid$Point$gridPoint,
								author$project$Grid$Boundary$east(boundary),
								author$project$Grid$Boundary$south(boundary))
						}
						])
					]),
				rawFootprint: author$project$Grid$Footprint$footprint(
					_List_fromArray(
						[boundary])),
				rawMarkup: _List_fromArray(
					[
						A2(
						author$project$TypedSvg$rect,
						_List_fromArray(
							[
								author$project$TypedSvg$Attributes$InPx$height(exactBathtubWidth),
								author$project$TypedSvg$Attributes$InPx$width(exactBathtubLength)
							]),
						_List_Nil),
						A2(
						author$project$TypedSvg$rect,
						_List_fromArray(
							[
								author$project$TypedSvg$Attributes$InPx$height(exactBathtubWidth - (2 * tubFrameToBasin)),
								author$project$TypedSvg$Attributes$InPx$width((exactBathtubLength - tubFrameToBasin) - tubFaucetShelfWidth),
								author$project$TypedSvg$Attributes$InPx$rx(100),
								author$project$TypedSvg$Attributes$InPx$x(tubFaucetShelfWidth),
								author$project$TypedSvg$Attributes$InPx$y(tubFrameToBasin)
							]),
						_List_Nil),
						A2(
						author$project$TypedSvg$circle,
						_List_fromArray(
							[
								author$project$TypedSvg$Attributes$InPx$r(40),
								author$project$TypedSvg$Attributes$InPx$cx((tubFaucetShelfWidth + (exactBathtubWidth / 2)) - tubFrameToBasin),
								author$project$TypedSvg$Attributes$InPx$cy(exactBathtubWidth / 2)
							]),
						_List_Nil),
						A2(
						author$project$TypedSvg$line,
						_List_fromArray(
							[
								author$project$TypedSvg$Attributes$InPx$x1(tubFaucetShelfWidth / 2),
								author$project$TypedSvg$Attributes$InPx$y1((exactBathtubWidth / 2) - (faucetLineLength / 2)),
								author$project$TypedSvg$Attributes$InPx$x2(tubFaucetShelfWidth / 2),
								author$project$TypedSvg$Attributes$InPx$y2((exactBathtubWidth / 2) + (faucetLineLength / 2))
							]),
						_List_Nil)
					])
			};
		case 'DoubleBed':
			var leftTableWidth = equipmentTypeValue.a.leftTableWidth;
			var rightTableWidth = equipmentTypeValue.a.rightTableWidth;
			var toMakeBed = 'to make the bed easily';
			var tableDepth = 4;
			var spaceAroundBed = 6;
			var bedWidth = 18;
			var exactBedWidth = author$project$Grid$Units$toMillimeters(bedWidth);
			var bedLength = 20;
			var bedsideTable = F2(
				function (tableLength, tableOffset) {
					return A2(
						author$project$TypedSvg$rect,
						_List_fromArray(
							[
								author$project$TypedSvg$Attributes$InPx$height(
								author$project$Grid$Units$toMillimeters(tableDepth)),
								author$project$TypedSvg$Attributes$InPx$width(
								author$project$Grid$Units$toMillimeters(tableLength)),
								author$project$TypedSvg$Attributes$InPx$x(
								author$project$Grid$Units$toMillimeters(tableOffset)),
								author$project$TypedSvg$Attributes$InPx$y(
								author$project$Grid$Units$toMillimeters(bedLength - tableDepth))
							]),
						_List_Nil);
				});
			var pillow = function (xValue) {
				return A2(
					author$project$TypedSvg$rect,
					_List_fromArray(
						[
							author$project$TypedSvg$Attributes$InPx$height(670),
							author$project$TypedSvg$Attributes$InPx$ry(50),
							author$project$TypedSvg$Attributes$InPx$width(750),
							author$project$TypedSvg$Attributes$InPx$x(xValue),
							author$project$TypedSvg$Attributes$InPx$y(
							author$project$Grid$Units$toMillimeters(bedLength) - 770)
						]),
					_List_Nil);
			};
			var bedBoundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(author$project$Grid$Point$gridPoint, 0, 0),
				A2(author$project$Grid$Point$gridPoint, bedWidth, bedLength));
			var tablesBoundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(
					author$project$Grid$Point$gridPoint,
					author$project$Grid$Boundary$west(bedBoundary) - leftTableWidth,
					author$project$Grid$Boundary$north(bedBoundary) - tableDepth),
				A2(
					author$project$Grid$Point$gridPoint,
					author$project$Grid$Boundary$east(bedBoundary) + rightTableWidth,
					author$project$Grid$Boundary$north(bedBoundary)));
			return {
				availableRotations: author$project$Architecture$Equipment$allRotations,
				locationPreposition: 'by',
				name: 'double bed',
				rawEdgeAccessAlternatives: _List_fromArray(
					[
						_List_fromArray(
						[
							{
							edgeDirection: author$project$Grid$Direction$NorthEastToSouth,
							exceptions: elm$core$Maybe$Nothing,
							length: bedLength - tableDepth,
							locationLabel: toMakeBed,
							spaceRequired: spaceAroundBed,
							start: A2(
								author$project$Grid$Point$gridPoint,
								author$project$Grid$Boundary$east(bedBoundary),
								author$project$Grid$Boundary$south(tablesBoundary))
						},
							{
							edgeDirection: author$project$Grid$Direction$SouthWestToNorth,
							exceptions: elm$core$Maybe$Nothing,
							length: bedLength - tableDepth,
							locationLabel: toMakeBed,
							spaceRequired: spaceAroundBed,
							start: A2(
								author$project$Grid$Point$gridPoint,
								author$project$Grid$Boundary$west(bedBoundary),
								author$project$Grid$Boundary$south(bedBoundary))
						},
							{
							edgeDirection: author$project$Grid$Direction$SouthEastToWest,
							exceptions: elm$core$Maybe$Nothing,
							length: bedWidth + (2 * spaceAroundBed),
							locationLabel: toMakeBed,
							spaceRequired: 7,
							start: A2(
								author$project$Grid$Point$gridPoint,
								author$project$Grid$Boundary$east(bedBoundary) + spaceAroundBed,
								author$project$Grid$Boundary$south(bedBoundary))
						}
						])
					]),
				rawFootprint: author$project$Grid$Footprint$footprint(
					_List_fromArray(
						[tablesBoundary, bedBoundary])),
				rawMarkup: _List_fromArray(
					[
						A2(
						author$project$TypedSvg$rect,
						_List_fromArray(
							[
								author$project$TypedSvg$Attributes$InPx$height(
								author$project$Grid$Units$toMillimeters(bedLength)),
								author$project$TypedSvg$Attributes$InPx$width(exactBedWidth)
							]),
						_List_Nil),
						pillow(100),
						pillow(950),
						A2(bedsideTable, leftTableWidth, -leftTableWidth),
						A2(bedsideTable, rightTableWidth, bedWidth),
						A3(
						author$project$Architecture$Equipment$singlePath,
						author$project$Svg$Path$startAt(
							_Utils_Tuple2(0, 1550)),
						author$project$Svg$Path$closed,
						_List_fromArray(
							[
								author$project$Svg$Path$lineBy(
								_Utils_Tuple2(exactBedWidth, 200)),
								author$project$Svg$Path$lineBy(
								_Utils_Tuple2(0, -(1550 + 200))),
								author$project$Svg$Path$lineBy(
								_Utils_Tuple2(-exactBedWidth, 0))
							])),
						A3(
						author$project$Architecture$Equipment$singlePath,
						author$project$Svg$Path$startAt(
							_Utils_Tuple2(0, 1250)),
						author$project$Svg$Path$open,
						_List_fromArray(
							[
								author$project$Svg$Path$lineBy(
								_Utils_Tuple2(exactBedWidth, 2 * 200))
							]))
					])
			};
		case 'SingleBed':
			var toMakeBed = 'to make the bed easily';
			var spaceBesideBed = 7;
			var maxWidthOfBedsideTable = 8;
			var bedWidth = 9;
			var exactBedWidth = author$project$Grid$Units$toMillimeters(bedWidth);
			var bedLength = 20;
			var exactBedLength = author$project$Grid$Units$toMillimeters(bedLength);
			var pillow = A2(
				author$project$TypedSvg$rect,
				_List_fromArray(
					[
						author$project$TypedSvg$Attributes$InPx$height(670),
						author$project$TypedSvg$Attributes$InPx$ry(50),
						author$project$TypedSvg$Attributes$InPx$width(exactBedWidth - (2 * 100)),
						author$project$TypedSvg$Attributes$InPx$x(100),
						author$project$TypedSvg$Attributes$InPx$y((exactBedLength - 670) - 100)
					]),
				_List_Nil);
			var bedBoundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(author$project$Grid$Point$gridPoint, 0, 0),
				A2(author$project$Grid$Point$gridPoint, bedWidth, bedLength));
			var accessToMakeBed = F2(
				function (edgeDirection, start) {
					return _List_fromArray(
						[
							{edgeDirection: edgeDirection, exceptions: elm$core$Maybe$Nothing, length: bedLength - maxWidthOfBedsideTable, locationLabel: toMakeBed, spaceRequired: spaceBesideBed, start: start}
						]);
				});
			return {
				availableRotations: author$project$Architecture$Equipment$allRotations,
				locationPreposition: 'by',
				name: 'bed',
				rawEdgeAccessAlternatives: _List_fromArray(
					[
						A2(
						accessToMakeBed,
						author$project$Grid$Direction$NorthEastToSouth,
						A2(
							author$project$Grid$Point$gridPoint,
							author$project$Grid$Boundary$east(bedBoundary),
							author$project$Grid$Boundary$north(bedBoundary) - maxWidthOfBedsideTable)),
						A2(
						accessToMakeBed,
						author$project$Grid$Direction$NorthEastToSouth,
						A2(
							author$project$Grid$Point$gridPoint,
							author$project$Grid$Boundary$east(bedBoundary),
							author$project$Grid$Boundary$north(bedBoundary))),
						A2(
						accessToMakeBed,
						author$project$Grid$Direction$SouthWestToNorth,
						A2(
							author$project$Grid$Point$gridPoint,
							author$project$Grid$Boundary$west(bedBoundary),
							author$project$Grid$Boundary$south(bedBoundary) + maxWidthOfBedsideTable)),
						A2(
						accessToMakeBed,
						author$project$Grid$Direction$SouthWestToNorth,
						A2(
							author$project$Grid$Point$gridPoint,
							author$project$Grid$Boundary$west(bedBoundary),
							author$project$Grid$Boundary$south(bedBoundary)))
					]),
				rawFootprint: author$project$Grid$Footprint$footprint(
					_List_fromArray(
						[bedBoundary])),
				rawMarkup: _List_fromArray(
					[
						A2(
						author$project$TypedSvg$rect,
						_List_fromArray(
							[
								author$project$TypedSvg$Attributes$InPx$height(exactBedLength),
								author$project$TypedSvg$Attributes$InPx$width(exactBedWidth)
							]),
						_List_Nil),
						pillow,
						A3(
						author$project$Architecture$Equipment$singlePath,
						author$project$Svg$Path$startAt(
							_Utils_Tuple2(0, 1600)),
						author$project$Svg$Path$closed,
						_List_fromArray(
							[
								author$project$Svg$Path$lineBy(
								_Utils_Tuple2(exactBedWidth, 150)),
								author$project$Svg$Path$lineBy(
								_Utils_Tuple2(0, -(1600 + 150))),
								author$project$Svg$Path$lineBy(
								_Utils_Tuple2(-exactBedWidth, 0))
							])),
						A3(
						author$project$Architecture$Equipment$singlePath,
						author$project$Svg$Path$startAt(
							_Utils_Tuple2(0, 1300)),
						author$project$Svg$Path$open,
						_List_fromArray(
							[
								author$project$Svg$Path$lineBy(
								_Utils_Tuple2(exactBedWidth, 2 * 150))
							]))
					])
			};
		case 'CoffeeTable':
			var tableDiameter = 9;
			var tableBoundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(author$project$Grid$Point$gridPoint, 0, 0),
				A2(author$project$Grid$Point$gridPoint, 9, 9));
			var tableBoundarySide = author$project$Grid$Boundary$north(tableBoundary) - author$project$Grid$Boundary$south(tableBoundary);
			var onTheWest = _Utils_Tuple2(
				author$project$Grid$Direction$SouthWestToNorth,
				A2(
					author$project$Grid$Point$gridPoint,
					author$project$Grid$Boundary$west(tableBoundary),
					author$project$Grid$Boundary$south(tableBoundary) - author$project$Architecture$Equipment$enoughForChairAtDiningTable));
			var onTheSouth = _Utils_Tuple2(
				author$project$Grid$Direction$SouthEastToWest,
				A2(
					author$project$Grid$Point$gridPoint,
					author$project$Grid$Boundary$east(tableBoundary) + author$project$Architecture$Equipment$enoughForChairAtDiningTable,
					author$project$Grid$Boundary$south(tableBoundary)));
			var onTheNorth = _Utils_Tuple2(
				author$project$Grid$Direction$NorthWestToEast,
				A2(
					author$project$Grid$Point$gridPoint,
					author$project$Grid$Boundary$west(tableBoundary) - author$project$Architecture$Equipment$enoughForChairAtDiningTable,
					author$project$Grid$Boundary$north(tableBoundary)));
			var onTheEast = _Utils_Tuple2(
				author$project$Grid$Direction$NorthEastToSouth,
				A2(
					author$project$Grid$Point$gridPoint,
					author$project$Grid$Boundary$east(tableBoundary),
					author$project$Grid$Boundary$north(tableBoundary) + author$project$Architecture$Equipment$enoughForChairAtDiningTable));
			var boundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(
					author$project$Grid$Point$gridPoint,
					author$project$Grid$Boundary$west(tableBoundary) - 4,
					author$project$Grid$Boundary$south(tableBoundary) - 4),
				A2(
					author$project$Grid$Point$gridPoint,
					author$project$Grid$Boundary$east(tableBoundary) + 4,
					author$project$Grid$Boundary$north(tableBoundary) + 4));
			var accessToSit = function (_n3) {
				var edgeDirection = _n3.a;
				var start = _n3.b;
				return {edgeDirection: edgeDirection, exceptions: elm$core$Maybe$Nothing, length: tableBoundarySide + (2 * author$project$Architecture$Equipment$enoughForChairAtDiningTable), locationLabel: author$project$Architecture$Equipment$toSit, spaceRequired: author$project$Architecture$Equipment$enoughForChairAtDiningTable, start: start};
			};
			var accessToServe = function (_n2) {
				var edgeDirection = _n2.a;
				var start = _n2.b;
				return {edgeDirection: edgeDirection, exceptions: elm$core$Maybe$Nothing, length: tableBoundarySide + (2 * author$project$Architecture$Equipment$enoughForChairAtDiningTable), locationLabel: author$project$Architecture$Equipment$toPassBehindSittingPeople, spaceRequired: author$project$Architecture$Equipment$enoughToPassBehindChairAtTable, start: start};
			};
			return {
				availableRotations: turboMaCk$any_set$Set$Any$empty(author$project$Grid$Rotation$rotationKey),
				locationPreposition: 'at',
				name: 'coffee table',
				rawEdgeAccessAlternatives: _List_fromArray(
					[
						_List_fromArray(
						[
							accessToSit(onTheEast),
							accessToServe(onTheSouth),
							accessToServe(onTheWest),
							accessToSit(onTheNorth)
						]),
						_List_fromArray(
						[
							accessToSit(onTheEast),
							accessToSit(onTheSouth),
							accessToServe(onTheWest),
							accessToServe(onTheNorth)
						]),
						_List_fromArray(
						[
							accessToServe(onTheEast),
							accessToSit(onTheSouth),
							accessToSit(onTheWest),
							accessToServe(onTheNorth)
						]),
						_List_fromArray(
						[
							accessToServe(onTheEast),
							accessToServe(onTheSouth),
							accessToSit(onTheWest),
							accessToSit(onTheNorth)
						])
					]),
				rawFootprint: author$project$Grid$Footprint$footprint(
					_List_fromArray(
						[
							A2(
							author$project$Grid$Boundary$gridBoundary,
							A2(
								author$project$Grid$Point$gridPoint,
								author$project$Grid$Boundary$west(boundary) + 6,
								author$project$Grid$Boundary$south(boundary)),
							A2(
								author$project$Grid$Point$gridPoint,
								author$project$Grid$Boundary$east(boundary) - 6,
								author$project$Grid$Boundary$north(boundary))),
							A2(
							author$project$Grid$Boundary$gridBoundary,
							A2(
								author$project$Grid$Point$gridPoint,
								author$project$Grid$Boundary$west(boundary),
								author$project$Grid$Boundary$south(boundary) + 6),
							A2(
								author$project$Grid$Point$gridPoint,
								author$project$Grid$Boundary$east(boundary),
								author$project$Grid$Boundary$north(boundary) - 6)),
							tableBoundary
						])),
				rawMarkup: _List_fromArray(
					[
						author$project$Architecture$Equipment$chair(
						_List_fromArray(
							[
								A2(author$project$TypedSvg$Types$Translate, 450, -350)
							])),
						author$project$Architecture$Equipment$chair(
						_List_fromArray(
							[
								A2(author$project$TypedSvg$Types$Translate, 1250, 450),
								A3(author$project$TypedSvg$Types$Rotate, 90, 0, 0)
							])),
						author$project$Architecture$Equipment$chair(
						_List_fromArray(
							[
								A2(author$project$TypedSvg$Types$Translate, 450, 1250),
								A3(author$project$TypedSvg$Types$Rotate, 180, 0, 0)
							])),
						author$project$Architecture$Equipment$chair(
						_List_fromArray(
							[
								A2(author$project$TypedSvg$Types$Translate, -350, 450),
								A3(author$project$TypedSvg$Types$Rotate, 270, 0, 0)
							])),
						A2(
						author$project$TypedSvg$circle,
						_List_fromArray(
							[
								author$project$TypedSvg$Attributes$InPx$cx(450),
								author$project$TypedSvg$Attributes$InPx$cy(450),
								author$project$TypedSvg$Attributes$InPx$r(450)
							]),
						_List_Nil)
					])
			};
		case 'Shelving':
			var width = equipmentTypeValue.a;
			return author$project$Architecture$Equipment$pidgeonHoleLikeCasework(
				{depth: 4, width: width});
		case 'Pegwall':
			var width = equipmentTypeValue.a;
			return author$project$Architecture$Equipment$pidgeonHoleLikeCasework(
				{depth: 2, width: width});
		case 'GenericStorage':
			var data = equipmentTypeValue.a;
			return author$project$Architecture$Equipment$pidgeonHoleLikeCasework(data);
		case 'Curtain':
			var lengthAcrossRoom = equipmentTypeValue.a.lengthAcrossRoom;
			var lengthOverWindow = equipmentTypeValue.a.lengthOverWindow;
			var curtainStatus = equipmentTypeValue.b;
			var toPullCurtainAway = 'to pull the curtain away';
			var toDrawCurtain = 'to draw the curtain across the room';
			var pulledAwayLength = (lengthOverWindow / 7) | 0;
			var numberOfFolds = (lengthAcrossRoom / 4) | 0;
			var foldIndices = A2(elm$core$List$range, 0, numberOfFolds - 1);
			var exactPulledAwayLength = author$project$Grid$Units$toMillimeters(pulledAwayLength);
			var exactPulledAwayFoldLength = exactPulledAwayLength / numberOfFolds;
			var exactLengthOverWindow = author$project$Grid$Units$toMillimeters(lengthOverWindow);
			var exactLengthAcrossRoom = author$project$Grid$Units$toMillimeters(lengthAcrossRoom);
			var exactFoldLengthOverWindow = exactLengthOverWindow / numberOfFolds;
			var exactFoldLengthAcrossRoom = exactLengthAcrossRoom / numberOfFolds;
			var enoughToDrawCurtain = 4;
			var windowAccessBoundary = lengthAcrossRoom - enoughToDrawCurtain;
			var curtainThickness = 1;
			var edgeLengthOverWindow = lengthOverWindow - curtainThickness;
			var exactCurtainThickness = author$project$Grid$Units$toMillimeters(curtainThickness);
			var renderFoldAcrossRoom = function (index) {
				return A2(
					author$project$TypedSvg$path,
					_List_fromArray(
						[
							author$project$Svg$Path$pathToAttribute(
							elm$core$List$singleton(
								A3(
									author$project$Svg$Path$subpath,
									author$project$Svg$Path$startAt(
										_Utils_Tuple2(index * exactFoldLengthAcrossRoom, exactCurtainThickness / 2)),
									author$project$Svg$Path$open,
									_List_fromArray(
										[
											A3(
											author$project$Svg$Path$cubicBy,
											_Utils_Tuple2(exactFoldLengthAcrossRoom / 2, -100),
											_Utils_Tuple2(exactFoldLengthAcrossRoom / 2, 100),
											_Utils_Tuple2(exactFoldLengthAcrossRoom, 0))
										])))),
							author$project$TypedSvg$Attributes$fill(author$project$TypedSvg$Types$FillNone)
						]),
					_List_Nil);
			};
			var renderFoldOverWindow = function (index) {
				return A2(
					author$project$TypedSvg$path,
					_List_fromArray(
						[
							author$project$Svg$Path$pathToAttribute(
							elm$core$List$singleton(
								A3(
									author$project$Svg$Path$subpath,
									author$project$Svg$Path$startAt(
										_Utils_Tuple2(exactLengthAcrossRoom - (exactCurtainThickness / 2), index * exactFoldLengthOverWindow)),
									author$project$Svg$Path$open,
									_List_fromArray(
										[
											A3(
											author$project$Svg$Path$cubicBy,
											_Utils_Tuple2(-150, exactFoldLengthOverWindow / 2),
											_Utils_Tuple2(150, exactFoldLengthOverWindow / 2),
											_Utils_Tuple2(0, exactFoldLengthOverWindow))
										])))),
							author$project$TypedSvg$Attributes$fill(author$project$TypedSvg$Types$FillNone)
						]),
					_List_Nil);
			};
			var renderPulledAwayFold = function (index) {
				return A2(
					author$project$TypedSvg$path,
					_List_fromArray(
						[
							author$project$Svg$Path$pathToAttribute(
							elm$core$List$singleton(
								A3(
									author$project$Svg$Path$subpath,
									author$project$Svg$Path$startAt(
										_Utils_Tuple2(exactLengthAcrossRoom - (exactCurtainThickness / 2), index * exactPulledAwayFoldLength)),
									author$project$Svg$Path$open,
									_List_fromArray(
										[
											A3(
											author$project$Svg$Path$cubicBy,
											_Utils_Tuple2(-400, exactPulledAwayFoldLength / 2),
											_Utils_Tuple2(400, exactPulledAwayFoldLength / 2),
											_Utils_Tuple2(0, exactPulledAwayFoldLength))
										])))),
							author$project$TypedSvg$Attributes$fill(author$project$TypedSvg$Types$FillNone)
						]),
					_List_Nil);
			};
			var baseBoundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(author$project$Grid$Point$gridPoint, 0, curtainThickness - lengthOverWindow),
				A2(author$project$Grid$Point$gridPoint, lengthAcrossRoom, curtainThickness));
			var boundaryWhenDrawnAcrossRoom = A2(author$project$Grid$Boundary$setSouth, -curtainThickness, baseBoundary);
			var boundaryWhenDrawnOverWindow = A2(author$project$Grid$Boundary$setWest, lengthAcrossRoom - curtainThickness, baseBoundary);
			var boundaryWhenPulledAway = A2(author$project$Grid$Boundary$setSouth, -pulledAwayLength, boundaryWhenDrawnOverWindow);
			var accessToPullCurtainAway = _List_fromArray(
				[
					{
					edgeDirection: author$project$Grid$Direction$SouthWestToNorth,
					exceptions: elm$core$Maybe$Nothing,
					length: edgeLengthOverWindow,
					locationLabel: toPullCurtainAway,
					spaceRequired: enoughToDrawCurtain,
					start: A2(author$project$Grid$Point$gridPoint, lengthAcrossRoom, -edgeLengthOverWindow)
				}
				]);
			return {
				availableRotations: turboMaCk$any_set$Set$Any$empty(author$project$Grid$Rotation$rotationKey),
				locationPreposition: 'beside',
				name: 'curtain',
				rawEdgeAccessAlternatives: _List_Nil,
				rawFootprint: author$project$Grid$Footprint$footprint(
					_List_fromArray(
						[
							function () {
							switch (curtainStatus.$) {
								case 'DrawnAcrossRoom':
									return boundaryWhenDrawnAcrossRoom;
								case 'DrawnOverWindow':
									return boundaryWhenDrawnOverWindow;
								default:
									return boundaryWhenPulledAway;
							}
						}()
						])),
				rawMarkup: function () {
					switch (curtainStatus.$) {
						case 'DrawnAcrossRoom':
							return _Utils_ap(
								_List_fromArray(
									[
										A2(
										author$project$TypedSvg$rect,
										_List_fromArray(
											[
												author$project$TypedSvg$Attributes$InPx$width(exactLengthAcrossRoom),
												author$project$TypedSvg$Attributes$InPx$height(exactCurtainThickness),
												author$project$TypedSvg$Attributes$opacity(
												author$project$TypedSvg$Types$Opacity(0))
											]),
										_List_Nil)
									]),
								A2(elm$core$List$map, renderFoldAcrossRoom, foldIndices));
						case 'DrawnOverWindow':
							return _Utils_ap(
								_List_fromArray(
									[
										A2(
										author$project$TypedSvg$rect,
										_List_fromArray(
											[
												author$project$TypedSvg$Attributes$InPx$width(exactCurtainThickness),
												author$project$TypedSvg$Attributes$InPx$height(exactLengthOverWindow),
												author$project$TypedSvg$Attributes$InPx$x(exactLengthAcrossRoom - exactCurtainThickness),
												author$project$TypedSvg$Attributes$opacity(
												author$project$TypedSvg$Types$Opacity(0))
											]),
										_List_Nil)
									]),
								A2(elm$core$List$map, renderFoldOverWindow, foldIndices));
						default:
							return _Utils_ap(
								_List_fromArray(
									[
										A2(
										author$project$TypedSvg$rect,
										_List_fromArray(
											[
												author$project$TypedSvg$Attributes$InPx$width(3 * exactCurtainThickness),
												author$project$TypedSvg$Attributes$InPx$height(exactPulledAwayLength),
												author$project$TypedSvg$Attributes$InPx$x(exactLengthAcrossRoom - (2 * exactCurtainThickness)),
												author$project$TypedSvg$Attributes$opacity(
												author$project$TypedSvg$Types$Opacity(0))
											]),
										_List_Nil)
									]),
								A2(elm$core$List$map, renderPulledAwayFold, foldIndices));
					}
				}()
			};
		case 'Desk':
			var deskPanelType = equipmentTypeValue.a;
			var length = equipmentTypeValue.b.length;
			var width = equipmentTypeValue.b.width;
			var chairOffsets = equipmentTypeValue.b.chairOffsets;
			var halfChairMarkup = _List_fromArray(
				[
					A2(
					author$project$TypedSvg$path,
					_List_fromArray(
						[
							author$project$TypedSvg$Attributes$d('m 375.44794,-514.83927 c 154.39977,0 197.77694,-11.88001 226.7132,-71.12157 4.69627,-9.61459 47.5505,-159.01642 47.5505,-159.01642 l 4.18076,-170.37859 -77.9022,-76.53562 -200.54102,0'),
							author$project$TypedSvg$Attributes$InPx$strokeWidth(0)
						]),
					_List_Nil),
					A2(
					author$project$TypedSvg$path,
					_List_fromArray(
						[
							author$project$TypedSvg$Attributes$d('m 375.44794,-514.83927 c 154.39977,0 197.77694,-11.88001 226.7132,-71.12157 4.69627,-9.61459 6.5493,-29.17932 6.5493,-29.17932')
						]),
					_List_Nil),
					A2(
					author$project$TypedSvg$path,
					_List_fromArray(
						[
							author$project$TypedSvg$Attributes$d('m 375.44933,-1091.5781 c 93.83432,0 242.61039,25.8007 268.92929,63.3429 17.6062,25.1141 -85.94688,90.12424 -85.94688,90.12424 l -182.98256,0')
						]),
					_List_Nil),
					A2(
					author$project$TypedSvg$path,
					_List_fromArray(
						[
							author$project$TypedSvg$Attributes$d('m 654.38008,-942.66669 c 72.31458,2.82684 55.92911,226.11595 55.56395,245.03681 -0.4391,22.75237 -12.90738,37.10148 -29.82932,37.95726 -11.46515,0.57983 -40.51052,-0.12676 -50.15628,-0.58634 -13.45888,-0.64119 -22.6601,-12.20784 -22.86239,-25.80054 -0.30535,-20.51759 13.93149,-145.73089 14.52351,-219.69935 0.21832,-27.27776 14.56474,-37.61918 32.76053,-36.90784 z')
						]),
					_List_Nil),
					A2(
					author$project$TypedSvg$path,
					_List_fromArray(
						[
							author$project$TypedSvg$Attributes$d('m 375.44924,-1054.1954 c 161.31983,0 214.65251,39.5541 214.65251,39.5541')
						]),
					_List_Nil)
				]);
			var deskToChairBack = 6;
			var deskBoundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(author$project$Grid$Point$gridPoint, 0, 0),
				A2(author$project$Grid$Point$gridPoint, length, width));
			return {
				availableRotations: author$project$Architecture$Equipment$allRotations,
				locationPreposition: 'at',
				name: 'desk',
				rawEdgeAccessAlternatives: elm$core$List$isEmpty(chairOffsets) ? _List_Nil : _List_fromArray(
					[
						_List_fromArray(
						[
							{
							edgeDirection: author$project$Grid$Direction$SouthEastToWest,
							exceptions: elm$core$Maybe$Just(
								function (otherEquipmentType) {
									if (otherEquipmentType.$ === 'Desk') {
										var deskProperties = otherEquipmentType.b;
										return elm$core$List$isEmpty(deskProperties.chairOffsets) ? (-3) : 0;
									} else {
										return 0;
									}
								}),
							length: length,
							locationLabel: 'to pass behind the chair',
							spaceRequired: 10,
							start: A2(author$project$Grid$Point$gridPoint, length, 0)
						}
						])
					]),
				rawFootprint: author$project$Grid$Footprint$footprint(
					A2(
						elm$core$List$cons,
						deskBoundary,
						A2(
							elm$core$List$map,
							function (chairOffset) {
								return A2(
									author$project$Grid$Boundary$gridBoundary,
									A2(author$project$Grid$Point$gridPoint, chairOffset - 4, -deskToChairBack),
									A2(author$project$Grid$Point$gridPoint, chairOffset + 4, 0));
							},
							chairOffsets))),
				rawMarkup: _Utils_ap(
					A2(
						elm$core$List$map,
						function (chairOffset) {
							return A2(
								author$project$TypedSvg$g,
								_List_fromArray(
									[
										author$project$TypedSvg$Attributes$transform(
										_List_fromArray(
											[
												A2(
												author$project$TypedSvg$Types$Translate,
												(-560) + author$project$Grid$Units$toMillimeters(chairOffset),
												455),
												A3(author$project$TypedSvg$Types$Rotate, 13.591501, 0, 0)
											])),
										A2(author$project$TypedSvg$Core$attribute, 'style', 'stroke-linecap:round;stroke-linejoin:round')
									]),
								_List_fromArray(
									[
										A2(author$project$TypedSvg$g, _List_Nil, halfChairMarkup),
										A2(
										author$project$TypedSvg$g,
										_List_fromArray(
											[
												A2(author$project$TypedSvg$Core$attribute, 'transform', 'matrix(-1,0,0,1,750.89848,0)')
											]),
										halfChairMarkup)
									]));
						},
						chairOffsets),
					_Utils_ap(
						_List_fromArray(
							[
								A2(
								author$project$TypedSvg$rect,
								_List_fromArray(
									[
										author$project$TypedSvg$Attributes$InPx$width(
										author$project$Grid$Units$toMillimeters(length)),
										author$project$TypedSvg$Attributes$InPx$height(
										author$project$Grid$Units$toMillimeters(width)),
										author$project$TypedSvg$Attributes$InPx$x(0),
										author$project$TypedSvg$Attributes$InPx$y(0)
									]),
								_List_Nil)
							]),
						function () {
							if (deskPanelType.$ === 'NoDeskPanel') {
								return _List_Nil;
							} else {
								var from = deskPanelType.a.from;
								var to = deskPanelType.a.to;
								return _List_fromArray(
									[
										A2(
										author$project$TypedSvg$rect,
										_List_fromArray(
											[
												author$project$TypedSvg$Attributes$InPx$x(
												author$project$Grid$Units$toMillimeters(
													A2(elm$core$Basics$min, from, to))),
												author$project$TypedSvg$Attributes$InPx$y(
												author$project$Grid$Units$toMillimeters(width)),
												author$project$TypedSvg$Attributes$InPx$width(
												author$project$Grid$Units$toMillimeters(
													elm$core$Basics$abs(to - from)) + (author$project$Architecture$Equipment$panelThickness / 2)),
												author$project$TypedSvg$Attributes$InPx$height(author$project$Architecture$Equipment$panelThickness),
												author$project$TypedSvg$Attributes$fill(
												author$project$TypedSvg$Types$Fill(author$project$Styles$SvgStyle$itemStrokeColor))
											]),
										_List_Nil),
										A2(
										author$project$TypedSvg$rect,
										_List_fromArray(
											[
												author$project$TypedSvg$Attributes$InPx$x(
												author$project$Grid$Units$toMillimeters(from) - (author$project$Architecture$Equipment$panelThickness / 2)),
												author$project$TypedSvg$Attributes$InPx$y(
												author$project$Grid$Units$toMillimeters(width - 2)),
												author$project$TypedSvg$Attributes$InPx$height(
												author$project$Grid$Units$toMillimeters(2)),
												author$project$TypedSvg$Attributes$InPx$width(author$project$Architecture$Equipment$panelThickness),
												author$project$TypedSvg$Attributes$fill(
												author$project$TypedSvg$Types$Fill(author$project$Styles$SvgStyle$itemStrokeColor))
											]),
										_List_Nil)
									]);
							}
						}()))
			};
		case 'Closet':
			var closetWidth = equipmentTypeValue.a;
			var rackOffset = 60;
			var minCoatHangersOffsetFromWall = 70;
			var frontEdgeAccessExceptions = function (otherEquipmentType) {
				if (otherEquipmentType.$ === 'DoubleBed') {
					return 2 - author$project$Architecture$Equipment$enoughToReachLowShelf;
				} else {
					return 0;
				}
			};
			var exactClosetWidth = author$project$Grid$Units$toMillimeters(closetWidth);
			var distanceBetweenCoatHangers = 70;
			var numberOfCoatHangers = elm$core$Basics$floor((exactClosetWidth - (2 * minCoatHangersOffsetFromWall)) / distanceBetweenCoatHangers);
			var coatHangersOffsetFromWall = (exactClosetWidth - (numberOfCoatHangers * distanceBetweenCoatHangers)) / 2;
			var coatHangerDisplacement = function (index) {
				return A2(
					elm$random$Random$step,
					A2(elm$random$Random$float, -(distanceBetweenCoatHangers / 3), distanceBetweenCoatHangers / 3),
					elm$random$Random$initialSeed(index)).a;
			};
			var closetDepth = 6;
			var exactClosetDepth = author$project$Grid$Units$toMillimeters(closetDepth);
			var renderCoatHanger = function (index) {
				return A3(
					author$project$Architecture$Equipment$singlePath,
					author$project$Svg$Path$startAt(
						_Utils_Tuple2(
							(coatHangersOffsetFromWall + (index * distanceBetweenCoatHangers)) + coatHangerDisplacement(index),
							exactClosetDepth - 50)),
					author$project$Svg$Path$open,
					_List_fromArray(
						[
							author$project$Svg$Path$lineBy(
							_Utils_Tuple2(
								(-2) * coatHangerDisplacement(index),
								(-exactClosetDepth) + 100))
						]));
			};
			var coatHangersMarkup = A2(
				elm$core$List$map,
				renderCoatHanger,
				A2(elm$core$List$range, 0, numberOfCoatHangers));
			var boundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(author$project$Grid$Point$gridPoint, 0, 0),
				A2(author$project$Grid$Point$gridPoint, closetWidth, closetDepth));
			var exactBack = author$project$Grid$Units$toMillimeters(
				author$project$Grid$Boundary$west(boundary));
			var rackMarkup = _List_fromArray(
				[
					A2(
					author$project$TypedSvg$rect,
					_List_fromArray(
						[
							author$project$TypedSvg$Attributes$InPx$strokeWidth(0),
							author$project$TypedSvg$Attributes$InPx$y((exactClosetDepth / 2) - 35),
							author$project$TypedSvg$Attributes$InPx$x(author$project$Styles$SvgStyle$strokeWidthOnPlan / 2),
							author$project$TypedSvg$Attributes$InPx$width(exactClosetWidth - author$project$Styles$SvgStyle$strokeWidthOnPlan),
							author$project$TypedSvg$Attributes$InPx$height(70)
						]),
					_List_Nil),
					A2(
					author$project$TypedSvg$path,
					_List_fromArray(
						[
							author$project$Svg$Path$pathToAttribute(
							_List_fromArray(
								[
									A3(
									author$project$Svg$Path$subpath,
									author$project$Svg$Path$startAt(
										_Utils_Tuple2(exactBack, exactClosetDepth / 2)),
									author$project$Svg$Path$open,
									_List_fromArray(
										[
											author$project$Svg$Path$lineBy(
											_Utils_Tuple2(exactClosetWidth, 0))
										]))
								]))
						]),
					_List_Nil)
				]);
			var accessInFront = F2(
				function (edgeDirection, start) {
					return _List_fromArray(
						[
							{
							edgeDirection: edgeDirection,
							exceptions: elm$core$Maybe$Just(frontEdgeAccessExceptions),
							length: closetWidth,
							locationLabel: 'to put clothes in and take them out',
							spaceRequired: author$project$Architecture$Equipment$enoughToReachLowShelf,
							start: start
						}
						]);
				});
			return {
				availableRotations: author$project$Architecture$Equipment$allRotations,
				locationPreposition: 'in front of',
				name: 'closet',
				rawEdgeAccessAlternatives: _List_fromArray(
					[
						A2(
						accessInFront,
						author$project$Grid$Direction$SouthEastToWest,
						A2(
							author$project$Grid$Point$gridPoint,
							author$project$Grid$Boundary$east(boundary),
							author$project$Grid$Boundary$south(boundary))),
						A2(
						accessInFront,
						author$project$Grid$Direction$NorthWestToEast,
						A2(
							author$project$Grid$Point$gridPoint,
							author$project$Grid$Boundary$west(boundary),
							author$project$Grid$Boundary$north(boundary)))
					]),
				rawFootprint: author$project$Grid$Footprint$footprint(
					_List_fromArray(
						[boundary])),
				rawMarkup: _Utils_ap(
					_List_fromArray(
						[
							A2(
							author$project$TypedSvg$rect,
							_List_fromArray(
								[
									author$project$TypedSvg$Attributes$InPx$height(600),
									author$project$TypedSvg$Attributes$InPx$width(exactClosetWidth),
									author$project$TypedSvg$Attributes$InPx$x(exactBack),
									author$project$TypedSvg$Attributes$InPx$y(0)
								]),
							_List_Nil)
						]),
					_Utils_ap(coatHangersMarkup, rackMarkup))
			};
		case 'TableWithoutSeatsAtHead':
			var tableType = equipmentTypeValue.a;
			var tableWidth = function () {
				if (tableType.$ === 'DiningTable') {
					var tableData = tableType.a;
					return tableData.width;
				} else {
					return 6;
				}
			}();
			var tableLength = function () {
				if (tableType.$ === 'DiningTable') {
					var tableData = tableType.a;
					return tableData.length;
				} else {
					return 22;
				}
			}();
			var tableBoundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(author$project$Grid$Point$gridPoint, 0, 0),
				A2(author$project$Grid$Point$gridPoint, tableWidth, tableLength));
			var minSpaceBetweenChairs = 6 - author$project$Architecture$Equipment$chairWidth;
			var headSpaceOffset = 6;
			var exactTableWidth = author$project$Grid$Units$toMillimeters(tableWidth);
			var exactTableLength = author$project$Grid$Units$toMillimeters(tableLength);
			var exactChairOffsetFromTableEdge = function () {
				if (tableType.$ === 'DiningTable') {
					return (tableLength > 13) ? 170 : 100;
				} else {
					return 200;
				}
			}();
			var chairOffsetFromTableEdge = A2(author$project$Grid$Units$fromMillimeters, elm$core$Basics$floor, exactChairOffsetFromTableEdge);
			var numberOfChairs = function () {
				if (tableType.$ === 'DiningTable') {
					var tableData = tableType.a;
					return ((((tableData.length - (2 * chairOffsetFromTableEdge)) - author$project$Architecture$Equipment$chairWidth) / (minSpaceBetweenChairs + author$project$Architecture$Equipment$chairWidth)) | 0) + 1;
				} else {
					return 3;
				}
			}();
			var spaceBetweenChairs = ((exactTableLength - (2 * exactChairOffsetFromTableEdge)) - (numberOfChairs * author$project$Architecture$Equipment$exactChairWidth)) / (numberOfChairs - 1);
			var chairY = function (chairIndex) {
				return (exactChairOffsetFromTableEdge + (chairIndex * (author$project$Architecture$Equipment$exactChairWidth + spaceBetweenChairs))) + (author$project$Architecture$Equipment$exactChairWidth / 2);
			};
			var chairOffset = 3;
			var chairsBoundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(
					author$project$Grid$Point$gridPoint,
					author$project$Grid$Boundary$west(tableBoundary) - chairOffset,
					author$project$Grid$Boundary$south(tableBoundary) + chairOffsetFromTableEdge),
				A2(
					author$project$Grid$Point$gridPoint,
					author$project$Grid$Boundary$east(tableBoundary) + chairOffset,
					author$project$Grid$Boundary$north(tableBoundary) - chairOffsetFromTableEdge));
			var exactChairOffset = author$project$Grid$Units$toMillimeters(chairOffset);
			var frontChairs = A2(
				elm$core$List$map,
				function (chairIndex) {
					return author$project$Architecture$Equipment$chair(
						_List_fromArray(
							[
								A2(
								author$project$TypedSvg$Types$Translate,
								exactTableWidth + exactChairOffset,
								chairY(chairIndex)),
								A3(author$project$TypedSvg$Types$Rotate, 90, 0, 0)
							]));
				},
				A2(elm$core$List$range, 0, numberOfChairs - 1));
			var backChairs = A2(
				elm$core$List$map,
				function (chairIndex) {
					return author$project$Architecture$Equipment$chair(
						_List_fromArray(
							[
								A2(
								author$project$TypedSvg$Types$Translate,
								-exactChairOffset,
								chairY(chairIndex)),
								A3(author$project$TypedSvg$Types$Rotate, -90, 0, 0)
							]));
				},
				A2(elm$core$List$range, 0, numberOfChairs - 1));
			var atSouthHeadOfTable = {
				edgeDirection: author$project$Grid$Direction$SouthEastToWest,
				exceptions: elm$core$Maybe$Nothing,
				length: tableWidth + (2 * headSpaceOffset),
				locationLabel: author$project$Architecture$Equipment$toPassNextToTable,
				spaceRequired: author$project$Architecture$Equipment$enoughToPassNextToCounterCarryingStuff,
				start: A2(
					author$project$Grid$Point$gridPoint,
					author$project$Grid$Boundary$east(tableBoundary) + headSpaceOffset,
					author$project$Grid$Boundary$south(tableBoundary))
			};
			var atNorthHeadOfTable = {
				edgeDirection: author$project$Grid$Direction$NorthWestToEast,
				exceptions: elm$core$Maybe$Nothing,
				length: tableWidth + (2 * headSpaceOffset),
				locationLabel: author$project$Architecture$Equipment$toPassNextToTable,
				spaceRequired: author$project$Architecture$Equipment$enoughToPassNextToCounterCarryingStuff,
				start: A2(
					author$project$Grid$Point$gridPoint,
					author$project$Grid$Boundary$west(tableBoundary) - headSpaceOffset,
					author$project$Grid$Boundary$north(tableBoundary))
			};
			var accessToSeats = _List_fromArray(
				[
					{
					edgeDirection: author$project$Grid$Direction$NorthEastToSouth,
					exceptions: elm$core$Maybe$Nothing,
					length: tableLength,
					locationLabel: author$project$Architecture$Equipment$toPassBehindSittingPeople,
					spaceRequired: author$project$Architecture$Equipment$enoughToPassBehindChairAtTable,
					start: A2(
						author$project$Grid$Point$gridPoint,
						author$project$Grid$Boundary$east(tableBoundary),
						author$project$Grid$Boundary$north(tableBoundary))
				},
					{
					edgeDirection: author$project$Grid$Direction$SouthWestToNorth,
					exceptions: elm$core$Maybe$Nothing,
					length: tableLength,
					locationLabel: author$project$Architecture$Equipment$toPassBehindSittingPeople,
					spaceRequired: author$project$Architecture$Equipment$enoughToPassBehindChairAtTable,
					start: A2(
						author$project$Grid$Point$gridPoint,
						author$project$Grid$Boundary$west(tableBoundary),
						author$project$Grid$Boundary$south(tableBoundary))
				}
				]);
			return {
				availableRotations: A2(turboMaCk$any_set$Set$Any$singleton, author$project$Grid$Rotation$QuarterTurnClockwise, author$project$Grid$Rotation$rotationKey),
				locationPreposition: 'near',
				name: 'table',
				rawEdgeAccessAlternatives: _List_fromArray(
					[
						A2(elm$core$List$cons, atNorthHeadOfTable, accessToSeats),
						A2(elm$core$List$cons, atSouthHeadOfTable, accessToSeats)
					]),
				rawFootprint: author$project$Grid$Footprint$footprint(
					_List_fromArray(
						[tableBoundary, chairsBoundary])),
				rawMarkup: _Utils_ap(
					frontChairs,
					_Utils_ap(
						backChairs,
						_List_fromArray(
							[
								A2(
								author$project$TypedSvg$rect,
								_List_fromArray(
									[
										author$project$TypedSvg$Attributes$InPx$width(
										author$project$Grid$Units$toMillimeters(tableWidth)),
										author$project$TypedSvg$Attributes$InPx$height(
										author$project$Grid$Units$toMillimeters(tableLength))
									]),
								_List_Nil)
							])))
			};
		case 'TableWithSeatsAtHead':
			var tableWidth = 8;
			var tableLength = 14;
			var tableBoundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(author$project$Grid$Point$gridPoint, 0, 0),
				A2(author$project$Grid$Point$gridPoint, tableWidth, tableLength));
			var inTheBack = function (_n14) {
				var spaceRequired = _n14.a;
				var locationLabel = _n14.b;
				return {
					edgeDirection: author$project$Grid$Direction$SouthWestToNorth,
					exceptions: elm$core$Maybe$Nothing,
					length: tableLength + (2 * author$project$Architecture$Equipment$enoughForChairAtDiningTable),
					locationLabel: locationLabel,
					spaceRequired: spaceRequired,
					start: A2(
						author$project$Grid$Point$gridPoint,
						author$project$Grid$Boundary$west(tableBoundary),
						author$project$Grid$Boundary$south(tableBoundary) - author$project$Architecture$Equipment$enoughForChairAtDiningTable)
				};
			};
			var inFront = function (_n13) {
				var spaceRequired = _n13.a;
				var locationLabel = _n13.b;
				return {
					edgeDirection: author$project$Grid$Direction$NorthEastToSouth,
					exceptions: elm$core$Maybe$Nothing,
					length: tableLength + (2 * author$project$Architecture$Equipment$enoughForChairAtDiningTable),
					locationLabel: locationLabel,
					spaceRequired: spaceRequired,
					start: A2(
						author$project$Grid$Point$gridPoint,
						author$project$Grid$Boundary$east(tableBoundary),
						author$project$Grid$Boundary$north(tableBoundary) + author$project$Architecture$Equipment$enoughForChairAtDiningTable)
				};
			};
			var exactTableWidth = author$project$Grid$Units$toMillimeters(tableWidth);
			var exactTableLength = author$project$Grid$Units$toMillimeters(tableLength);
			var exactChairOffset = 350;
			var chairOffsetFromTableEdge = 150 + (author$project$Architecture$Equipment$exactChairWidth / 2);
			var boundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(
					author$project$Grid$Point$gridPoint,
					author$project$Grid$Boundary$west(tableBoundary) - 4,
					author$project$Grid$Boundary$south(tableBoundary) - 4),
				A2(
					author$project$Grid$Point$gridPoint,
					author$project$Grid$Boundary$east(tableBoundary) + 4,
					author$project$Grid$Boundary$north(tableBoundary) + 4));
			var accessAtHeadsOfTable = _List_fromArray(
				[
					{
					edgeDirection: author$project$Grid$Direction$SouthEastToWest,
					exceptions: elm$core$Maybe$Nothing,
					length: tableWidth,
					locationLabel: author$project$Architecture$Equipment$toPassBehindSittingPeople,
					spaceRequired: author$project$Architecture$Equipment$enoughToPassBehindChairAtTable,
					start: A2(
						author$project$Grid$Point$gridPoint,
						author$project$Grid$Boundary$east(tableBoundary),
						author$project$Grid$Boundary$south(tableBoundary))
				},
					{
					edgeDirection: author$project$Grid$Direction$NorthWestToEast,
					exceptions: elm$core$Maybe$Nothing,
					length: tableWidth,
					locationLabel: author$project$Architecture$Equipment$toPassBehindSittingPeople,
					spaceRequired: author$project$Architecture$Equipment$enoughToPassBehindChairAtTable,
					start: A2(
						author$project$Grid$Point$gridPoint,
						author$project$Grid$Boundary$west(tableBoundary),
						author$project$Grid$Boundary$north(tableBoundary))
				}
				]);
			return {
				availableRotations: A2(turboMaCk$any_set$Set$Any$singleton, author$project$Grid$Rotation$QuarterTurnClockwise, author$project$Grid$Rotation$rotationKey),
				locationPreposition: 'in',
				name: 'dining area',
				rawEdgeAccessAlternatives: _List_fromArray(
					[
						_Utils_ap(
						accessAtHeadsOfTable,
						_List_fromArray(
							[
								inFront(author$project$Architecture$Equipment$spaceToSit),
								inTheBack(author$project$Architecture$Equipment$spaceToServe)
							])),
						_Utils_ap(
						accessAtHeadsOfTable,
						_List_fromArray(
							[
								inFront(author$project$Architecture$Equipment$spaceToServe),
								inTheBack(author$project$Architecture$Equipment$spaceToSit)
							]))
					]),
				rawFootprint: author$project$Grid$Footprint$footprint(
					_List_fromArray(
						[
							A2(
							author$project$Grid$Boundary$setEast,
							author$project$Grid$Boundary$east(boundary) - 5,
							A2(
								author$project$Grid$Boundary$setWest,
								author$project$Grid$Boundary$west(boundary) + 5,
								boundary)),
							A2(
							author$project$Grid$Boundary$setSouth,
							author$project$Grid$Boundary$south(boundary) + 5,
							A2(
								author$project$Grid$Boundary$setNorth,
								author$project$Grid$Boundary$north(boundary) - 5,
								boundary)),
							tableBoundary
						])),
				rawMarkup: _List_fromArray(
					[
						author$project$Architecture$Equipment$chair(
						_List_fromArray(
							[
								A2(author$project$TypedSvg$Types$Translate, exactTableWidth / 2, -exactChairOffset)
							])),
						author$project$Architecture$Equipment$chair(
						_List_fromArray(
							[
								A2(author$project$TypedSvg$Types$Translate, exactTableWidth / 2, exactTableLength + exactChairOffset),
								A3(author$project$TypedSvg$Types$Rotate, 180, 0, 0)
							])),
						author$project$Architecture$Equipment$chair(
						_List_fromArray(
							[
								A2(author$project$TypedSvg$Types$Translate, exactTableWidth + exactChairOffset, chairOffsetFromTableEdge),
								A3(author$project$TypedSvg$Types$Rotate, 90, 0, 0)
							])),
						author$project$Architecture$Equipment$chair(
						_List_fromArray(
							[
								A2(author$project$TypedSvg$Types$Translate, exactTableWidth + exactChairOffset, exactTableLength - chairOffsetFromTableEdge),
								A3(author$project$TypedSvg$Types$Rotate, 90, 0, 0)
							])),
						author$project$Architecture$Equipment$chair(
						_List_fromArray(
							[
								A2(author$project$TypedSvg$Types$Translate, -exactChairOffset, chairOffsetFromTableEdge),
								A3(author$project$TypedSvg$Types$Rotate, 270, 0, 0)
							])),
						author$project$Architecture$Equipment$chair(
						_List_fromArray(
							[
								A2(author$project$TypedSvg$Types$Translate, -exactChairOffset, exactTableLength - chairOffsetFromTableEdge),
								A3(author$project$TypedSvg$Types$Rotate, 270, 0, 0)
							])),
						A2(
						author$project$TypedSvg$rect,
						_List_fromArray(
							[
								author$project$TypedSvg$Attributes$InPx$height(exactTableLength),
								author$project$TypedSvg$Attributes$InPx$width(exactTableWidth)
							]),
						_List_Nil)
					])
			};
		case 'IslandOnlyKitchen':
			var closetWidth = equipmentTypeValue.a.closetWidth;
			var counterLength = equipmentTypeValue.a.counterLength;
			var kitchenEquipment = equipmentTypeValue.a.kitchenEquipment;
			var spaceBeforeCounter = author$project$Architecture$Equipment$enoughToReachLowDeepShelf;
			var exactSpaceBeforeCounter = author$project$Grid$Units$toMillimeters(spaceBeforeCounter);
			var exactClosetWidth = author$project$Grid$Units$toMillimeters(closetWidth);
			var divisionWallThickness = author$project$Architecture$Wall$wallTypeThickness(author$project$Architecture$Wall$DividingWall);
			var exactDivisionWallThickness = author$project$Grid$Units$toMillimeters(divisionWallThickness);
			var counterWidth = 8;
			var counterBoundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(author$project$Grid$Point$gridPoint, 0, 0),
				A2(author$project$Grid$Point$gridPoint, counterLength, counterWidth));
			var closetDepth = 6;
			var exactClosetDepth = author$project$Grid$Units$toMillimeters(closetDepth);
			var closetBoundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(author$project$Grid$Point$gridPoint, divisionWallThickness, -(spaceBeforeCounter + closetDepth)),
				A2(author$project$Grid$Point$gridPoint, closetWidth + divisionWallThickness, -spaceBeforeCounter));
			return {
				availableRotations: author$project$Architecture$Equipment$allRotations,
				locationPreposition: 'in',
				name: 'kitchen',
				rawEdgeAccessAlternatives: _List_fromArray(
					[
						_List_fromArray(
						[
							{
							edgeDirection: author$project$Grid$Direction$SouthEastToWest,
							exceptions: elm$core$Maybe$Just(author$project$Architecture$Equipment$tableAllowedCloser),
							length: counterLength,
							locationLabel: author$project$Architecture$Equipment$toUseCupboards,
							spaceRequired: author$project$Architecture$Equipment$enoughToReachLowDeepShelf,
							start: A2(author$project$Grid$Point$gridPoint, counterLength, 0)
						}
						])
					]),
				rawFootprint: author$project$Grid$Footprint$footprint(
					_List_fromArray(
						[closetBoundary, counterBoundary])),
				rawMarkup: _Utils_ap(
					_List_fromArray(
						[
							A2(author$project$Grid$Boundary$toSvg, _List_Nil, closetBoundary),
							A2(
							author$project$TypedSvg$rect,
							_List_fromArray(
								[
									author$project$TypedSvg$Attributes$InPx$x(exactDivisionWallThickness),
									author$project$TypedSvg$Attributes$InPx$y(-(exactSpaceBeforeCounter + author$project$Architecture$Equipment$panelThickness)),
									author$project$TypedSvg$Attributes$InPx$width(exactClosetWidth),
									author$project$TypedSvg$Attributes$InPx$height(author$project$Architecture$Equipment$panelThickness),
									author$project$TypedSvg$Attributes$class(
									_List_fromArray(
										[author$project$Styles$SvgStyle$wall]))
								]),
							_List_Nil),
							A2(author$project$Grid$Boundary$toSvg, _List_Nil, counterBoundary)
						]),
					A2(
						elm$core$List$map,
						author$project$Architecture$Equipment$kitchenEquipmentMarkup(
							{counterWidth: counterWidth}),
						kitchenEquipment))
			};
		case 'Kitchenette':
			var counterLength = equipmentTypeValue.a.counterLength;
			var kitchenEquipment = equipmentTypeValue.a.kitchenEquipment;
			var counterWidth = 6;
			var counterBoundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(author$project$Grid$Point$gridPoint, 0, 0),
				A2(author$project$Grid$Point$gridPoint, counterLength, counterWidth));
			return {
				availableRotations: author$project$Architecture$Equipment$allRotations,
				locationPreposition: 'in',
				name: 'kitchen',
				rawEdgeAccessAlternatives: _List_fromArray(
					[
						_List_fromArray(
						[
							{
							edgeDirection: author$project$Grid$Direction$SouthEastToWest,
							exceptions: elm$core$Maybe$Just(author$project$Architecture$Equipment$tableAllowedCloser),
							length: counterLength,
							locationLabel: author$project$Architecture$Equipment$toUseCupboards,
							spaceRequired: author$project$Architecture$Equipment$enoughToReachLowDeepShelf,
							start: A2(author$project$Grid$Point$gridPoint, counterLength, 0)
						}
						])
					]),
				rawFootprint: author$project$Grid$Footprint$footprint(
					_List_fromArray(
						[counterBoundary])),
				rawMarkup: A2(
					elm$core$List$cons,
					A2(author$project$Grid$Boundary$toSvg, _List_Nil, counterBoundary),
					A2(
						elm$core$List$map,
						author$project$Architecture$Equipment$kitchenEquipmentMarkup(
							{counterWidth: counterWidth}),
						kitchenEquipment))
			};
		case 'ElShapedKitchenette':
			var counterLength = equipmentTypeValue.a.counterLength;
			var sideCounterLength = equipmentTypeValue.a.sideCounterLength;
			var kitchenEquipment = equipmentTypeValue.a.kitchenEquipment;
			var counterWidth = 6;
			var sideCounterBoundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(author$project$Grid$Point$gridPoint, 0, -sideCounterLength),
				A2(author$project$Grid$Point$gridPoint, counterWidth, 0));
			var counterBoundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(author$project$Grid$Point$gridPoint, 0, 0),
				A2(author$project$Grid$Point$gridPoint, counterLength, counterWidth));
			return {
				availableRotations: author$project$Architecture$Equipment$allRotations,
				locationPreposition: 'in',
				name: 'kitchen',
				rawEdgeAccessAlternatives: _List_fromArray(
					[
						_List_fromArray(
						[
							{
							edgeDirection: author$project$Grid$Direction$SouthEastToWest,
							exceptions: elm$core$Maybe$Just(author$project$Architecture$Equipment$tableAllowedCloser),
							length: author$project$Grid$Boundary$east(counterBoundary) - author$project$Grid$Boundary$east(sideCounterBoundary),
							locationLabel: author$project$Architecture$Equipment$toUseCupboards,
							spaceRequired: author$project$Architecture$Equipment$enoughToReachLowDeepShelf,
							start: A2(
								author$project$Grid$Point$gridPoint,
								author$project$Grid$Boundary$east(counterBoundary),
								author$project$Grid$Boundary$south(counterBoundary))
						},
							{
							edgeDirection: author$project$Grid$Direction$NorthEastToSouth,
							exceptions: elm$core$Maybe$Just(author$project$Architecture$Equipment$tableAllowedCloser),
							length: author$project$Grid$Boundary$north(sideCounterBoundary) - author$project$Grid$Boundary$south(sideCounterBoundary),
							locationLabel: author$project$Architecture$Equipment$toUseCupboards,
							spaceRequired: author$project$Architecture$Equipment$enoughToReachLowDeepShelf,
							start: A2(
								author$project$Grid$Point$gridPoint,
								author$project$Grid$Boundary$east(sideCounterBoundary),
								author$project$Grid$Boundary$north(sideCounterBoundary))
						}
						])
					]),
				rawFootprint: author$project$Grid$Footprint$footprint(
					_Utils_ap(
						_List_fromArray(
							[counterBoundary, sideCounterBoundary]),
						elm$core$List$concat(
							A2(
								elm$core$List$map,
								author$project$Architecture$Equipment$kitchenEquipmentBoundary(
									{counterWidth: counterWidth}),
								kitchenEquipment)))),
				rawMarkup: _Utils_ap(
					_List_fromArray(
						[
							A3(
							author$project$Architecture$Equipment$singlePath,
							author$project$Svg$Path$startAt(
								_Utils_Tuple2(
									author$project$Grid$Units$toMillimeters(
										author$project$Grid$Boundary$west(sideCounterBoundary)),
									author$project$Grid$Units$toMillimeters(
										author$project$Grid$Boundary$south(sideCounterBoundary)))),
							author$project$Svg$Path$closed,
							_List_fromArray(
								[
									author$project$Svg$Path$lineTo(
									_Utils_Tuple2(
										author$project$Grid$Units$toMillimeters(
											author$project$Grid$Boundary$west(counterBoundary)),
										author$project$Grid$Units$toMillimeters(
											author$project$Grid$Boundary$north(counterBoundary)))),
									author$project$Svg$Path$lineTo(
									_Utils_Tuple2(
										author$project$Grid$Units$toMillimeters(
											author$project$Grid$Boundary$east(counterBoundary)),
										author$project$Grid$Units$toMillimeters(
											author$project$Grid$Boundary$north(counterBoundary)))),
									author$project$Svg$Path$lineTo(
									_Utils_Tuple2(
										author$project$Grid$Units$toMillimeters(
											author$project$Grid$Boundary$east(counterBoundary)),
										author$project$Grid$Units$toMillimeters(
											author$project$Grid$Boundary$south(counterBoundary)))),
									author$project$Svg$Path$lineTo(
									_Utils_Tuple2(
										author$project$Grid$Units$toMillimeters(
											author$project$Grid$Boundary$east(sideCounterBoundary)),
										author$project$Grid$Units$toMillimeters(
											author$project$Grid$Boundary$north(sideCounterBoundary)))),
									author$project$Svg$Path$lineTo(
									_Utils_Tuple2(
										author$project$Grid$Units$toMillimeters(
											author$project$Grid$Boundary$east(sideCounterBoundary)),
										author$project$Grid$Units$toMillimeters(
											author$project$Grid$Boundary$south(sideCounterBoundary))))
								]))
						]),
					A2(
						elm$core$List$map,
						author$project$Architecture$Equipment$kitchenEquipmentMarkup(
							{counterWidth: counterWidth}),
						kitchenEquipment))
			};
		case 'Pissoir':
			var topPartWidth = 120;
			var roundedCornerBy = function (radius) {
				return A3(
					author$project$Svg$Path$arcBy,
					_Utils_Tuple2(radius, radius),
					0,
					_Utils_Tuple2(author$project$Svg$Path$smallestArc, author$project$Svg$Path$clockwise));
			};
			var rimThickness = 50;
			var pissoirWidth = 4;
			var pissoirDepth = 4;
			var exactPissoirBowlWidth = 320;
			var halfBowlWidth = exactPissoirBowlWidth / 2;
			var innerRadius = halfBowlWidth - rimThickness;
			var xOffset = (author$project$Grid$Units$toMillimeters(pissoirWidth) / 2) - halfBowlWidth;
			var exactPissoirBowlLength = 350;
			var straightSegmentLength = exactPissoirBowlLength - halfBowlWidth;
			var innerStraightSegmentLength = straightSegmentLength - topPartWidth;
			var boundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(author$project$Grid$Point$gridPoint, 0, -pissoirDepth),
				A2(author$project$Grid$Point$gridPoint, pissoirWidth, 0));
			return {
				availableRotations: author$project$Architecture$Equipment$allRotations,
				locationPreposition: 'next to',
				name: 'toilet bowl',
				rawEdgeAccessAlternatives: _List_fromArray(
					[
						_List_fromArray(
						[
							{
							edgeDirection: author$project$Grid$Direction$SouthEastToWest,
							exceptions: elm$core$Maybe$Just(author$project$Architecture$Equipment$bathroomEquipmentAllowedCloser),
							length: pissoirWidth + 4,
							locationLabel: 'for comfortable usage',
							spaceRequired: 6,
							start: A2(author$project$Grid$Point$gridPoint, pissoirWidth + 2, -pissoirDepth)
						}
						])
					]),
				rawFootprint: author$project$Grid$Footprint$footprint(
					_List_fromArray(
						[boundary])),
				rawMarkup: _List_fromArray(
					[
						A2(
						author$project$TypedSvg$path,
						_List_fromArray(
							[
								author$project$Svg$Path$pathToAttribute(
								_List_fromArray(
									[
										A3(
										author$project$Svg$Path$subpath,
										author$project$Svg$Path$startAt(
											_Utils_Tuple2(xOffset, 0)),
										author$project$Svg$Path$closed,
										_List_fromArray(
											[
												author$project$Svg$Path$lineBy(
												_Utils_Tuple2(0, -straightSegmentLength)),
												A2(
												roundedCornerBy,
												halfBowlWidth,
												_Utils_Tuple2(exactPissoirBowlWidth, 0)),
												author$project$Svg$Path$lineBy(
												_Utils_Tuple2(0, straightSegmentLength))
											])),
										A3(
										author$project$Svg$Path$subpath,
										author$project$Svg$Path$startAt(
											_Utils_Tuple2(xOffset, -topPartWidth)),
										author$project$Svg$Path$open,
										_List_fromArray(
											[
												author$project$Svg$Path$lineBy(
												_Utils_Tuple2(exactPissoirBowlWidth, 0))
											])),
										A3(
										author$project$Svg$Path$subpath,
										author$project$Svg$Path$startAt(
											_Utils_Tuple2(xOffset + rimThickness, -topPartWidth)),
										author$project$Svg$Path$open,
										_List_fromArray(
											[
												author$project$Svg$Path$lineBy(
												_Utils_Tuple2(0, -innerStraightSegmentLength)),
												A2(
												roundedCornerBy,
												innerRadius,
												_Utils_Tuple2(2 * innerRadius, 0)),
												author$project$Svg$Path$lineBy(
												_Utils_Tuple2(0, innerStraightSegmentLength))
											]))
									]))
							]),
						_List_Nil)
					])
			};
		case 'BuiltInToilet':
			var bowlWidth = A2(author$project$Grid$Units$fromMillimeters, elm$core$Basics$ceiling, author$project$Architecture$Equipment$exactBowlWidth);
			var _n15 = author$project$Architecture$Equipment$toiletBowl(
				{
					x: (author$project$Grid$Units$toMillimeters(bowlWidth + 1) - author$project$Architecture$Equipment$exactBowlWidth) / 2,
					y: 0
				});
			var bowlMarkup = _n15.a;
			var toiletFootprint = _n15.b;
			var toiletEdgeAccessAlternatives = _n15.c;
			return {
				availableRotations: author$project$Architecture$Equipment$allRotations,
				locationPreposition: 'next to',
				name: 'toilet bowl',
				rawEdgeAccessAlternatives: toiletEdgeAccessAlternatives,
				rawFootprint: author$project$Grid$Footprint$footprint(
					_List_fromArray(
						[toiletFootprint])),
				rawMarkup: A2(
					elm$core$List$cons,
					A2(
						author$project$TypedSvg$rect,
						_List_fromArray(
							[
								author$project$TypedSvg$Attributes$InPx$width(700),
								author$project$TypedSvg$Attributes$InPx$height(200),
								author$project$TypedSvg$Attributes$InPx$x(-100),
								author$project$TypedSvg$Attributes$class(
								_List_fromArray(
									[author$project$Styles$SvgStyle$wall]))
							]),
						_List_Nil),
					bowlMarkup)
			};
		case 'ToiletWithShelfLikeEnclosure':
			var enclosureWidth = equipmentTypeValue.a.enclosureWidth;
			var bowlOffsetFromMiddle = equipmentTypeValue.a.bowlOffsetFromMiddle;
			return author$project$Architecture$Equipment$toiletWithEnclosure(
				{
					bowlOffsetFromMiddle: bowlOffsetFromMiddle,
					enclosureMarkup: _List_fromArray(
						[
							A2(
							author$project$TypedSvg$rect,
							_List_fromArray(
								[
									author$project$TypedSvg$Attributes$InPx$height(author$project$Architecture$Equipment$exactEnclosureDepth),
									author$project$TypedSvg$Attributes$InPx$width(
									author$project$Grid$Units$toMillimeters(enclosureWidth)),
									author$project$TypedSvg$Attributes$InPx$y(-author$project$Architecture$Equipment$exactEnclosureDepth)
								]),
							_List_Nil)
						]),
					width: enclosureWidth
				});
		case 'ToiletWithFullHeightEnclosure':
			var exactEnclosureWidth = 550;
			var enclosureWidth = 7;
			return author$project$Architecture$Equipment$toiletWithEnclosure(
				{
					bowlOffsetFromMiddle: 0,
					enclosureMarkup: _List_fromArray(
						[
							A2(
							author$project$TypedSvg$rect,
							_List_fromArray(
								[
									author$project$TypedSvg$Attributes$InPx$height(author$project$Architecture$Equipment$exactEnclosureDepth),
									author$project$TypedSvg$Attributes$InPx$width(exactEnclosureWidth),
									author$project$TypedSvg$Attributes$InPx$x(
									(author$project$Grid$Units$toMillimeters(enclosureWidth) - exactEnclosureWidth) / 2),
									author$project$TypedSvg$Attributes$InPx$y(-author$project$Architecture$Equipment$exactEnclosureDepth),
									author$project$TypedSvg$Attributes$class(
									_List_fromArray(
										[author$project$Styles$SvgStyle$wall]))
								]),
							_List_Nil)
						]),
					width: enclosureWidth
				});
		case 'Washbasin':
			var width = 4;
			var requiredSpaceOffsetFromEdge = 2;
			var basinWidth = 300;
			var faucetShelfWidth = author$project$Grid$Units$toMillimeters(width) - basinWidth;
			var faucetShelfSideLength = faucetShelfWidth + author$project$Architecture$Equipment$exactBasinCornerRadius;
			var basinLength = 5;
			var boundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(author$project$Grid$Point$gridPoint, 0, -width),
				A2(author$project$Grid$Point$gridPoint, basinLength, 0));
			var singleBasin = author$project$Architecture$Equipment$basin(
				{basinLength: basinLength, basinWidth: basinWidth, faucetShelfWidth: faucetShelfWidth});
			return {
				availableRotations: author$project$Architecture$Equipment$allRotations,
				locationPreposition: 'next to',
				name: 'washbasin',
				rawEdgeAccessAlternatives: _List_fromArray(
					[
						author$project$Architecture$Equipment$accessToWashbasin(
						{
							edgeDirection: author$project$Grid$Direction$SouthEastToWest,
							length: basinLength + (2 * requiredSpaceOffsetFromEdge),
							start: A2(
								author$project$Grid$Point$gridPoint,
								basinLength + requiredSpaceOffsetFromEdge,
								author$project$Grid$Boundary$south(boundary))
						})
					]),
				rawFootprint: author$project$Grid$Footprint$footprint(
					_List_fromArray(
						[boundary])),
				rawMarkup: _Utils_ap(
					_List_fromArray(
						[
							A2(
							author$project$TypedSvg$path,
							_List_fromArray(
								[
									author$project$Svg$Path$pathToAttribute(
									_List_fromArray(
										[
											A3(
											author$project$Svg$Path$subpath,
											author$project$Svg$Path$startAt(
												_Utils_Tuple2(0, -faucetShelfSideLength)),
											author$project$Svg$Path$open,
											_List_fromArray(
												[
													author$project$Svg$Path$lineBy(
													_Utils_Tuple2(0, faucetShelfSideLength)),
													author$project$Svg$Path$lineBy(
													_Utils_Tuple2(
														author$project$Grid$Units$toMillimeters(basinLength),
														0)),
													author$project$Svg$Path$lineBy(
													_Utils_Tuple2(0, -faucetShelfSideLength))
												]))
										]))
								]),
							_List_Nil)
						]),
					singleBasin(0))
			};
		default:
			var basinOffsets = equipmentTypeValue.a.basinOffsets;
			var remainingSpace = equipmentTypeValue.a.remainingSpace;
			var requiredSpaceOffsetFromEdge = 2;
			var counterWidth = 6;
			var exactCounterWidth = author$project$Grid$Units$toMillimeters(counterWidth);
			var basinWidth = 340;
			var basinLength = 6;
			var basinOnCounter = author$project$Architecture$Equipment$basin(
				{basinLength: basinLength, basinWidth: basinWidth, faucetShelfWidth: (exactCounterWidth - basinWidth) - author$project$Architecture$Equipment$basinToCounterEdge});
			var addBasinLength = F2(
				function (currentLength, offset) {
					return (currentLength + basinLength) + offset;
				});
			var addBasinMarkup = F2(
				function (offset, _n17) {
					var currentOffset = _n17.a;
					var currentMarkup = _n17.b;
					return _Utils_Tuple2(
						A2(addBasinLength, currentOffset, offset),
						_Utils_ap(
							currentMarkup,
							basinOnCounter(
								author$project$Grid$Units$toMillimeters(currentOffset + offset))));
				});
			var basinEdges = A2(
				elm$core$Maybe$withDefault,
				_List_Nil,
				elm$core$List$tail(
					A3(elm_community$list_extra$List$Extra$scanl, addBasinLength, 0, basinOffsets)));
			var counterLength = A3(elm$core$List$foldl, addBasinLength, remainingSpace, basinOffsets);
			var boundary = A2(
				author$project$Grid$Boundary$gridBoundary,
				A2(author$project$Grid$Point$gridPoint, 0, -counterWidth),
				A2(author$project$Grid$Point$gridPoint, counterLength, 0));
			var _n16 = A3(
				elm$core$List$foldl,
				addBasinMarkup,
				_Utils_Tuple2(0, _List_Nil),
				basinOffsets);
			var basinsMarkup = _n16.b;
			return {
				availableRotations: author$project$Architecture$Equipment$allRotations,
				locationPreposition: 'next to',
				name: 'double washbasin',
				rawEdgeAccessAlternatives: _List_fromArray(
					[
						A2(
						elm$core$List$map,
						function (basinEdge) {
							return {
								edgeDirection: author$project$Grid$Direction$SouthEastToWest,
								exceptions: elm$core$Maybe$Nothing,
								length: basinLength + (2 * requiredSpaceOffsetFromEdge),
								locationLabel: 'to wash comfortably',
								spaceRequired: 7,
								start: A2(
									author$project$Grid$Point$gridPoint,
									basinEdge + requiredSpaceOffsetFromEdge,
									author$project$Grid$Boundary$south(boundary))
							};
						},
						basinEdges)
					]),
				rawFootprint: author$project$Grid$Footprint$footprint(
					_List_fromArray(
						[boundary])),
				rawMarkup: _Utils_ap(
					_List_fromArray(
						[
							A2(
							author$project$TypedSvg$rect,
							_List_fromArray(
								[
									author$project$TypedSvg$Attributes$InPx$height(exactCounterWidth),
									author$project$TypedSvg$Attributes$InPx$width(
									author$project$Grid$Units$toMillimeters(counterLength)),
									author$project$TypedSvg$Attributes$InPx$y(-exactCounterWidth)
								]),
							_List_Nil)
						]),
					basinsMarkup)
			};
	}
};
var author$project$Architecture$Equipment$computedProperties = A2(elm$core$Basics$composeR, author$project$Architecture$Equipment$rawProperties, author$project$Architecture$Equipment$normalizeOrigin);
var author$project$Architecture$Equipment$edgeAccessAlternatives = function (_n0) {
	var data = _n0.a;
	return author$project$Architecture$Equipment$computedProperties(data.equipmentType).edgeAccessAlternatives;
};
var author$project$Architecture$Equipment$locationPreposition = function (_n0) {
	var data = _n0.a;
	return author$project$Architecture$Equipment$rawProperties(data.equipmentType).locationPreposition;
};
var author$project$Architecture$Equipment$rotation = function (_n0) {
	var data = _n0.a;
	return data.rotation;
};
var author$project$Architecture$ExistingItem$getWall = function (existingItem) {
	if (existingItem.$ === 'ExistingWall') {
		var existingWall = existingItem.a;
		return elm$core$Maybe$Just(existingWall);
	} else {
		return elm$core$Maybe$Nothing;
	}
};
var ianmackenzie$elm_float_extra$Float$Extra$interpolateFrom = F3(
	function (start, end, parameter) {
		return (parameter <= 0.5) ? (start + (parameter * (end - start))) : (end + ((1 - parameter) * (start - end)));
	});
var ianmackenzie$elm_geometry$Point2d$interpolateFrom = F3(
	function (p1, p2, t) {
		var _n0 = ianmackenzie$elm_geometry$Point2d$coordinates(p2);
		var x2 = _n0.a;
		var y2 = _n0.b;
		var _n1 = ianmackenzie$elm_geometry$Point2d$coordinates(p1);
		var x1 = _n1.a;
		var y1 = _n1.b;
		return ianmackenzie$elm_geometry$Point2d$fromCoordinates(
			_Utils_Tuple2(
				A3(ianmackenzie$elm_float_extra$Float$Extra$interpolateFrom, x1, x2, t),
				A3(ianmackenzie$elm_float_extra$Float$Extra$interpolateFrom, y1, y2, t)));
	});
var ianmackenzie$elm_geometry$Point2d$midpoint = F2(
	function (firstPoint, secondPoint) {
		return A3(ianmackenzie$elm_geometry$Point2d$interpolateFrom, firstPoint, secondPoint, 0.5);
	});
var ianmackenzie$elm_geometry$Rectangle2d$from = F2(
	function (firstPoint, secondPoint) {
		var computedCenterPoint = A2(ianmackenzie$elm_geometry$Point2d$midpoint, firstPoint, secondPoint);
		var _n0 = ianmackenzie$elm_geometry$Point2d$coordinates(secondPoint);
		var x2 = _n0.a;
		var y2 = _n0.b;
		var _n1 = ianmackenzie$elm_geometry$Point2d$coordinates(firstPoint);
		var x1 = _n1.a;
		var y1 = _n1.b;
		return ianmackenzie$elm_geometry$Geometry$Types$Rectangle2d(
			{
				axes: ianmackenzie$elm_geometry$Frame2d$atPoint(computedCenterPoint),
				dimensions: _Utils_Tuple2(
					elm$core$Basics$abs(x2 - x1),
					elm$core$Basics$abs(y2 - y1))
			});
	});
var author$project$Architecture$ExistingWall$wallSegmentProjection = F2(
	function (properties, _n0) {
		var startOffset = _n0.startOffset;
		var endOffset = _n0.endOffset;
		var segmentLength = endOffset - startOffset;
		var _n1 = function () {
			var _n2 = properties.direction;
			switch (_n2.$) {
				case 'East':
					return _Utils_Tuple2(
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(startOffset, 0)),
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(segmentLength, properties.thickness)));
				case 'West':
					return _Utils_Tuple2(
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(-startOffset, 0)),
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(-segmentLength, -properties.thickness)));
				case 'South':
					return _Utils_Tuple2(
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(0, -startOffset)),
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(properties.thickness, -segmentLength)));
				default:
					return _Utils_Tuple2(
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(0, startOffset)),
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(-properties.thickness, segmentLength)));
			}
		}();
		var offsetVector = _n1.a;
		var diagonal = _n1.b;
		var startPoint = A2(ianmackenzie$elm_geometry$Point2d$translateBy, offsetVector, properties.origin);
		var endPoint = A2(ianmackenzie$elm_geometry$Point2d$translateBy, diagonal, startPoint);
		return A2(ianmackenzie$elm_geometry$Rectangle2d$from, startPoint, endPoint);
	});
var author$project$Architecture$ExistingWall$projection = function (_n0) {
	var properties = _n0.a;
	return A2(
		author$project$Architecture$ExistingWall$wallSegmentProjection,
		properties,
		{endOffset: properties.length, startOffset: 0});
};
var author$project$Architecture$ExistingWall$boundingBoxes = function (existingWall) {
	return elm$core$List$singleton(
		ianmackenzie$elm_geometry$Rectangle2d$boundingBox(
			author$project$Architecture$ExistingWall$projection(existingWall)));
};
var elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (maybe.$ === 'Just') {
			var value = maybe.a;
			return elm$core$Maybe$Just(
				f(value));
		} else {
			return elm$core$Maybe$Nothing;
		}
	});
var author$project$Architecture$ExistingItem$boundingBoxes = function (existingItem) {
	return A2(
		elm$core$Maybe$withDefault,
		_List_Nil,
		A2(
			elm$core$Maybe$map,
			author$project$Architecture$ExistingWall$boundingBoxes,
			author$project$Architecture$ExistingItem$getWall(existingItem)));
};
var author$project$Architecture$Equipment$equipmentType = function (_n0) {
	var data = _n0.a;
	return data.equipmentType;
};
var author$project$Architecture$Item$itemType = function (_n0) {
	var data = _n0.a;
	return data.itemType;
};
var author$project$Architecture$Item$getEquipment = function (item) {
	var _n0 = author$project$Architecture$Item$itemType(item);
	if (_n0.$ === 'EquipmentItem') {
		var equipment = _n0.a;
		return elm$core$Maybe$Just(equipment);
	} else {
		return elm$core$Maybe$Nothing;
	}
};
var elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (maybeValue.$ === 'Just') {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return elm$core$Maybe$Nothing;
		}
	});
var author$project$Architecture$Item$edgeAccessBoundary = F3(
	function (itemRotation, otherItem, edgeAccess) {
		var adjustedSpaceRequired = function (equipment) {
			return A2(
				elm$core$Maybe$map,
				elm$core$Basics$add(edgeAccess.spaceRequired),
				A2(
					elm$core$Maybe$map,
					function (getSpaceRequired) {
						return getSpaceRequired(
							author$project$Architecture$Equipment$equipmentType(equipment));
					},
					edgeAccess.exceptions));
		};
		var finalSpaceRequired = A2(
			elm$core$Maybe$withDefault,
			edgeAccess.spaceRequired,
			A2(
				elm$core$Maybe$andThen,
				adjustedSpaceRequired,
				A2(elm$core$Maybe$andThen, author$project$Architecture$Item$getEquipment, otherItem)));
		var boundary = function () {
			var _n0 = edgeAccess.edgeDirection;
			switch (_n0.$) {
				case 'NorthWestToEast':
					return A2(
						author$project$Grid$Boundary$gridBoundary,
						A2(
							author$project$Grid$Point$gridPoint,
							author$project$Grid$Point$xCoordinate(edgeAccess.start),
							author$project$Grid$Point$yCoordinate(edgeAccess.start)),
						A2(
							author$project$Grid$Point$gridPoint,
							author$project$Grid$Point$xCoordinate(edgeAccess.start) + edgeAccess.length,
							author$project$Grid$Point$yCoordinate(edgeAccess.start) + finalSpaceRequired));
				case 'NorthEastToSouth':
					return A2(
						author$project$Grid$Boundary$gridBoundary,
						A2(
							author$project$Grid$Point$gridPoint,
							author$project$Grid$Point$xCoordinate(edgeAccess.start),
							author$project$Grid$Point$yCoordinate(edgeAccess.start) - edgeAccess.length),
						A2(
							author$project$Grid$Point$gridPoint,
							author$project$Grid$Point$xCoordinate(edgeAccess.start) + finalSpaceRequired,
							author$project$Grid$Point$yCoordinate(edgeAccess.start)));
				case 'SouthEastToWest':
					return A2(
						author$project$Grid$Boundary$gridBoundary,
						A2(
							author$project$Grid$Point$gridPoint,
							author$project$Grid$Point$xCoordinate(edgeAccess.start) - edgeAccess.length,
							author$project$Grid$Point$yCoordinate(edgeAccess.start) - finalSpaceRequired),
						A2(
							author$project$Grid$Point$gridPoint,
							author$project$Grid$Point$xCoordinate(edgeAccess.start),
							author$project$Grid$Point$yCoordinate(edgeAccess.start)));
				default:
					return A2(
						author$project$Grid$Boundary$gridBoundary,
						A2(
							author$project$Grid$Point$gridPoint,
							author$project$Grid$Point$xCoordinate(edgeAccess.start) - finalSpaceRequired,
							author$project$Grid$Point$yCoordinate(edgeAccess.start)),
						A2(
							author$project$Grid$Point$gridPoint,
							author$project$Grid$Point$xCoordinate(edgeAccess.start),
							author$project$Grid$Point$yCoordinate(edgeAccess.start) + edgeAccess.length));
			}
		}();
		return A2(author$project$Grid$Boundary$rotate, itemRotation, boundary);
	});
var author$project$Architecture$Equipment$footprint = function (_n0) {
	var data = _n0.a;
	return A2(
		author$project$Grid$Footprint$mapBoundaries,
		author$project$Grid$Boundary$rotate(data.rotation),
		author$project$Architecture$Equipment$computedProperties(data.equipmentType).footprint);
};
var author$project$Architecture$Equipment$translation = function (_n0) {
	var data = _n0.a;
	return data.translation;
};
var author$project$Architecture$Wall$translation = function (_n0) {
	var data = _n0.a;
	return data.originToSouthEastCorner;
};
var author$project$Architecture$Item$translation = function (_n0) {
	var data = _n0.a;
	var _n1 = data.itemType;
	if (_n1.$ === 'EquipmentItem') {
		var equipment = _n1.a;
		return author$project$Architecture$Equipment$translation(equipment);
	} else {
		var wall = _n1.a;
		return author$project$Architecture$Wall$translation(wall);
	}
};
var author$project$Architecture$Wall$direction = function (_n0) {
	var wallProperties = _n0.a;
	return wallProperties.direction;
};
var author$project$Architecture$Wall$length = function (_n0) {
	var wallProperties = _n0.a;
	return wallProperties.length;
};
var author$project$Architecture$Wall$wallType = function (_n0) {
	var wallProperties = _n0.a;
	return wallProperties.wallType;
};
var author$project$Architecture$Wall$thickness = function (wall) {
	return author$project$Architecture$Wall$wallTypeThickness(
		author$project$Architecture$Wall$wallType(wall));
};
var author$project$Architecture$Wall$viewBoundary = function (wall) {
	var _n0 = author$project$Architecture$Wall$direction(wall);
	if (_n0.$ === 'WestToEast') {
		return A2(
			author$project$Grid$Boundary$gridBoundary,
			A2(author$project$Grid$Point$gridPoint, 0, 0),
			A2(
				author$project$Grid$Point$gridPoint,
				author$project$Architecture$Wall$length(wall),
				author$project$Architecture$Wall$thickness(wall)));
	} else {
		return A2(
			author$project$Grid$Boundary$gridBoundary,
			A2(author$project$Grid$Point$gridPoint, 0, 0),
			A2(
				author$project$Grid$Point$gridPoint,
				author$project$Architecture$Wall$thickness(wall),
				author$project$Architecture$Wall$length(wall)));
	}
};
var author$project$Architecture$Wall$footprint = function (wall) {
	return author$project$Grid$Footprint$footprint(
		_List_fromArray(
			[
				author$project$Architecture$Wall$viewBoundary(wall)
			]));
};
var author$project$Architecture$Item$footprint = function (item) {
	var itemFootprint = function () {
		var _n0 = author$project$Architecture$Item$itemType(item);
		if (_n0.$ === 'EquipmentItem') {
			var equipment = _n0.a;
			return author$project$Architecture$Equipment$footprint(equipment);
		} else {
			var wall = _n0.a;
			return author$project$Architecture$Wall$footprint(wall);
		}
	}();
	return A2(
		author$project$Grid$Footprint$mapBoundaries,
		author$project$Grid$Boundary$translate(
			author$project$Architecture$Item$translation(item)),
		itemFootprint);
};
var author$project$Architecture$Item$id = function (_n0) {
	var data = _n0.a;
	return data.id;
};
var author$project$Architecture$Item$matches = F2(
	function (itemId, item) {
		return _Utils_eq(
			author$project$Architecture$Item$id(item),
			itemId);
	});
var elm$core$Basics$ge = _Utils_ge;
var elm$core$Basics$neq = _Utils_notEqual;
var ianmackenzie$elm_geometry$BoundingBox2d$alwaysFalse = F2(
	function (firstBox, secondBox) {
		return false;
	});
var ianmackenzie$elm_geometry$BoundingBox2d$maxX = function (_n0) {
	var boundingBox = _n0.a;
	return boundingBox.maxX;
};
var ianmackenzie$elm_geometry$BoundingBox2d$maxY = function (_n0) {
	var boundingBox = _n0.a;
	return boundingBox.maxY;
};
var ianmackenzie$elm_geometry$BoundingBox2d$minX = function (_n0) {
	var boundingBox = _n0.a;
	return boundingBox.minX;
};
var ianmackenzie$elm_geometry$BoundingBox2d$minY = function (_n0) {
	var boundingBox = _n0.a;
	return boundingBox.minY;
};
var ianmackenzie$elm_geometry$BoundingBox2d$overlapAmount = F2(
	function (firstBox, secondBox) {
		var yOverlap = A2(
			elm$core$Basics$min,
			ianmackenzie$elm_geometry$BoundingBox2d$maxY(firstBox),
			ianmackenzie$elm_geometry$BoundingBox2d$maxY(secondBox)) - A2(
			elm$core$Basics$max,
			ianmackenzie$elm_geometry$BoundingBox2d$minY(firstBox),
			ianmackenzie$elm_geometry$BoundingBox2d$minY(secondBox));
		var xOverlap = A2(
			elm$core$Basics$min,
			ianmackenzie$elm_geometry$BoundingBox2d$maxX(firstBox),
			ianmackenzie$elm_geometry$BoundingBox2d$maxX(secondBox)) - A2(
			elm$core$Basics$max,
			ianmackenzie$elm_geometry$BoundingBox2d$minX(firstBox),
			ianmackenzie$elm_geometry$BoundingBox2d$minX(secondBox));
		return ((xOverlap >= 0) && (yOverlap >= 0)) ? elm$core$Maybe$Just(
			A2(elm$core$Basics$min, xOverlap, yOverlap)) : elm$core$Maybe$Nothing;
	});
var ianmackenzie$elm_geometry$BoundingBox2d$overlappingBy = F2(
	function (order, tolerance) {
		switch (order.$) {
			case 'LT':
				return (tolerance > 0) ? F2(
					function (firstBox, secondBox) {
						var _n1 = A2(ianmackenzie$elm_geometry$BoundingBox2d$overlapAmount, firstBox, secondBox);
						if (_n1.$ === 'Just') {
							var distance = _n1.a;
							return _Utils_cmp(distance, tolerance) < 0;
						} else {
							return true;
						}
					}) : ((!tolerance) ? F2(
					function (firstBox, secondBox) {
						return _Utils_eq(
							A2(ianmackenzie$elm_geometry$BoundingBox2d$overlapAmount, firstBox, secondBox),
							elm$core$Maybe$Nothing);
					}) : ianmackenzie$elm_geometry$BoundingBox2d$alwaysFalse);
			case 'GT':
				return (tolerance >= 0) ? F2(
					function (firstBox, secondBox) {
						var _n2 = A2(ianmackenzie$elm_geometry$BoundingBox2d$overlapAmount, firstBox, secondBox);
						if (_n2.$ === 'Just') {
							var distance = _n2.a;
							return _Utils_cmp(distance, tolerance) > 0;
						} else {
							return false;
						}
					}) : F2(
					function (firstBox, secondBox) {
						return !_Utils_eq(
							A2(ianmackenzie$elm_geometry$BoundingBox2d$overlapAmount, firstBox, secondBox),
							elm$core$Maybe$Nothing);
					});
			default:
				if (tolerance >= 0) {
					var expected = elm$core$Maybe$Just(tolerance);
					return F2(
						function (firstBox, secondBox) {
							return _Utils_eq(
								A2(ianmackenzie$elm_geometry$BoundingBox2d$overlapAmount, firstBox, secondBox),
								expected);
						});
				} else {
					return ianmackenzie$elm_geometry$BoundingBox2d$alwaysFalse;
				}
		}
	});
var author$project$Grid$Boundary$overlapsWithBoundingBox2d = F2(
	function (boundingBox, boundary) {
		return A4(
			ianmackenzie$elm_geometry$BoundingBox2d$overlappingBy,
			elm$core$Basics$GT,
			0,
			boundingBox,
			author$project$Grid$Boundary$toBoundingBox2d(boundary));
	});
var author$project$Grid$Footprint$boundaries = function (_n0) {
	var gridBoundaries = _n0.a;
	return gridBoundaries;
};
var elm$core$Basics$not = _Basics_not;
var elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2(elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _n0 = f(mx);
		if (_n0.$ === 'Just') {
			var x = _n0.a;
			return A2(elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			elm$core$List$foldr,
			elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var author$project$Architecture$Item$findWithoutAccess = F2(
	function (existingItems, items) {
		var overlapsWithEdge = F4(
			function (currentItem, currentEquipment, edge, _n3) {
				var otherBoundingBox = _n3.a;
				var otherItem = _n3.b;
				return A2(
					author$project$Grid$Boundary$overlapsWithBoundingBox2d,
					otherBoundingBox,
					A2(
						author$project$Grid$Boundary$translate,
						author$project$Architecture$Item$translation(currentItem),
						A3(
							author$project$Architecture$Item$edgeAccessBoundary,
							author$project$Architecture$Equipment$rotation(currentEquipment),
							otherItem,
							edge)));
			});
		var getEquipmentAndItem = function (item) {
			var _n2 = author$project$Architecture$Item$itemType(item);
			if (_n2.$ === 'EquipmentItem') {
				var equipment = _n2.a;
				return elm$core$Maybe$Just(
					_Utils_Tuple2(item, equipment));
			} else {
				return elm$core$Maybe$Nothing;
			}
		};
		var footprintDataOfExistingWalls = A2(
			elm$core$List$map,
			function (boundingBox) {
				return _Utils_Tuple2(boundingBox, elm$core$Maybe$Nothing);
			},
			elm$core$List$concat(
				A2(elm$core$List$map, author$project$Architecture$ExistingItem$boundingBoxes, existingItems)));
		var footprintData = function (item) {
			return A2(
				elm$core$List$map,
				function (boundary) {
					return _Utils_Tuple2(
						author$project$Grid$Boundary$toBoundingBox2d(boundary),
						elm$core$Maybe$Just(item));
				},
				author$project$Grid$Footprint$boundaries(
					author$project$Architecture$Item$footprint(item)));
		};
		var footprintDataOfOtherItems = function (currentItemId) {
			return elm$core$List$concat(
				A2(
					elm$core$List$map,
					footprintData,
					A2(
						elm$core$List$filter,
						A2(
							elm$core$Basics$composeL,
							elm$core$Basics$not,
							author$project$Architecture$Item$matches(currentItemId)),
						items)));
		};
		var overlapsWithOtherItem = F3(
			function (currentItem, currentEquipment, edge) {
				return A2(
					elm$core$List$any,
					A3(overlapsWithEdge, currentItem, currentEquipment, edge),
					_Utils_ap(
						footprintDataOfOtherItems(
							author$project$Architecture$Item$id(currentItem)),
						footprintDataOfExistingWalls));
			});
		var overlappingEdges = F3(
			function (item, equipment, edgeAccessAlternatives) {
				return A2(
					elm$core$List$filter,
					A2(overlapsWithOtherItem, item, equipment),
					edgeAccessAlternatives);
			});
		var leastCollisions = F4(
			function (item, equipment, edgeAccessAlternatives, currentValue) {
				if (currentValue.$ === 'Just') {
					if (!currentValue.a.b) {
						return elm$core$Maybe$Just(_List_Nil);
					} else {
						var currentLeastCollisions = currentValue.a;
						var collidingEdges = A3(overlappingEdges, item, equipment, edgeAccessAlternatives);
						return (_Utils_cmp(
							elm$core$List$length(collidingEdges),
							elm$core$List$length(currentLeastCollisions)) < 0) ? elm$core$Maybe$Just(collidingEdges) : elm$core$Maybe$Just(currentLeastCollisions);
					}
				} else {
					return elm$core$Maybe$Just(
						A3(overlappingEdges, item, equipment, edgeAccessAlternatives));
				}
			});
		var edgesWithoutAccess = function (_n0) {
			var item = _n0.a;
			var equipment = _n0.b;
			return A2(
				elm$core$List$map,
				function (edgeAccess) {
					return {
						item: item,
						locationLabel: edgeAccess.locationLabel,
						locationPreposition: author$project$Architecture$Equipment$locationPreposition(equipment)
					};
				},
				A2(
					elm$core$Maybe$withDefault,
					_List_Nil,
					A3(
						elm$core$List$foldl,
						A2(leastCollisions, item, equipment),
						elm$core$Maybe$Nothing,
						author$project$Architecture$Equipment$edgeAccessAlternatives(equipment))));
		};
		return elm$core$List$concat(
			A2(
				elm$core$List$map,
				edgesWithoutAccess,
				A2(elm$core$List$filterMap, getEquipmentAndItem, items)));
	});
var author$project$Pages$Interior$NoAccessToEdge = function (a) {
	return {$: 'NoAccessToEdge', a: a};
};
var author$project$Architecture$Item$level = function (_n0) {
	var data = _n0.a;
	return data.level;
};
var author$project$Pages$Interior$items = function (model) {
	return A2(
		elm$core$List$filter,
		function (item) {
			return _Utils_eq(
				author$project$Architecture$Item$level(item),
				model.level);
		},
		model.session.placedItems);
};
var mgold$elm_nonempty_list$List$Nonempty$Nonempty = F2(
	function (a, b) {
		return {$: 'Nonempty', a: a, b: b};
	});
var author$project$Pages$Interior$comfortIssue = function (model) {
	var _n0 = A2(
		author$project$Architecture$Item$findWithoutAccess,
		model.session.existingItems,
		author$project$Pages$Interior$items(model));
	if (_n0.b) {
		var lastEdge = _n0.a;
		var otherEdges = _n0.b;
		return elm$core$Maybe$Just(
			author$project$Pages$Interior$NoAccessToEdge(
				A2(mgold$elm_nonempty_list$List$Nonempty$Nonempty, lastEdge, otherEdges)));
	} else {
		return elm$core$Maybe$Nothing;
	}
};
var mdgriffith$elm_style_animation$Animation$Model$Spring = function (a) {
	return {$: 'Spring', a: a};
};
var mdgriffith$elm_style_animation$Animation$spring = function (settings) {
	return mdgriffith$elm_style_animation$Animation$Model$Spring(settings);
};
var author$project$Pages$Interior$contextMenuSpring = mdgriffith$elm_style_animation$Animation$spring(
	{damping: 30, stiffness: 1400});
var mdgriffith$elm_style_animation$Animation$initMotion = F2(
	function (position, unit) {
		return {
			interpolation: mdgriffith$elm_style_animation$Animation$Model$Spring(
				{damping: 26, stiffness: 170}),
			interpolationOverride: elm$core$Maybe$Nothing,
			position: position,
			target: position,
			unit: unit,
			velocity: 0
		};
	});
var mdgriffith$elm_style_animation$Animation$Model$Property = F2(
	function (a, b) {
		return {$: 'Property', a: a, b: b};
	});
var mdgriffith$elm_style_animation$Animation$custom = F3(
	function (name, value, unit) {
		return A2(
			mdgriffith$elm_style_animation$Animation$Model$Property,
			name,
			A2(mdgriffith$elm_style_animation$Animation$initMotion, value, unit));
	});
var mdgriffith$elm_style_animation$Animation$opacity = function (val) {
	return A3(mdgriffith$elm_style_animation$Animation$custom, 'opacity', val, '');
};
var elm$time$Time$Posix = function (a) {
	return {$: 'Posix', a: a};
};
var elm$time$Time$millisToPosix = elm$time$Time$Posix;
var mdgriffith$elm_style_animation$Animation$Model$Animation = function (a) {
	return {$: 'Animation', a: a};
};
var mdgriffith$elm_style_animation$Animation$initialState = function (current) {
	return mdgriffith$elm_style_animation$Animation$Model$Animation(
		{
			interruption: _List_Nil,
			running: false,
			steps: _List_Nil,
			style: current,
			timing: {
				current: elm$time$Time$millisToPosix(0),
				dt: elm$time$Time$millisToPosix(0)
			}
		});
};
var mdgriffith$elm_style_animation$Animation$Model$AngleProperty = F2(
	function (a, b) {
		return {$: 'AngleProperty', a: a, b: b};
	});
var mdgriffith$elm_style_animation$Animation$Model$ColorProperty = F5(
	function (a, b, c, d, e) {
		return {$: 'ColorProperty', a: a, b: b, c: c, d: d, e: e};
	});
var mdgriffith$elm_style_animation$Animation$Model$ExactProperty = F2(
	function (a, b) {
		return {$: 'ExactProperty', a: a, b: b};
	});
var mdgriffith$elm_style_animation$Animation$Model$Path = function (a) {
	return {$: 'Path', a: a};
};
var mdgriffith$elm_style_animation$Animation$Model$Points = function (a) {
	return {$: 'Points', a: a};
};
var mdgriffith$elm_style_animation$Animation$Model$Property2 = F3(
	function (a, b, c) {
		return {$: 'Property2', a: a, b: b, c: c};
	});
var mdgriffith$elm_style_animation$Animation$Model$Property3 = F4(
	function (a, b, c, d) {
		return {$: 'Property3', a: a, b: b, c: c, d: d};
	});
var mdgriffith$elm_style_animation$Animation$Model$Property4 = F5(
	function (a, b, c, d, e) {
		return {$: 'Property4', a: a, b: b, c: c, d: d, e: e};
	});
var mdgriffith$elm_style_animation$Animation$Model$ShadowProperty = F3(
	function (a, b, c) {
		return {$: 'ShadowProperty', a: a, b: b, c: c};
	});
var elm$core$Tuple$second = function (_n0) {
	var y = _n0.b;
	return y;
};
var mdgriffith$elm_style_animation$Animation$Model$AntiClockwiseArc = function (a) {
	return {$: 'AntiClockwiseArc', a: a};
};
var mdgriffith$elm_style_animation$Animation$Model$ClockwiseArc = function (a) {
	return {$: 'ClockwiseArc', a: a};
};
var mdgriffith$elm_style_animation$Animation$Model$Close = {$: 'Close'};
var mdgriffith$elm_style_animation$Animation$Model$Curve = function (a) {
	return {$: 'Curve', a: a};
};
var mdgriffith$elm_style_animation$Animation$Model$CurveTo = function (a) {
	return {$: 'CurveTo', a: a};
};
var mdgriffith$elm_style_animation$Animation$Model$Horizontal = function (a) {
	return {$: 'Horizontal', a: a};
};
var mdgriffith$elm_style_animation$Animation$Model$HorizontalTo = function (a) {
	return {$: 'HorizontalTo', a: a};
};
var mdgriffith$elm_style_animation$Animation$Model$Line = F2(
	function (a, b) {
		return {$: 'Line', a: a, b: b};
	});
var mdgriffith$elm_style_animation$Animation$Model$LineTo = F2(
	function (a, b) {
		return {$: 'LineTo', a: a, b: b};
	});
var mdgriffith$elm_style_animation$Animation$Model$Move = F2(
	function (a, b) {
		return {$: 'Move', a: a, b: b};
	});
var mdgriffith$elm_style_animation$Animation$Model$MoveTo = F2(
	function (a, b) {
		return {$: 'MoveTo', a: a, b: b};
	});
var mdgriffith$elm_style_animation$Animation$Model$Quadratic = function (a) {
	return {$: 'Quadratic', a: a};
};
var mdgriffith$elm_style_animation$Animation$Model$QuadraticTo = function (a) {
	return {$: 'QuadraticTo', a: a};
};
var mdgriffith$elm_style_animation$Animation$Model$Smooth = function (a) {
	return {$: 'Smooth', a: a};
};
var mdgriffith$elm_style_animation$Animation$Model$SmoothQuadratic = function (a) {
	return {$: 'SmoothQuadratic', a: a};
};
var mdgriffith$elm_style_animation$Animation$Model$SmoothQuadraticTo = function (a) {
	return {$: 'SmoothQuadraticTo', a: a};
};
var mdgriffith$elm_style_animation$Animation$Model$SmoothTo = function (a) {
	return {$: 'SmoothTo', a: a};
};
var mdgriffith$elm_style_animation$Animation$Model$Vertical = function (a) {
	return {$: 'Vertical', a: a};
};
var mdgriffith$elm_style_animation$Animation$Model$VerticalTo = function (a) {
	return {$: 'VerticalTo', a: a};
};
var mdgriffith$elm_style_animation$Animation$Model$mapPathMotion = F2(
	function (fn, cmd) {
		var mapCoords = function (coords) {
			return A2(
				elm$core$List$map,
				function (_n1) {
					var x = _n1.a;
					var y = _n1.b;
					return _Utils_Tuple2(
						fn(x),
						fn(y));
				},
				coords);
		};
		switch (cmd.$) {
			case 'Move':
				var m1 = cmd.a;
				var m2 = cmd.b;
				return A2(
					mdgriffith$elm_style_animation$Animation$Model$Move,
					fn(m1),
					fn(m2));
			case 'MoveTo':
				var m1 = cmd.a;
				var m2 = cmd.b;
				return A2(
					mdgriffith$elm_style_animation$Animation$Model$MoveTo,
					fn(m1),
					fn(m2));
			case 'Line':
				var m1 = cmd.a;
				var m2 = cmd.b;
				return A2(
					mdgriffith$elm_style_animation$Animation$Model$Line,
					fn(m1),
					fn(m2));
			case 'LineTo':
				var m1 = cmd.a;
				var m2 = cmd.b;
				return A2(
					mdgriffith$elm_style_animation$Animation$Model$LineTo,
					fn(m1),
					fn(m2));
			case 'Horizontal':
				var motion = cmd.a;
				return mdgriffith$elm_style_animation$Animation$Model$Horizontal(
					fn(motion));
			case 'HorizontalTo':
				var motion = cmd.a;
				return mdgriffith$elm_style_animation$Animation$Model$HorizontalTo(
					fn(motion));
			case 'Vertical':
				var motion = cmd.a;
				return mdgriffith$elm_style_animation$Animation$Model$Vertical(
					fn(motion));
			case 'VerticalTo':
				var motion = cmd.a;
				return mdgriffith$elm_style_animation$Animation$Model$VerticalTo(
					fn(motion));
			case 'Curve':
				var control1 = cmd.a.control1;
				var control2 = cmd.a.control2;
				var point = cmd.a.point;
				return mdgriffith$elm_style_animation$Animation$Model$Curve(
					{
						control1: _Utils_Tuple2(
							fn(control1.a),
							fn(control1.b)),
						control2: _Utils_Tuple2(
							fn(control2.a),
							fn(control2.b)),
						point: _Utils_Tuple2(
							fn(point.a),
							fn(point.b))
					});
			case 'CurveTo':
				var control1 = cmd.a.control1;
				var control2 = cmd.a.control2;
				var point = cmd.a.point;
				return mdgriffith$elm_style_animation$Animation$Model$CurveTo(
					{
						control1: _Utils_Tuple2(
							fn(control1.a),
							fn(control1.b)),
						control2: _Utils_Tuple2(
							fn(control2.a),
							fn(control2.b)),
						point: _Utils_Tuple2(
							fn(point.a),
							fn(point.b))
					});
			case 'Quadratic':
				var control = cmd.a.control;
				var point = cmd.a.point;
				return mdgriffith$elm_style_animation$Animation$Model$Quadratic(
					{
						control: _Utils_Tuple2(
							fn(control.a),
							fn(control.b)),
						point: _Utils_Tuple2(
							fn(point.a),
							fn(point.b))
					});
			case 'QuadraticTo':
				var control = cmd.a.control;
				var point = cmd.a.point;
				return mdgriffith$elm_style_animation$Animation$Model$QuadraticTo(
					{
						control: _Utils_Tuple2(
							fn(control.a),
							fn(control.b)),
						point: _Utils_Tuple2(
							fn(point.a),
							fn(point.b))
					});
			case 'SmoothQuadratic':
				var coords = cmd.a;
				return mdgriffith$elm_style_animation$Animation$Model$SmoothQuadratic(
					mapCoords(coords));
			case 'SmoothQuadraticTo':
				var coords = cmd.a;
				return mdgriffith$elm_style_animation$Animation$Model$SmoothQuadraticTo(
					mapCoords(coords));
			case 'Smooth':
				var coords = cmd.a;
				return mdgriffith$elm_style_animation$Animation$Model$Smooth(
					mapCoords(coords));
			case 'SmoothTo':
				var coords = cmd.a;
				return mdgriffith$elm_style_animation$Animation$Model$SmoothTo(
					mapCoords(coords));
			case 'ClockwiseArc':
				var arc = cmd.a;
				return mdgriffith$elm_style_animation$Animation$Model$ClockwiseArc(
					function () {
						var y = arc.y;
						var x = arc.x;
						var startAngle = arc.startAngle;
						var radius = arc.radius;
						var endAngle = arc.endAngle;
						return _Utils_update(
							arc,
							{
								endAngle: fn(endAngle),
								radius: fn(radius),
								startAngle: fn(startAngle),
								x: fn(x),
								y: fn(y)
							});
					}());
			case 'AntiClockwiseArc':
				var arc = cmd.a;
				return mdgriffith$elm_style_animation$Animation$Model$AntiClockwiseArc(
					function () {
						var y = arc.y;
						var x = arc.x;
						var startAngle = arc.startAngle;
						var radius = arc.radius;
						var endAngle = arc.endAngle;
						return _Utils_update(
							arc,
							{
								endAngle: fn(endAngle),
								radius: fn(radius),
								startAngle: fn(startAngle),
								x: fn(x),
								y: fn(y)
							});
					}());
			default:
				return mdgriffith$elm_style_animation$Animation$Model$Close;
		}
	});
var mdgriffith$elm_style_animation$Animation$Model$mapToMotion = F2(
	function (fn, prop) {
		switch (prop.$) {
			case 'ExactProperty':
				var name = prop.a;
				var value = prop.b;
				return A2(mdgriffith$elm_style_animation$Animation$Model$ExactProperty, name, value);
			case 'ColorProperty':
				var name = prop.a;
				var m1 = prop.b;
				var m2 = prop.c;
				var m3 = prop.d;
				var m4 = prop.e;
				return A5(
					mdgriffith$elm_style_animation$Animation$Model$ColorProperty,
					name,
					fn(m1),
					fn(m2),
					fn(m3),
					fn(m4));
			case 'ShadowProperty':
				var name = prop.a;
				var inset = prop.b;
				var shadow = prop.c;
				var size = shadow.size;
				var red = shadow.red;
				var offsetY = shadow.offsetY;
				var offsetX = shadow.offsetX;
				var green = shadow.green;
				var blur = shadow.blur;
				var blue = shadow.blue;
				var alpha = shadow.alpha;
				return A3(
					mdgriffith$elm_style_animation$Animation$Model$ShadowProperty,
					name,
					inset,
					{
						alpha: fn(alpha),
						blue: fn(blue),
						blur: fn(blur),
						green: fn(green),
						offsetX: fn(offsetX),
						offsetY: fn(offsetY),
						red: fn(red),
						size: fn(size)
					});
			case 'Property':
				var name = prop.a;
				var m1 = prop.b;
				return A2(
					mdgriffith$elm_style_animation$Animation$Model$Property,
					name,
					fn(m1));
			case 'Property2':
				var name = prop.a;
				var m1 = prop.b;
				var m2 = prop.c;
				return A3(
					mdgriffith$elm_style_animation$Animation$Model$Property2,
					name,
					fn(m1),
					fn(m2));
			case 'Property3':
				var name = prop.a;
				var m1 = prop.b;
				var m2 = prop.c;
				var m3 = prop.d;
				return A4(
					mdgriffith$elm_style_animation$Animation$Model$Property3,
					name,
					fn(m1),
					fn(m2),
					fn(m3));
			case 'Property4':
				var name = prop.a;
				var m1 = prop.b;
				var m2 = prop.c;
				var m3 = prop.d;
				var m4 = prop.e;
				return A5(
					mdgriffith$elm_style_animation$Animation$Model$Property4,
					name,
					fn(m1),
					fn(m2),
					fn(m3),
					fn(m4));
			case 'AngleProperty':
				var name = prop.a;
				var m1 = prop.b;
				return A2(
					mdgriffith$elm_style_animation$Animation$Model$AngleProperty,
					name,
					fn(m1));
			case 'Points':
				var ms = prop.a;
				return mdgriffith$elm_style_animation$Animation$Model$Points(
					A2(
						elm$core$List$map,
						function (_n1) {
							var x = _n1.a;
							var y = _n1.b;
							return _Utils_Tuple2(
								fn(x),
								fn(y));
						},
						ms));
			default:
				var cmds = prop.a;
				return mdgriffith$elm_style_animation$Animation$Model$Path(
					A2(
						elm$core$List$map,
						mdgriffith$elm_style_animation$Animation$Model$mapPathMotion(fn),
						cmds));
		}
	});
var elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return elm$core$Maybe$Just(x);
	} else {
		return elm$core$Maybe$Nothing;
	}
};
var elm$core$List$sortBy = _List_sortBy;
var elm$core$List$sort = function (xs) {
	return A2(elm$core$List$sortBy, elm$core$Basics$identity, xs);
};
var mdgriffith$elm_style_animation$Animation$Model$propertyName = function (prop) {
	switch (prop.$) {
		case 'ExactProperty':
			var name = prop.a;
			return name;
		case 'ColorProperty':
			var name = prop.a;
			return name;
		case 'ShadowProperty':
			var name = prop.a;
			return name;
		case 'Property':
			var name = prop.a;
			return name;
		case 'Property2':
			var name = prop.a;
			return name;
		case 'Property3':
			var name = prop.a;
			return name;
		case 'Property4':
			var name = prop.a;
			return name;
		case 'AngleProperty':
			var name = prop.a;
			return name;
		case 'Points':
			return 'points';
		default:
			return 'path';
	}
};
var mdgriffith$elm_style_animation$Animation$Render$dropWhile = F2(
	function (predicate, list) {
		dropWhile:
		while (true) {
			if (!list.b) {
				return _List_Nil;
			} else {
				var x = list.a;
				var xs = list.b;
				if (predicate(x)) {
					var $temp$predicate = predicate,
						$temp$list = xs;
					predicate = $temp$predicate;
					list = $temp$list;
					continue dropWhile;
				} else {
					return list;
				}
			}
		}
	});
var mdgriffith$elm_style_animation$Animation$Render$takeWhile = function (predicate) {
	var takeWhileMemo = F2(
		function (memo, list) {
			takeWhileMemo:
			while (true) {
				if (!list.b) {
					return elm$core$List$reverse(memo);
				} else {
					var x = list.a;
					var xs = list.b;
					if (predicate(x)) {
						var $temp$memo = A2(elm$core$List$cons, x, memo),
							$temp$list = xs;
						memo = $temp$memo;
						list = $temp$list;
						continue takeWhileMemo;
					} else {
						return elm$core$List$reverse(memo);
					}
				}
			}
		});
	return takeWhileMemo(_List_Nil);
};
var mdgriffith$elm_style_animation$Animation$Render$span = F2(
	function (p, xs) {
		return _Utils_Tuple2(
			A2(mdgriffith$elm_style_animation$Animation$Render$takeWhile, p, xs),
			A2(mdgriffith$elm_style_animation$Animation$Render$dropWhile, p, xs));
	});
var mdgriffith$elm_style_animation$Animation$Render$groupWhile = F2(
	function (eq, xs_) {
		if (!xs_.b) {
			return _List_Nil;
		} else {
			var x = xs_.a;
			var xs = xs_.b;
			var _n1 = A2(
				mdgriffith$elm_style_animation$Animation$Render$span,
				eq(x),
				xs);
			var ys = _n1.a;
			var zs = _n1.b;
			return A2(
				elm$core$List$cons,
				A2(elm$core$List$cons, x, ys),
				A2(mdgriffith$elm_style_animation$Animation$Render$groupWhile, eq, zs));
		}
	});
var elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var mdgriffith$elm_style_animation$Animation$Render$isTransformation = function (prop) {
	return A2(
		elm$core$List$member,
		mdgriffith$elm_style_animation$Animation$Model$propertyName(prop),
		_List_fromArray(
			['rotate', 'rotateX', 'rotateY', 'rotateZ', 'rotate3d', 'translate', 'translate3d', 'scale', 'scale3d']));
};
var mdgriffith$elm_style_animation$Animation$Render$warnForDoubleListedProperties = function (props) {
	var _n0 = A2(
		elm$core$List$map,
		function (propGroup) {
			var _n1 = elm$core$List$head(propGroup);
			if (_n1.$ === 'Nothing') {
				return '';
			} else {
				var name = _n1.a;
				return (elm$core$List$length(propGroup) > 1) ? '' : '';
			}
		},
		A2(
			mdgriffith$elm_style_animation$Animation$Render$groupWhile,
			elm$core$Basics$eq,
			elm$core$List$sort(
				A2(
					elm$core$List$map,
					mdgriffith$elm_style_animation$Animation$Model$propertyName,
					A2(
						elm$core$List$filter,
						function (prop) {
							return !mdgriffith$elm_style_animation$Animation$Render$isTransformation(prop);
						},
						props)))));
	return props;
};
var mdgriffith$elm_style_animation$Animation$styleWith = F2(
	function (interp, props) {
		return mdgriffith$elm_style_animation$Animation$initialState(
			A2(
				elm$core$List$map,
				mdgriffith$elm_style_animation$Animation$Model$mapToMotion(
					function (m) {
						return _Utils_update(
							m,
							{interpolation: interp});
					}),
				mdgriffith$elm_style_animation$Animation$Render$warnForDoubleListedProperties(props)));
	});
var author$project$Pages$Interior$initialContextMenuAnimationState = A2(
	mdgriffith$elm_style_animation$Animation$styleWith,
	author$project$Pages$Interior$contextMenuSpring,
	_List_fromArray(
		[
			mdgriffith$elm_style_animation$Animation$opacity(0)
		]));
var mdgriffith$elm_style_animation$Animation$length = F3(
	function (name, val, unit) {
		return A2(
			mdgriffith$elm_style_animation$Animation$Model$Property,
			name,
			A2(mdgriffith$elm_style_animation$Animation$initMotion, val, unit));
	});
var mdgriffith$elm_style_animation$Animation$lengthUnitName = function (unit) {
	switch (unit.$) {
		case 'NoUnit':
			return '';
		case 'Px':
			return 'px';
		case 'Percent':
			return '%';
		case 'Rem':
			return 'rem';
		case 'Em':
			return 'em';
		case 'Ex':
			return 'ex';
		case 'Ch':
			return 'ch';
		case 'Vh':
			return 'vh';
		case 'Vw':
			return 'vw';
		case 'Vmin':
			return 'vmin';
		case 'Vmax':
			return 'vmax';
		case 'Mm':
			return 'mm';
		case 'Cm':
			return 'cm';
		case 'In':
			return 'in';
		case 'Pt':
			return 'pt';
		default:
			return 'pc';
	}
};
var mdgriffith$elm_style_animation$Animation$height = function (_n0) {
	var val = _n0.a;
	var len = _n0.b;
	return A3(
		mdgriffith$elm_style_animation$Animation$length,
		'height',
		val,
		mdgriffith$elm_style_animation$Animation$lengthUnitName(len));
};
var mdgriffith$elm_style_animation$Animation$Length = F2(
	function (a, b) {
		return {$: 'Length', a: a, b: b};
	});
var mdgriffith$elm_style_animation$Animation$Px = {$: 'Px'};
var mdgriffith$elm_style_animation$Animation$px = function (myPx) {
	return A2(mdgriffith$elm_style_animation$Animation$Length, myPx, mdgriffith$elm_style_animation$Animation$Px);
};
var author$project$Pages$Interior$initialContextMenuOptionAnimationState = A2(
	mdgriffith$elm_style_animation$Animation$styleWith,
	author$project$Pages$Interior$contextMenuSpring,
	_List_fromArray(
		[
			mdgriffith$elm_style_animation$Animation$height(
			mdgriffith$elm_style_animation$Animation$px(0))
		]));
var author$project$Pages$Interior$drawerWidth = 340;
var mdgriffith$elm_style_animation$Animation$marginLeft = function (_n0) {
	var val = _n0.a;
	var len = _n0.b;
	return A3(
		mdgriffith$elm_style_animation$Animation$length,
		'margin-left',
		val,
		mdgriffith$elm_style_animation$Animation$lengthUnitName(len));
};
var author$project$Pages$Interior$initialDrawerState = _List_fromArray(
	[
		mdgriffith$elm_style_animation$Animation$marginLeft(
		mdgriffith$elm_style_animation$Animation$px(author$project$Pages$Interior$drawerWidth))
	]);
var author$project$Pages$Interior$init = function (session) {
	var modelWithoutComfortIssue = {
		comfortIndicatorBurstAnimations: _List_Nil,
		comfortIssueCache: elm$core$Maybe$Nothing,
		contextMenuAnimationState: author$project$Pages$Interior$initialContextMenuAnimationState,
		contextMenuOptionAnimationState: author$project$Pages$Interior$initialContextMenuOptionAnimationState,
		currentMouseDownLocation: author$project$Pages$Interior$UnknownMouseDownLocation,
		currentMouseMovePosition: elm$core$Maybe$Nothing,
		dragAndDropState: author$project$Pages$Interior$NotDragging,
		drawerAnimationState: A2(
			mdgriffith$elm_style_animation$Animation$styleWith,
			mdgriffith$elm_style_animation$Animation$spring(
				{damping: 60, stiffness: 900}),
			author$project$Pages$Interior$initialDrawerState),
		hasWindowSills: true,
		itemContextMenu: elm$core$Maybe$Nothing,
		lastMouseDownPosition: elm$core$Maybe$Nothing,
		latestDrawerContent: author$project$Pages$Interior$AddEquipment,
		level: author$project$Architecture$Equipment$Downstairs,
		nextUniqueId: 0,
		pixelsPerMillimeter: author$project$Grid$Units$defaultPixelsPerMillimeter,
		session: session,
		uiMode: author$project$Pages$Interior$Default,
		viewportOffset: {x: 0, y: 0}
	};
	return _Utils_update(
		modelWithoutComfortIssue,
		{
			comfortIssueCache: author$project$Pages$Interior$comfortIssue(modelWithoutComfortIssue)
		});
};
var elm$core$Platform$Cmd$batch = _Platform_batch;
var elm$core$Platform$Cmd$none = elm$core$Platform$Cmd$batch(_List_Nil);
var author$project$Main$changeRouteTo = F2(
	function (maybeRoute, model) {
		var session = author$project$Main$toSession(model);
		if (maybeRoute.$ === 'Just') {
			if (maybeRoute.a.$ === 'Interior') {
				var _n1 = maybeRoute.a;
				return _Utils_Tuple2(
					author$project$Main$Interior(
						author$project$Pages$Interior$init(session)),
					elm$core$Platform$Cmd$none);
			} else {
				var _n2 = maybeRoute.a;
				return _Utils_Tuple2(
					author$project$Main$Layout(session),
					elm$core$Platform$Cmd$none);
			}
		} else {
			return _Utils_Tuple2(
				author$project$Main$NotFound(session),
				elm$core$Platform$Cmd$none);
		}
	});
var author$project$Route$Interior = {$: 'Interior'};
var author$project$Route$Layout = {$: 'Layout'};
var elm$url$Url$Parser$Parser = function (a) {
	return {$: 'Parser', a: a};
};
var elm$url$Url$Parser$State = F5(
	function (visited, unvisited, params, frag, value) {
		return {frag: frag, params: params, unvisited: unvisited, value: value, visited: visited};
	});
var elm$url$Url$Parser$mapState = F2(
	function (func, _n0) {
		var visited = _n0.visited;
		var unvisited = _n0.unvisited;
		var params = _n0.params;
		var frag = _n0.frag;
		var value = _n0.value;
		return A5(
			elm$url$Url$Parser$State,
			visited,
			unvisited,
			params,
			frag,
			func(value));
	});
var elm$url$Url$Parser$map = F2(
	function (subValue, _n0) {
		var parseArg = _n0.a;
		return elm$url$Url$Parser$Parser(
			function (_n1) {
				var visited = _n1.visited;
				var unvisited = _n1.unvisited;
				var params = _n1.params;
				var frag = _n1.frag;
				var value = _n1.value;
				return A2(
					elm$core$List$map,
					elm$url$Url$Parser$mapState(value),
					parseArg(
						A5(elm$url$Url$Parser$State, visited, unvisited, params, frag, subValue)));
			});
	});
var elm$core$List$concatMap = F2(
	function (f, list) {
		return elm$core$List$concat(
			A2(elm$core$List$map, f, list));
	});
var elm$url$Url$Parser$oneOf = function (parsers) {
	return elm$url$Url$Parser$Parser(
		function (state) {
			return A2(
				elm$core$List$concatMap,
				function (_n0) {
					var parser = _n0.a;
					return parser(state);
				},
				parsers);
		});
};
var elm$url$Url$Parser$s = function (str) {
	return elm$url$Url$Parser$Parser(
		function (_n0) {
			var visited = _n0.visited;
			var unvisited = _n0.unvisited;
			var params = _n0.params;
			var frag = _n0.frag;
			var value = _n0.value;
			if (!unvisited.b) {
				return _List_Nil;
			} else {
				var next = unvisited.a;
				var rest = unvisited.b;
				return _Utils_eq(next, str) ? _List_fromArray(
					[
						A5(
						elm$url$Url$Parser$State,
						A2(elm$core$List$cons, next, visited),
						rest,
						params,
						frag,
						value)
					]) : _List_Nil;
			}
		});
};
var elm$url$Url$Parser$slash = F2(
	function (_n0, _n1) {
		var parseBefore = _n0.a;
		var parseAfter = _n1.a;
		return elm$url$Url$Parser$Parser(
			function (state) {
				return A2(
					elm$core$List$concatMap,
					parseAfter,
					parseBefore(state));
			});
	});
var author$project$Route$route = elm$url$Url$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			elm$url$Url$Parser$map,
			author$project$Route$Interior,
			A2(
				elm$url$Url$Parser$slash,
				elm$url$Url$Parser$s('customize'),
				elm$url$Url$Parser$s('p4oWJcZX8o'))),
			A2(
			elm$url$Url$Parser$map,
			author$project$Route$Layout,
			elm$url$Url$Parser$s('layout'))
		]));
var elm$url$Url$Parser$getFirstMatch = function (states) {
	getFirstMatch:
	while (true) {
		if (!states.b) {
			return elm$core$Maybe$Nothing;
		} else {
			var state = states.a;
			var rest = states.b;
			var _n1 = state.unvisited;
			if (!_n1.b) {
				return elm$core$Maybe$Just(state.value);
			} else {
				if ((_n1.a === '') && (!_n1.b.b)) {
					return elm$core$Maybe$Just(state.value);
				} else {
					var $temp$states = rest;
					states = $temp$states;
					continue getFirstMatch;
				}
			}
		}
	}
};
var elm$url$Url$Parser$removeFinalEmpty = function (segments) {
	if (!segments.b) {
		return _List_Nil;
	} else {
		if ((segments.a === '') && (!segments.b.b)) {
			return _List_Nil;
		} else {
			var segment = segments.a;
			var rest = segments.b;
			return A2(
				elm$core$List$cons,
				segment,
				elm$url$Url$Parser$removeFinalEmpty(rest));
		}
	}
};
var elm$url$Url$Parser$preparePath = function (path) {
	var _n0 = A2(elm$core$String$split, '/', path);
	if (_n0.b && (_n0.a === '')) {
		var segments = _n0.b;
		return elm$url$Url$Parser$removeFinalEmpty(segments);
	} else {
		var segments = _n0;
		return elm$url$Url$Parser$removeFinalEmpty(segments);
	}
};
var elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _n1 = A2(elm$core$Basics$compare, targetKey, key);
				switch (_n1.$) {
					case 'LT':
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 'EQ':
						return elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.e.d.$ === 'RBNode_elm_builtin') && (dict.e.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _n1 = dict.d;
			var lClr = _n1.a;
			var lK = _n1.b;
			var lV = _n1.c;
			var lLeft = _n1.d;
			var lRight = _n1.e;
			var _n2 = dict.e;
			var rClr = _n2.a;
			var rK = _n2.b;
			var rV = _n2.c;
			var rLeft = _n2.d;
			var _n3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _n2.e;
			return A5(
				elm$core$Dict$RBNode_elm_builtin,
				elm$core$Dict$Red,
				rlK,
				rlV,
				A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Black,
					k,
					v,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),
					rlL),
				A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _n4 = dict.d;
			var lClr = _n4.a;
			var lK = _n4.b;
			var lV = _n4.c;
			var lLeft = _n4.d;
			var lRight = _n4.e;
			var _n5 = dict.e;
			var rClr = _n5.a;
			var rK = _n5.b;
			var rV = _n5.c;
			var rLeft = _n5.d;
			var rRight = _n5.e;
			if (clr.$ === 'Black') {
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Black,
					k,
					v,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Black,
					k,
					v,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) && (dict.e.$ === 'RBNode_elm_builtin')) {
		if ((dict.d.d.$ === 'RBNode_elm_builtin') && (dict.d.d.a.$ === 'Red')) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _n1 = dict.d;
			var lClr = _n1.a;
			var lK = _n1.b;
			var lV = _n1.c;
			var _n2 = _n1.d;
			var _n3 = _n2.a;
			var llK = _n2.b;
			var llV = _n2.c;
			var llLeft = _n2.d;
			var llRight = _n2.e;
			var lRight = _n1.e;
			var _n4 = dict.e;
			var rClr = _n4.a;
			var rK = _n4.b;
			var rV = _n4.c;
			var rLeft = _n4.d;
			var rRight = _n4.e;
			return A5(
				elm$core$Dict$RBNode_elm_builtin,
				elm$core$Dict$Red,
				lK,
				lV,
				A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, llK, llV, llLeft, llRight),
				A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Black,
					k,
					v,
					lRight,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _n5 = dict.d;
			var lClr = _n5.a;
			var lK = _n5.b;
			var lV = _n5.c;
			var lLeft = _n5.d;
			var lRight = _n5.e;
			var _n6 = dict.e;
			var rClr = _n6.a;
			var rK = _n6.b;
			var rV = _n6.c;
			var rLeft = _n6.d;
			var rRight = _n6.e;
			if (clr.$ === 'Black') {
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Black,
					k,
					v,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight));
			} else {
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					elm$core$Dict$Black,
					k,
					v,
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, lK, lV, lLeft, lRight),
					A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Red')) {
			var _n1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Red, key, value, lRight, right));
		} else {
			_n2$2:
			while (true) {
				if ((right.$ === 'RBNode_elm_builtin') && (right.a.$ === 'Black')) {
					if (right.d.$ === 'RBNode_elm_builtin') {
						if (right.d.a.$ === 'Black') {
							var _n3 = right.a;
							var _n4 = right.d;
							var _n5 = _n4.a;
							return elm$core$Dict$moveRedRight(dict);
						} else {
							break _n2$2;
						}
					} else {
						var _n6 = right.a;
						var _n7 = right.d;
						return elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _n2$2;
				}
			}
			return dict;
		}
	});
var elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === 'RBNode_elm_builtin') && (dict.d.$ === 'RBNode_elm_builtin')) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor.$ === 'Black') {
			if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
				var _n3 = lLeft.a;
				return A5(
					elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					elm$core$Dict$removeMin(left),
					right);
			} else {
				var _n4 = elm$core$Dict$moveRedLeft(dict);
				if (_n4.$ === 'RBNode_elm_builtin') {
					var nColor = _n4.a;
					var nKey = _n4.b;
					var nValue = _n4.c;
					var nLeft = _n4.d;
					var nRight = _n4.e;
					return A5(
						elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === 'RBNode_elm_builtin') && (left.a.$ === 'Black')) {
					var _n4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === 'RBNode_elm_builtin') && (lLeft.a.$ === 'Red')) {
						var _n6 = lLeft.a;
						return A5(
							elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2(elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _n7 = elm$core$Dict$moveRedLeft(dict);
						if (_n7.$ === 'RBNode_elm_builtin') {
							var nColor = _n7.a;
							var nKey = _n7.b;
							var nValue = _n7.c;
							var nLeft = _n7.d;
							var nRight = _n7.e;
							return A5(
								elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2(elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2(elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7(elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === 'RBNode_elm_builtin') {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _n1 = elm$core$Dict$getMin(right);
				if (_n1.$ === 'RBNode_elm_builtin') {
					var minKey = _n1.b;
					var minValue = _n1.c;
					return A5(
						elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						elm$core$Dict$removeMin(right));
				} else {
					return elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2(elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var elm$core$Dict$remove = F2(
	function (key, dict) {
		var _n0 = A2(elm$core$Dict$removeHelp, key, dict);
		if ((_n0.$ === 'RBNode_elm_builtin') && (_n0.a.$ === 'Red')) {
			var _n1 = _n0.a;
			var k = _n0.b;
			var v = _n0.c;
			var l = _n0.d;
			var r = _n0.e;
			return A5(elm$core$Dict$RBNode_elm_builtin, elm$core$Dict$Black, k, v, l, r);
		} else {
			var x = _n0;
			return x;
		}
	});
var elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _n0 = alter(
			A2(elm$core$Dict$get, targetKey, dictionary));
		if (_n0.$ === 'Just') {
			var value = _n0.a;
			return A3(elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2(elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var elm$url$Url$percentDecode = _Url_percentDecode;
var elm$url$Url$Parser$addToParametersHelp = F2(
	function (value, maybeList) {
		if (maybeList.$ === 'Nothing') {
			return elm$core$Maybe$Just(
				_List_fromArray(
					[value]));
		} else {
			var list = maybeList.a;
			return elm$core$Maybe$Just(
				A2(elm$core$List$cons, value, list));
		}
	});
var elm$url$Url$Parser$addParam = F2(
	function (segment, dict) {
		var _n0 = A2(elm$core$String$split, '=', segment);
		if ((_n0.b && _n0.b.b) && (!_n0.b.b.b)) {
			var rawKey = _n0.a;
			var _n1 = _n0.b;
			var rawValue = _n1.a;
			var _n2 = elm$url$Url$percentDecode(rawKey);
			if (_n2.$ === 'Nothing') {
				return dict;
			} else {
				var key = _n2.a;
				var _n3 = elm$url$Url$percentDecode(rawValue);
				if (_n3.$ === 'Nothing') {
					return dict;
				} else {
					var value = _n3.a;
					return A3(
						elm$core$Dict$update,
						key,
						elm$url$Url$Parser$addToParametersHelp(value),
						dict);
				}
			}
		} else {
			return dict;
		}
	});
var elm$url$Url$Parser$prepareQuery = function (maybeQuery) {
	if (maybeQuery.$ === 'Nothing') {
		return elm$core$Dict$empty;
	} else {
		var qry = maybeQuery.a;
		return A3(
			elm$core$List$foldr,
			elm$url$Url$Parser$addParam,
			elm$core$Dict$empty,
			A2(elm$core$String$split, '&', qry));
	}
};
var elm$url$Url$Parser$parse = F2(
	function (_n0, url) {
		var parser = _n0.a;
		return elm$url$Url$Parser$getFirstMatch(
			parser(
				A5(
					elm$url$Url$Parser$State,
					_List_Nil,
					elm$url$Url$Parser$preparePath(url.path),
					elm$url$Url$Parser$prepareQuery(url.query),
					url.fragment,
					elm$core$Basics$identity)));
	});
var author$project$Route$fromUrl = function (url) {
	return A2(elm$url$Url$Parser$parse, author$project$Route$route, url);
};
var author$project$Architecture$Door$Basic = {$: 'Basic'};
var author$project$Architecture$Door$GlassFullHeight = {$: 'GlassFullHeight'};
var author$project$Architecture$Door$HingesOnLeft = {$: 'HingesOnLeft'};
var author$project$Architecture$Door$HingesOnRight = {$: 'HingesOnRight'};
var author$project$Architecture$Door$SouthOrEast = {$: 'SouthOrEast'};
var author$project$Architecture$Door$Door = function (a) {
	return {$: 'Door', a: a};
};
var author$project$Architecture$Door$with = F4(
	function (config, doorOpenSide, doorOrientation, doorOffset) {
		return author$project$Architecture$Door$Door(
			{clearance: config.clearance, doorType: config.doorType, offsetFromEnd: doorOffset, openSide: doorOpenSide, orientation: doorOrientation});
	});
var author$project$Architecture$Equipment$BarTable = {$: 'BarTable'};
var author$project$Architecture$Equipment$BuiltInFridge = F2(
	function (a, b) {
		return {$: 'BuiltInFridge', a: a, b: b};
	});
var author$project$Architecture$Equipment$Curtain = F2(
	function (a, b) {
		return {$: 'Curtain', a: a, b: b};
	});
var author$project$Architecture$Equipment$Desk = F2(
	function (a, b) {
		return {$: 'Desk', a: a, b: b};
	});
var author$project$Architecture$Equipment$DiningTable = function (a) {
	return {$: 'DiningTable', a: a};
};
var author$project$Architecture$Equipment$Dishwasher = {$: 'Dishwasher'};
var author$project$Architecture$Equipment$DrawnAcrossRoom = {$: 'DrawnAcrossRoom'};
var author$project$Architecture$Equipment$Kitchenette = function (a) {
	return {$: 'Kitchenette', a: a};
};
var author$project$Architecture$Equipment$LoungeChairWithSideTable = {$: 'LoungeChairWithSideTable'};
var author$project$Architecture$Equipment$LoungeWithSofaAndTwoArmchairs = {$: 'LoungeWithSofaAndTwoArmchairs'};
var author$project$Architecture$Equipment$NoDeskPanel = {$: 'NoDeskPanel'};
var author$project$Architecture$Equipment$Oven = {$: 'Oven'};
var author$project$Architecture$Equipment$Pegwall = function (a) {
	return {$: 'Pegwall', a: a};
};
var author$project$Architecture$Equipment$Shelving = function (a) {
	return {$: 'Shelving', a: a};
};
var author$project$Architecture$Equipment$Sink = function (a) {
	return {$: 'Sink', a: a};
};
var author$project$Architecture$Equipment$Stove = function (a) {
	return {$: 'Stove', a: a};
};
var author$project$Architecture$Equipment$TableWithoutSeatsAtHead = function (a) {
	return {$: 'TableWithoutSeatsAtHead', a: a};
};
var author$project$Architecture$Equipment$VerticalDeskPanel = function (a) {
	return {$: 'VerticalDeskPanel', a: a};
};
var author$project$Architecture$Equipment$Equipment = function (a) {
	return {$: 'Equipment', a: a};
};
var author$project$Architecture$Equipment$equipment = F3(
	function (equipmentTypeValue, rotationValue, translationValue) {
		return author$project$Architecture$Equipment$Equipment(
			{equipmentType: equipmentTypeValue, rotation: rotationValue, translation: translationValue});
	});
var author$project$Architecture$ExistingSlab$ActiveFloorArea = {$: 'ActiveFloorArea'};
var author$project$Architecture$ExistingSlab$ExistingSlab = function (a) {
	return {$: 'ExistingSlab', a: a};
};
var author$project$Architecture$ExistingSlab$activeFloorAreaWith = function (_n0) {
	var southWestCorner = _n0.southWestCorner;
	var northEastCorner = _n0.northEastCorner;
	return author$project$Architecture$ExistingSlab$ExistingSlab(
		{northEastCorner: northEastCorner, slabType: author$project$Architecture$ExistingSlab$ActiveFloorArea, southWestCorner: southWestCorner});
};
var author$project$Architecture$ExistingWall$ToExterior = {$: 'ToExterior'};
var author$project$Architecture$ExistingWall$East = {$: 'East'};
var author$project$Architecture$ExistingWall$ExistingWall = function (a) {
	return {$: 'ExistingWall', a: a};
};
var author$project$Architecture$ExistingWall$North = {$: 'North'};
var author$project$Architecture$ExistingWall$South = {$: 'South'};
var author$project$Architecture$ExistingWall$West = {$: 'West'};
var author$project$Architecture$ExistingWall$betweenPoints = F3(
	function (_n0, startPoint, endPoint) {
		var thickness = _n0.thickness;
		var _n1 = ianmackenzie$elm_geometry$Vector2d$components(
			A2(ianmackenzie$elm_geometry$Vector2d$from, startPoint, endPoint));
		var xComponent = _n1.a;
		var yComponent = _n1.b;
		var direction = (_Utils_cmp(
			elm$core$Basics$abs(xComponent),
			elm$core$Basics$abs(yComponent)) > 0) ? ((xComponent > 0) ? author$project$Architecture$ExistingWall$East : author$project$Architecture$ExistingWall$West) : ((yComponent < 0) ? author$project$Architecture$ExistingWall$South : author$project$Architecture$ExistingWall$North);
		var wallLength = function () {
			switch (direction.$) {
				case 'East':
					return xComponent;
				case 'West':
					return -xComponent;
				case 'South':
					return -yComponent;
				default:
					return yComponent;
			}
		}();
		return author$project$Architecture$ExistingWall$ExistingWall(
			{direction: direction, doors: _List_Nil, length: wallLength, origin: startPoint, thickness: thickness, windows: _List_Nil});
	});
var author$project$Architecture$ExistingWall$ExistingDoor = function (a) {
	return {$: 'ExistingDoor', a: a};
};
var author$project$Architecture$ExistingWall$withDoor = F5(
	function (_n0, openSide, orientation, offset, _n1) {
		var clearance = _n0.clearance;
		var inset = _n0.inset;
		var openingToClearance = _n0.openingToClearance;
		var properties = _n1.a;
		return author$project$Architecture$ExistingWall$ExistingWall(
			_Utils_update(
				properties,
				{
					doors: A2(
						elm$core$List$cons,
						author$project$Architecture$ExistingWall$ExistingDoor(
							{clearance: clearance, inset: inset, offset: offset, openSide: openSide, openingToClearance: openingToClearance, orientation: orientation}),
						properties.doors)
				}));
	});
var author$project$Architecture$ExistingWall$RegularWindow = {$: 'RegularWindow'};
var author$project$Architecture$ExistingWall$ExistingWindow = function (a) {
	return {$: 'ExistingWindow', a: a};
};
var author$project$Architecture$ExistingWall$withWindowOfType = F4(
	function (windowType, _n0, offset, _n1) {
		var width = _n0.width;
		var properties = _n1.a;
		return author$project$Architecture$ExistingWall$ExistingWall(
			_Utils_update(
				properties,
				{
					windows: A2(
						elm$core$List$cons,
						author$project$Architecture$ExistingWall$ExistingWindow(
							{offset: offset, width: width, windowType: windowType}),
						properties.windows)
				}));
	});
var author$project$Architecture$ExistingWall$withWindow = author$project$Architecture$ExistingWall$withWindowOfType(author$project$Architecture$ExistingWall$RegularWindow);
var author$project$Architecture$Item$EquipmentItem = function (a) {
	return {$: 'EquipmentItem', a: a};
};
var author$project$Architecture$Item$Item = function (a) {
	return {$: 'Item', a: a};
};
var author$project$Architecture$Item$withEquipment = F2(
	function (equipment, session) {
		return _Utils_update(
			session,
			{
				nextItemId: session.nextItemId + 1,
				placedItems: A2(
					elm$core$List$cons,
					author$project$Architecture$Item$Item(
						{
							id: session.nextItemId,
							itemType: author$project$Architecture$Item$EquipmentItem(equipment),
							level: author$project$Architecture$Equipment$Downstairs
						}),
					session.placedItems)
			});
	});
var author$project$Architecture$Item$WallItem = function (a) {
	return {$: 'WallItem', a: a};
};
var author$project$Architecture$Item$withWall = F2(
	function (wall, session) {
		return _Utils_update(
			session,
			{
				nextItemId: session.nextItemId + 1,
				placedItems: A2(
					elm$core$List$cons,
					author$project$Architecture$Item$Item(
						{
							id: session.nextItemId,
							itemType: author$project$Architecture$Item$WallItem(wall),
							level: author$project$Architecture$Equipment$Downstairs
						}),
					session.placedItems)
			});
	});
var author$project$Architecture$Wall$GlassPartition = {$: 'GlassPartition'};
var author$project$Architecture$Wall$NorthToSouth = {$: 'NorthToSouth'};
var author$project$Architecture$Wall$Wall = function (a) {
	return {$: 'Wall', a: a};
};
var author$project$Architecture$Wall$WestToEast = {$: 'WestToEast'};
var author$project$Architecture$Wall$betweenControlPoints = F3(
	function (wallTypeOption, pointA, pointB) {
		var wallThickness = author$project$Architecture$Wall$wallTypeThickness(wallTypeOption);
		var wallDirection = (_Utils_cmp(
			elm$core$Basics$abs(
				author$project$Grid$Point$xCoordinate(pointA) - author$project$Grid$Point$xCoordinate(pointB)),
			elm$core$Basics$abs(
				author$project$Grid$Point$yCoordinate(pointA) - author$project$Grid$Point$yCoordinate(pointB))) > 0) ? author$project$Architecture$Wall$WestToEast : author$project$Architecture$Wall$NorthToSouth;
		var wallLength = function () {
			if (wallDirection.$ === 'WestToEast') {
				return elm$core$Basics$abs(
					author$project$Grid$Point$xCoordinate(pointA) - author$project$Grid$Point$xCoordinate(pointB)) + wallThickness;
			} else {
				return elm$core$Basics$abs(
					author$project$Grid$Point$yCoordinate(pointA) - author$project$Grid$Point$yCoordinate(pointB)) + wallThickness;
			}
		}();
		var southEastCorner = function () {
			if (wallDirection.$ === 'WestToEast') {
				return (_Utils_cmp(
					author$project$Grid$Point$xCoordinate(pointA),
					author$project$Grid$Point$xCoordinate(pointB)) < 1) ? pointA : A2(
					author$project$Grid$Point$gridPoint,
					author$project$Grid$Point$xCoordinate(pointB),
					author$project$Grid$Point$yCoordinate(pointA));
			} else {
				return (_Utils_cmp(
					author$project$Grid$Point$yCoordinate(pointA),
					author$project$Grid$Point$yCoordinate(pointB)) < 1) ? pointA : A2(
					author$project$Grid$Point$gridPoint,
					author$project$Grid$Point$xCoordinate(pointA),
					author$project$Grid$Point$yCoordinate(pointB));
			}
		}();
		var halfWallThickness = (wallThickness / 2) | 0;
		var originToSouthEastCorner = A2(
			author$project$Grid$Vector$gridVector,
			author$project$Grid$Point$xCoordinate(southEastCorner) - halfWallThickness,
			author$project$Grid$Point$yCoordinate(southEastCorner) - halfWallThickness);
		return author$project$Architecture$Wall$Wall(
			{direction: wallDirection, doors: elm$core$Dict$empty, length: wallLength, nextDoorId: 0, originToSouthEastCorner: originToSouthEastCorner, wallType: wallTypeOption});
	});
var author$project$Architecture$Wall$withDoor = F2(
	function (door, _n0) {
		var wallProperties = _n0.a;
		return author$project$Architecture$Wall$Wall(
			_Utils_update(
				wallProperties,
				{
					doors: A3(elm$core$Dict$insert, wallProperties.nextDoorId, door, wallProperties.doors),
					nextDoorId: wallProperties.nextDoorId + 1
				}));
	});
var author$project$Architecture$ExistingItem$ExistingSlab = function (a) {
	return {$: 'ExistingSlab', a: a};
};
var author$project$Architecture$ExistingItem$slab = author$project$Architecture$ExistingItem$ExistingSlab;
var author$project$Session$withExistingSlab = F2(
	function (existingSlab, session) {
		return _Utils_update(
			session,
			{
				existingItems: A2(
					elm$core$List$cons,
					author$project$Architecture$ExistingItem$slab(existingSlab),
					session.existingItems)
			});
	});
var author$project$Architecture$ExistingItem$ExistingWall = function (a) {
	return {$: 'ExistingWall', a: a};
};
var author$project$Architecture$ExistingItem$wall = author$project$Architecture$ExistingItem$ExistingWall;
var author$project$Session$withExistingWall = F2(
	function (existingWall, session) {
		return _Utils_update(
			session,
			{
				existingItems: A2(
					elm$core$List$cons,
					author$project$Architecture$ExistingItem$wall(existingWall),
					session.existingItems)
			});
	});
var author$project$Session$RtckLoft$withInitialItems = function (session) {
	var withExteriorWindow = author$project$Architecture$ExistingWall$withWindow(
		{width: 1800});
	var withEntrance = A2(
		author$project$Architecture$ExistingWall$withDoor,
		{clearance: 900, inset: 150, openingToClearance: 50},
		author$project$Architecture$ExistingWall$ToExterior);
	var phoneBoothDoor = author$project$Architecture$Door$with(
		{clearance: 8, doorType: author$project$Architecture$Door$GlassFullHeight});
	var doorBetweenRooms = author$project$Architecture$Door$with(
		{clearance: 9, doorType: author$project$Architecture$Door$Basic});
	return A2(
		author$project$Architecture$Item$withEquipment,
		A3(
			author$project$Architecture$Equipment$equipment,
			author$project$Architecture$Equipment$Shelving(41),
			elm$core$Maybe$Nothing,
			A2(author$project$Grid$Vector$gridVector, 72, -39)),
		A2(
			author$project$Architecture$Item$withEquipment,
			A3(
				author$project$Architecture$Equipment$equipment,
				author$project$Architecture$Equipment$Shelving(24),
				elm$core$Maybe$Nothing,
				A2(author$project$Grid$Vector$gridVector, 72, 7)),
			A2(
				author$project$Architecture$Item$withEquipment,
				A3(
					author$project$Architecture$Equipment$equipment,
					author$project$Architecture$Equipment$Shelving(24),
					elm$core$Maybe$Nothing,
					A2(author$project$Grid$Vector$gridVector, 72, 44)),
				A2(
					author$project$Architecture$Item$withEquipment,
					A3(
						author$project$Architecture$Equipment$equipment,
						author$project$Architecture$Equipment$Shelving(15),
						elm$core$Maybe$Nothing,
						A2(author$project$Grid$Vector$gridVector, 72, 76)),
					A2(
						author$project$Architecture$Item$withEquipment,
						A3(
							author$project$Architecture$Equipment$equipment,
							A2(
								author$project$Architecture$Equipment$Desk,
								author$project$Architecture$Equipment$NoDeskPanel,
								{
									chairOffsets: _List_fromArray(
										[7]),
									length: 14,
									width: 7
								}),
							elm$core$Maybe$Just(author$project$Grid$Rotation$HalfTurn),
							A2(author$project$Grid$Vector$gridVector, 28, 76)),
						A2(
							author$project$Architecture$Item$withEquipment,
							A3(
								author$project$Architecture$Equipment$equipment,
								A2(
									author$project$Architecture$Equipment$Desk,
									author$project$Architecture$Equipment$NoDeskPanel,
									{
										chairOffsets: _List_fromArray(
											[7]),
										length: 14,
										width: 7
									}),
								elm$core$Maybe$Just(author$project$Grid$Rotation$HalfTurn),
								A2(author$project$Grid$Vector$gridVector, 52, 76)),
							A2(
								author$project$Architecture$Item$withEquipment,
								A3(
									author$project$Architecture$Equipment$equipment,
									A2(
										author$project$Architecture$Equipment$Desk,
										author$project$Architecture$Equipment$NoDeskPanel,
										{
											chairOffsets: _List_fromArray(
												[7]),
											length: 14,
											width: 7
										}),
									elm$core$Maybe$Just(author$project$Grid$Rotation$HalfTurn),
									A2(author$project$Grid$Vector$gridVector, 19, 56)),
								A2(
									author$project$Architecture$Item$withEquipment,
									A3(
										author$project$Architecture$Equipment$equipment,
										A2(
											author$project$Architecture$Equipment$Desk,
											author$project$Architecture$Equipment$NoDeskPanel,
											{
												chairOffsets: _List_fromArray(
													[7]),
												length: 14,
												width: 7
											}),
										elm$core$Maybe$Just(author$project$Grid$Rotation$HalfTurn),
										A2(author$project$Grid$Vector$gridVector, 43, 56)),
									A2(
										author$project$Architecture$Item$withEquipment,
										A3(
											author$project$Architecture$Equipment$equipment,
											A2(
												author$project$Architecture$Equipment$Desk,
												author$project$Architecture$Equipment$NoDeskPanel,
												{
													chairOffsets: _List_fromArray(
														[7]),
													length: 14,
													width: 7
												}),
											elm$core$Maybe$Just(author$project$Grid$Rotation$QuarterTurnCounterclockwise),
											A2(author$project$Grid$Vector$gridVector, 57, 49)),
										A2(
											author$project$Architecture$Item$withEquipment,
											A3(
												author$project$Architecture$Equipment$equipment,
												A2(
													author$project$Architecture$Equipment$Desk,
													author$project$Architecture$Equipment$NoDeskPanel,
													{
														chairOffsets: _List_fromArray(
															[7]),
														length: 14,
														width: 7
													}),
												elm$core$Maybe$Nothing,
												A2(author$project$Grid$Vector$gridVector, 19, 42)),
											A2(
												author$project$Architecture$Item$withEquipment,
												A3(
													author$project$Architecture$Equipment$equipment,
													A2(
														author$project$Architecture$Equipment$Desk,
														author$project$Architecture$Equipment$NoDeskPanel,
														{
															chairOffsets: _List_fromArray(
																[7]),
															length: 14,
															width: 7
														}),
													elm$core$Maybe$Nothing,
													A2(author$project$Grid$Vector$gridVector, 43, 42)),
												A2(
													author$project$Architecture$Item$withEquipment,
													A3(
														author$project$Architecture$Equipment$equipment,
														A2(
															author$project$Architecture$Equipment$Desk,
															author$project$Architecture$Equipment$NoDeskPanel,
															{
																chairOffsets: _List_fromArray(
																	[7]),
																length: 14,
																width: 7
															}),
														elm$core$Maybe$Just(author$project$Grid$Rotation$HalfTurn),
														A2(author$project$Grid$Vector$gridVector, 28, 19)),
													A2(
														author$project$Architecture$Item$withEquipment,
														A3(
															author$project$Architecture$Equipment$equipment,
															A2(
																author$project$Architecture$Equipment$Desk,
																author$project$Architecture$Equipment$NoDeskPanel,
																{
																	chairOffsets: _List_fromArray(
																		[7]),
																	length: 14,
																	width: 7
																}),
															elm$core$Maybe$Just(author$project$Grid$Rotation$HalfTurn),
															A2(author$project$Grid$Vector$gridVector, 52, 19)),
														A2(
															author$project$Architecture$Item$withEquipment,
															A3(
																author$project$Architecture$Equipment$equipment,
																A2(
																	author$project$Architecture$Equipment$Desk,
																	author$project$Architecture$Equipment$NoDeskPanel,
																	{
																		chairOffsets: _List_fromArray(
																			[7]),
																		length: 14,
																		width: 7
																	}),
																elm$core$Maybe$Nothing,
																A2(author$project$Grid$Vector$gridVector, 52, 5)),
															A2(
																author$project$Architecture$Item$withEquipment,
																A3(
																	author$project$Architecture$Equipment$equipment,
																	A2(
																		author$project$Architecture$Equipment$Desk,
																		author$project$Architecture$Equipment$NoDeskPanel,
																		{
																			chairOffsets: _List_fromArray(
																				[7]),
																			length: 14,
																			width: 7
																		}),
																	elm$core$Maybe$Nothing,
																	A2(author$project$Grid$Vector$gridVector, 28, 5)),
																A2(
																	author$project$Architecture$Item$withEquipment,
																	A3(
																		author$project$Architecture$Equipment$equipment,
																		author$project$Architecture$Equipment$LoungeWithSofaAndTwoArmchairs,
																		elm$core$Maybe$Nothing,
																		A2(author$project$Grid$Vector$gridVector, 17, -26)),
																	A2(
																		author$project$Architecture$Item$withEquipment,
																		A3(
																			author$project$Architecture$Equipment$equipment,
																			A2(
																				author$project$Architecture$Equipment$Desk,
																				author$project$Architecture$Equipment$NoDeskPanel,
																				{
																					chairOffsets: _List_fromArray(
																						[7]),
																					length: 14,
																					width: 7
																				}),
																			elm$core$Maybe$Just(author$project$Grid$Rotation$HalfTurn),
																			A2(author$project$Grid$Vector$gridVector, 45, -18)),
																		A2(
																			author$project$Architecture$Item$withEquipment,
																			A3(
																				author$project$Architecture$Equipment$equipment,
																				A2(
																					author$project$Architecture$Equipment$Desk,
																					author$project$Architecture$Equipment$NoDeskPanel,
																					{
																						chairOffsets: _List_fromArray(
																							[7]),
																						length: 14,
																						width: 7
																					}),
																				elm$core$Maybe$Nothing,
																				A2(author$project$Grid$Vector$gridVector, 45, -32)),
																			A2(
																				author$project$Architecture$Item$withEquipment,
																				A3(
																					author$project$Architecture$Equipment$equipment,
																					A2(
																						author$project$Architecture$Equipment$Desk,
																						author$project$Architecture$Equipment$NoDeskPanel,
																						{
																							chairOffsets: _List_fromArray(
																								[7]),
																							length: 14,
																							width: 7
																						}),
																					elm$core$Maybe$Just(author$project$Grid$Rotation$QuarterTurnCounterclockwise),
																					A2(author$project$Grid$Vector$gridVector, 59, -25)),
																				A2(
																					author$project$Architecture$Item$withEquipment,
																					A3(
																						author$project$Architecture$Equipment$equipment,
																						A2(
																							author$project$Architecture$Equipment$Curtain,
																							{lengthAcrossRoom: 67, lengthOverWindow: 37},
																							author$project$Architecture$Equipment$DrawnAcrossRoom),
																						elm$core$Maybe$Nothing,
																						A2(author$project$Grid$Vector$gridVector, 40, 67)),
																					A2(
																						author$project$Architecture$Item$withEquipment,
																						A3(
																							author$project$Architecture$Equipment$equipment,
																							A2(
																								author$project$Architecture$Equipment$Curtain,
																								{lengthAcrossRoom: 67, lengthOverWindow: 37},
																								author$project$Architecture$Equipment$DrawnAcrossRoom),
																							elm$core$Maybe$Nothing,
																							A2(author$project$Grid$Vector$gridVector, 40, 30)),
																						A2(
																							author$project$Architecture$Item$withEquipment,
																							A3(
																								author$project$Architecture$Equipment$equipment,
																								A2(
																									author$project$Architecture$Equipment$Curtain,
																									{lengthAcrossRoom: 67, lengthOverWindow: 50},
																									author$project$Architecture$Equipment$DrawnAcrossRoom),
																								elm$core$Maybe$Nothing,
																								A2(author$project$Grid$Vector$gridVector, 40, -7)),
																							A2(
																								author$project$Architecture$Item$withEquipment,
																								A3(
																									author$project$Architecture$Equipment$equipment,
																									author$project$Architecture$Equipment$TableWithoutSeatsAtHead(author$project$Architecture$Equipment$BarTable),
																									elm$core$Maybe$Just(author$project$Grid$Rotation$QuarterTurnClockwise),
																									A2(author$project$Grid$Vector$gridVector, -46, -74)),
																								A2(
																									author$project$Architecture$Item$withEquipment,
																									A3(
																										author$project$Architecture$Equipment$equipment,
																										author$project$Architecture$Equipment$Kitchenette(
																											{
																												counterLength: 29,
																												kitchenEquipment: _List_fromArray(
																													[
																														author$project$Architecture$Equipment$Stove(
																														_List_fromArray(
																															[
																																author$project$Utilities$translate(
																																author$project$Grid$Vector$toVector2d(
																																	A2(author$project$Grid$Vector$gridVector, 5, 0)))
																															])),
																														author$project$Architecture$Equipment$Sink(
																														_List_fromArray(
																															[
																																author$project$Utilities$translate(
																																author$project$Grid$Vector$toVector2d(
																																	A2(author$project$Grid$Vector$gridVector, 17, 0)))
																															])),
																														A2(
																														author$project$Architecture$Equipment$BuiltInFridge,
																														A2(author$project$Grid$Vector$gridVector, 29, -5),
																														elm$core$Maybe$Just(author$project$Grid$Rotation$QuarterTurnClockwise)),
																														author$project$Architecture$Equipment$Dishwasher,
																														author$project$Architecture$Equipment$Oven
																													])
																											}),
																										elm$core$Maybe$Just(author$project$Grid$Rotation$QuarterTurnCounterclockwise),
																										A2(author$project$Grid$Vector$gridVector, -72, -76)),
																									A2(
																										author$project$Architecture$Item$withEquipment,
																										A3(
																											author$project$Architecture$Equipment$equipment,
																											author$project$Architecture$Equipment$LoungeChairWithSideTable,
																											elm$core$Maybe$Just(author$project$Grid$Rotation$HalfTurn),
																											A2(author$project$Grid$Vector$gridVector, 43, -83)),
																										A2(
																											author$project$Architecture$Item$withEquipment,
																											A3(
																												author$project$Architecture$Equipment$equipment,
																												A2(
																													author$project$Architecture$Equipment$Desk,
																													author$project$Architecture$Equipment$NoDeskPanel,
																													{chairOffsets: _List_Nil, length: 14, width: 7}),
																												elm$core$Maybe$Just(author$project$Grid$Rotation$QuarterTurnCounterclockwise),
																												A2(author$project$Grid$Vector$gridVector, 71, -79)),
																											A2(
																												author$project$Architecture$Item$withEquipment,
																												A3(
																													author$project$Architecture$Equipment$equipment,
																													A2(
																														author$project$Architecture$Equipment$Desk,
																														author$project$Architecture$Equipment$VerticalDeskPanel(
																															{from: 8, to: -4}),
																														{
																															chairOffsets: _List_fromArray(
																																[7]),
																															length: 14,
																															width: 7
																														}),
																													elm$core$Maybe$Just(author$project$Grid$Rotation$QuarterTurnCounterclockwise),
																													A2(author$project$Grid$Vector$gridVector, 59, -79)),
																												A2(
																													author$project$Architecture$Item$withEquipment,
																													A3(
																														author$project$Architecture$Equipment$equipment,
																														author$project$Architecture$Equipment$Shelving(22),
																														elm$core$Maybe$Just(author$project$Grid$Rotation$QuarterTurnClockwise),
																														A2(author$project$Grid$Vector$gridVector, 63, -88)),
																													A2(
																														author$project$Architecture$Item$withEquipment,
																														A3(
																															author$project$Architecture$Equipment$equipment,
																															author$project$Architecture$Equipment$Pegwall(37),
																															elm$core$Maybe$Just(author$project$Grid$Rotation$QuarterTurnClockwise),
																															A2(author$project$Grid$Vector$gridVector, 55, -62)),
																														A2(
																															author$project$Architecture$Item$withEquipment,
																															A3(
																																author$project$Architecture$Equipment$equipment,
																																author$project$Architecture$Equipment$TableWithoutSeatsAtHead(
																																	author$project$Architecture$Equipment$DiningTable(
																																		{length: 20, width: 10})),
																																elm$core$Maybe$Nothing,
																																A2(author$project$Grid$Vector$gridVector, 1, -80)),
																															A2(
																																author$project$Architecture$Item$withWall,
																																A3(
																																	author$project$Architecture$Wall$betweenControlPoints,
																																	author$project$Architecture$Wall$DividingWall,
																																	A2(author$project$Grid$Point$gridPoint, -14, 87),
																																	A2(author$project$Grid$Point$gridPoint, -14, -32)),
																																A2(
																																	author$project$Architecture$Item$withWall,
																																	A3(
																																		author$project$Architecture$Wall$betweenControlPoints,
																																		author$project$Architecture$Wall$DividingWall,
																																		A2(author$project$Grid$Point$gridPoint, -57, -56),
																																		A2(author$project$Grid$Point$gridPoint, -57, -60)),
																																	A2(
																																		author$project$Architecture$Item$withWall,
																																		A3(
																																			author$project$Architecture$Wall$betweenControlPoints,
																																			author$project$Architecture$Wall$DividingWall,
																																			A2(author$project$Grid$Point$gridPoint, -65, -54),
																																			A2(author$project$Grid$Point$gridPoint, -65, -56)),
																																		A2(
																																			author$project$Architecture$Item$withWall,
																																			A3(
																																				author$project$Architecture$Wall$betweenControlPoints,
																																				author$project$Architecture$Wall$DividingWall,
																																				A2(author$project$Grid$Point$gridPoint, -63, -54),
																																				A2(author$project$Grid$Point$gridPoint, -57, -54)),
																																			A2(
																																				author$project$Architecture$Item$withWall,
																																				A2(
																																					author$project$Architecture$Wall$withDoor,
																																					A3(doorBetweenRooms, author$project$Architecture$Door$SouthOrEast, author$project$Architecture$Door$HingesOnLeft, 45),
																																					A3(
																																						author$project$Architecture$Wall$betweenControlPoints,
																																						author$project$Architecture$Wall$DividingWall,
																																						A2(author$project$Grid$Point$gridPoint, -55, -60),
																																						A2(author$project$Grid$Point$gridPoint, 20, -60))),
																																				A2(
																																					author$project$Architecture$Item$withWall,
																																					A2(
																																						author$project$Architecture$Wall$withDoor,
																																						A3(doorBetweenRooms, author$project$Architecture$Door$SouthOrEast, author$project$Architecture$Door$HingesOnRight, 2),
																																						A3(
																																							author$project$Architecture$Wall$betweenControlPoints,
																																							author$project$Architecture$Wall$GlassPartition,
																																							A2(author$project$Grid$Point$gridPoint, -20, -62),
																																							A2(author$project$Grid$Point$gridPoint, -20, -90))),
																																					A2(
																																						author$project$Architecture$Item$withWall,
																																						A2(
																																							author$project$Architecture$Wall$withDoor,
																																							A3(doorBetweenRooms, author$project$Architecture$Door$SouthOrEast, author$project$Architecture$Door$HingesOnRight, 2),
																																							A3(
																																								author$project$Architecture$Wall$betweenControlPoints,
																																								author$project$Architecture$Wall$GlassPartition,
																																								A2(author$project$Grid$Point$gridPoint, 20, -62),
																																								A2(author$project$Grid$Point$gridPoint, 20, -90))),
																																						A2(
																																							author$project$Architecture$Item$withWall,
																																							A2(
																																								author$project$Architecture$Wall$withDoor,
																																								A3(doorBetweenRooms, author$project$Architecture$Door$SouthOrEast, author$project$Architecture$Door$HingesOnRight, 2),
																																								A3(
																																									author$project$Architecture$Wall$betweenControlPoints,
																																									author$project$Architecture$Wall$GlassPartition,
																																									A2(author$project$Grid$Point$gridPoint, -14, -34),
																																									A2(author$project$Grid$Point$gridPoint, -14, -59))),
																																							A2(
																																								author$project$Architecture$Item$withWall,
																																								A3(
																																									author$project$Architecture$Wall$betweenControlPoints,
																																									author$project$Architecture$Wall$DividingWall,
																																									A2(author$project$Grid$Point$gridPoint, 38, -60),
																																									A2(author$project$Grid$Point$gridPoint, 73, -60)),
																																								A2(
																																									author$project$Architecture$Item$withWall,
																																									A3(
																																										author$project$Architecture$Wall$betweenControlPoints,
																																										author$project$Architecture$Wall$DividingWall,
																																										A2(author$project$Grid$Point$gridPoint, 8, -44),
																																										A2(author$project$Grid$Point$gridPoint, 53, -44)),
																																									A2(
																																										author$project$Session$withExistingWall,
																																										A3(
																																											withEntrance,
																																											author$project$Architecture$Door$HingesOnLeft,
																																											9600,
																																											A3(
																																												withEntrance,
																																												author$project$Architecture$Door$HingesOnRight,
																																												4100,
																																												A3(
																																													author$project$Architecture$ExistingWall$betweenPoints,
																																													{thickness: 300},
																																													ianmackenzie$elm_geometry$Point2d$fromCoordinates(
																																														_Utils_Tuple2(7400, -9000)),
																																													ianmackenzie$elm_geometry$Point2d$fromCoordinates(
																																														_Utils_Tuple2(-7500, -9000))))),
																																										A2(
																																											author$project$Session$withExistingWall,
																																											A2(
																																												withExteriorWindow,
																																												16150,
																																												A2(
																																													withExteriorWindow,
																																													12500,
																																													A2(
																																														withExteriorWindow,
																																														10100,
																																														A2(
																																															withExteriorWindow,
																																															6600,
																																															A2(
																																																withExteriorWindow,
																																																4200,
																																																A2(
																																																	withExteriorWindow,
																																																	600,
																																																	A3(
																																																		author$project$Architecture$ExistingWall$betweenPoints,
																																																		{thickness: 300},
																																																		ianmackenzie$elm_geometry$Point2d$fromCoordinates(
																																																			_Utils_Tuple2(7400, 9200)),
																																																		ianmackenzie$elm_geometry$Point2d$fromCoordinates(
																																																			_Utils_Tuple2(7400, -9300))))))))),
																																											A2(
																																												author$project$Session$withExistingWall,
																																												A3(
																																													author$project$Architecture$ExistingWall$withWindow,
																																													{width: 2000},
																																													6100,
																																													A3(
																																														author$project$Architecture$ExistingWall$betweenPoints,
																																														{thickness: 400},
																																														ianmackenzie$elm_geometry$Point2d$fromCoordinates(
																																															_Utils_Tuple2(-7400, 8800)),
																																														ianmackenzie$elm_geometry$Point2d$fromCoordinates(
																																															_Utils_Tuple2(7400, 8800)))),
																																												A2(
																																													author$project$Session$withExistingWall,
																																													A2(
																																														withExteriorWindow,
																																														3750,
																																														A2(
																																															withExteriorWindow,
																																															750,
																																															A3(
																																																author$project$Architecture$ExistingWall$betweenPoints,
																																																{thickness: 400},
																																																ianmackenzie$elm_geometry$Point2d$fromCoordinates(
																																																	_Utils_Tuple2(-7400, 2800)),
																																																ianmackenzie$elm_geometry$Point2d$fromCoordinates(
																																																	_Utils_Tuple2(-7400, 9200))))),
																																													A2(
																																														author$project$Session$withExistingWall,
																																														A2(
																																															withExteriorWindow,
																																															9850,
																																															A2(
																																																withExteriorWindow,
																																																6850,
																																																A2(
																																																	withExteriorWindow,
																																																	3850,
																																																	A2(
																																																		withExteriorWindow,
																																																		850,
																																																		A3(
																																																			author$project$Architecture$ExistingWall$betweenPoints,
																																																			{thickness: 300},
																																																			ianmackenzie$elm_geometry$Point2d$fromCoordinates(
																																																				_Utils_Tuple2(-7500, -9300)),
																																																			ianmackenzie$elm_geometry$Point2d$fromCoordinates(
																																																				_Utils_Tuple2(-7500, 2800))))))),
																																														A2(
																																															author$project$Session$withExistingWall,
																																															A3(
																																																author$project$Architecture$ExistingWall$betweenPoints,
																																																{thickness: 400},
																																																ianmackenzie$elm_geometry$Point2d$fromCoordinates(
																																																	_Utils_Tuple2(-7500, -6100)),
																																																ianmackenzie$elm_geometry$Point2d$fromCoordinates(
																																																	_Utils_Tuple2(-6400, -6100))),
																																															A2(
																																																author$project$Session$withExistingSlab,
																																																author$project$Architecture$ExistingSlab$activeFloorAreaWith(
																																																	{
																																																		northEastCorner: ianmackenzie$elm_geometry$Point2d$fromCoordinates(
																																																			_Utils_Tuple2(7400 + 300, 9200)),
																																																		southWestCorner: ianmackenzie$elm_geometry$Point2d$fromCoordinates(
																																																			_Utils_Tuple2((-7500) - 300, -9300))
																																																	}),
																																																session)))))))))))))))))))))))))))))))))))))))))))))));
};
var author$project$Main$init = F3(
	function (flags, url, navigationKey) {
		var session = author$project$Session$RtckLoft$withInitialItems(
			{
				currentSeed: elm$random$Random$initialSeed(flags.seed),
				existingItems: _List_Nil,
				layout: author$project$Architecture$Layout$init,
				navigationKey: navigationKey,
				nextItemId: 0,
				placedItems: _List_Nil,
				viewport: flags.viewport
			});
		var _n0 = A2(
			author$project$Main$changeRouteTo,
			author$project$Route$fromUrl(url),
			author$project$Main$Blank(session));
		var model = _n0.a;
		var routeCommands = _n0.b;
		return _Utils_Tuple2(model, routeCommands);
	});
var author$project$Main$GotInteriorMessage = function (a) {
	return {$: 'GotInteriorMessage', a: a};
};
var author$project$Main$GotNewSession = function (a) {
	return {$: 'GotNewSession', a: a};
};
var author$project$Main$RequestedIfc = function (a) {
	return {$: 'RequestedIfc', a: a};
};
var elm$json$Json$Decode$null = _Json_decodeNull;
var author$project$Main$requestIfc = _Platform_incomingPort(
	'requestIfc',
	elm$json$Json$Decode$null(_Utils_Tuple0));
var author$project$Pages$Interior$Animate = function (a) {
	return {$: 'Animate', a: a};
};
var author$project$Pages$Interior$GotMouseDown = function (a) {
	return {$: 'GotMouseDown', a: a};
};
var author$project$Pages$Interior$GotMouseMove = function (a) {
	return {$: 'GotMouseMove', a: a};
};
var author$project$Pages$Interior$GotMouseUp = function (a) {
	return {$: 'GotMouseUp', a: a};
};
var author$project$Pages$Interior$GotSession = function (a) {
	return {$: 'GotSession', a: a};
};
var author$project$Display$SizeOnScreen = F2(
	function (width, height) {
		return {height: height, width: width};
	});
var elm$browser$Browser$Events$Window = {$: 'Window'};
var elm$browser$Browser$Events$MySub = F3(
	function (a, b, c) {
		return {$: 'MySub', a: a, b: b, c: c};
	});
var elm$browser$Browser$Events$State = F2(
	function (subs, pids) {
		return {pids: pids, subs: subs};
	});
var elm$core$Task$succeed = _Scheduler_succeed;
var elm$browser$Browser$Events$init = elm$core$Task$succeed(
	A2(elm$browser$Browser$Events$State, _List_Nil, elm$core$Dict$empty));
var elm$browser$Browser$Events$nodeToKey = function (node) {
	if (node.$ === 'Document') {
		return 'd_';
	} else {
		return 'w_';
	}
};
var elm$browser$Browser$Events$addKey = function (sub) {
	var node = sub.a;
	var name = sub.b;
	return _Utils_Tuple2(
		_Utils_ap(
			elm$browser$Browser$Events$nodeToKey(node),
			name),
		sub);
};
var elm$browser$Browser$Events$Event = F2(
	function (key, event) {
		return {event: event, key: key};
	});
var elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var elm$core$Task$andThen = _Scheduler_andThen;
var elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			elm$core$Task$andThen,
			function (a) {
				return elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var elm$browser$Browser$External = function (a) {
	return {$: 'External', a: a};
};
var elm$browser$Browser$Internal = function (a) {
	return {$: 'Internal', a: a};
};
var elm$browser$Browser$Dom$NotFound = function (a) {
	return {$: 'NotFound', a: a};
};
var elm$core$Basics$never = function (_n0) {
	never:
	while (true) {
		var nvr = _n0.a;
		var $temp$_n0 = nvr;
		_n0 = $temp$_n0;
		continue never;
	}
};
var elm$core$Task$Perform = function (a) {
	return {$: 'Perform', a: a};
};
var elm$core$Task$init = elm$core$Task$succeed(_Utils_Tuple0);
var elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			elm$core$Task$andThen,
			function (a) {
				return A2(
					elm$core$Task$andThen,
					function (b) {
						return elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var elm$core$Task$sequence = function (tasks) {
	return A3(
		elm$core$List$foldr,
		elm$core$Task$map2(elm$core$List$cons),
		elm$core$Task$succeed(_List_Nil),
		tasks);
};
var elm$core$Platform$sendToApp = _Platform_sendToApp;
var elm$core$Task$spawnCmd = F2(
	function (router, _n0) {
		var task = _n0.a;
		return _Scheduler_spawn(
			A2(
				elm$core$Task$andThen,
				elm$core$Platform$sendToApp(router),
				task));
	});
var elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			elm$core$Task$map,
			function (_n0) {
				return _Utils_Tuple0;
			},
			elm$core$Task$sequence(
				A2(
					elm$core$List$map,
					elm$core$Task$spawnCmd(router),
					commands)));
	});
var elm$core$Task$onSelfMsg = F3(
	function (_n0, _n1, _n2) {
		return elm$core$Task$succeed(_Utils_Tuple0);
	});
var elm$core$Task$cmdMap = F2(
	function (tagger, _n0) {
		var task = _n0.a;
		return elm$core$Task$Perform(
			A2(elm$core$Task$map, tagger, task));
	});
_Platform_effectManagers['Task'] = _Platform_createManager(elm$core$Task$init, elm$core$Task$onEffects, elm$core$Task$onSelfMsg, elm$core$Task$cmdMap);
var elm$core$Task$command = _Platform_leaf('Task');
var elm$core$Task$perform = F2(
	function (toMessage, task) {
		return elm$core$Task$command(
			elm$core$Task$Perform(
				A2(elm$core$Task$map, toMessage, task)));
	});
var elm$core$String$length = _String_length;
var elm$core$String$slice = _String_slice;
var elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			elm$core$String$slice,
			n,
			elm$core$String$length(string),
			string);
	});
var elm$core$String$startsWith = _String_startsWith;
var elm$url$Url$Http = {$: 'Http'};
var elm$url$Url$Https = {$: 'Https'};
var elm$core$String$indexes = _String_indexes;
var elm$core$String$isEmpty = function (string) {
	return string === '';
};
var elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3(elm$core$String$slice, 0, n, string);
	});
var elm$core$String$contains = _String_contains;
var elm$core$String$toInt = _String_toInt;
var elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {fragment: fragment, host: host, path: path, port_: port_, protocol: protocol, query: query};
	});
var elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if (elm$core$String$isEmpty(str) || A2(elm$core$String$contains, '@', str)) {
			return elm$core$Maybe$Nothing;
		} else {
			var _n0 = A2(elm$core$String$indexes, ':', str);
			if (!_n0.b) {
				return elm$core$Maybe$Just(
					A6(elm$url$Url$Url, protocol, str, elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_n0.b.b) {
					var i = _n0.a;
					var _n1 = elm$core$String$toInt(
						A2(elm$core$String$dropLeft, i + 1, str));
					if (_n1.$ === 'Nothing') {
						return elm$core$Maybe$Nothing;
					} else {
						var port_ = _n1;
						return elm$core$Maybe$Just(
							A6(
								elm$url$Url$Url,
								protocol,
								A2(elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return elm$core$Maybe$Nothing;
				}
			}
		}
	});
var elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if (elm$core$String$isEmpty(str)) {
			return elm$core$Maybe$Nothing;
		} else {
			var _n0 = A2(elm$core$String$indexes, '/', str);
			if (!_n0.b) {
				return A5(elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _n0.a;
				return A5(
					elm$url$Url$chompBeforePath,
					protocol,
					A2(elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2(elm$core$String$left, i, str));
			}
		}
	});
var elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if (elm$core$String$isEmpty(str)) {
			return elm$core$Maybe$Nothing;
		} else {
			var _n0 = A2(elm$core$String$indexes, '?', str);
			if (!_n0.b) {
				return A4(elm$url$Url$chompBeforeQuery, protocol, elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _n0.a;
				return A4(
					elm$url$Url$chompBeforeQuery,
					protocol,
					elm$core$Maybe$Just(
						A2(elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2(elm$core$String$left, i, str));
			}
		}
	});
var elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if (elm$core$String$isEmpty(str)) {
			return elm$core$Maybe$Nothing;
		} else {
			var _n0 = A2(elm$core$String$indexes, '#', str);
			if (!_n0.b) {
				return A3(elm$url$Url$chompBeforeFragment, protocol, elm$core$Maybe$Nothing, str);
			} else {
				var i = _n0.a;
				return A3(
					elm$url$Url$chompBeforeFragment,
					protocol,
					elm$core$Maybe$Just(
						A2(elm$core$String$dropLeft, i + 1, str)),
					A2(elm$core$String$left, i, str));
			}
		}
	});
var elm$url$Url$fromString = function (str) {
	return A2(elm$core$String$startsWith, 'http://', str) ? A2(
		elm$url$Url$chompAfterProtocol,
		elm$url$Url$Http,
		A2(elm$core$String$dropLeft, 7, str)) : (A2(elm$core$String$startsWith, 'https://', str) ? A2(
		elm$url$Url$chompAfterProtocol,
		elm$url$Url$Https,
		A2(elm$core$String$dropLeft, 8, str)) : elm$core$Maybe$Nothing);
};
var elm$browser$Browser$Events$spawn = F3(
	function (router, key, _n0) {
		var node = _n0.a;
		var name = _n0.b;
		var actualNode = function () {
			if (node.$ === 'Document') {
				return _Browser_doc;
			} else {
				return _Browser_window;
			}
		}();
		return A2(
			elm$core$Task$map,
			function (value) {
				return _Utils_Tuple2(key, value);
			},
			A3(
				_Browser_on,
				actualNode,
				name,
				function (event) {
					return A2(
						elm$core$Platform$sendToSelf,
						router,
						A2(elm$browser$Browser$Events$Event, key, event));
				}));
	});
var elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3(elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _n0) {
				stepState:
				while (true) {
					var list = _n0.a;
					var result = _n0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _n2 = list.a;
						var lKey = _n2.a;
						var lValue = _n2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_n0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_n0 = $temp$_n0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _n3 = A3(
			elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _n3.a;
		var intermediateResult = _n3.b;
		return A3(
			elm$core$List$foldl,
			F2(
				function (_n4, result) {
					var k = _n4.a;
					var v = _n4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3(elm$core$Dict$foldl, elm$core$Dict$insert, t2, t1);
	});
var elm$core$Process$kill = _Scheduler_kill;
var elm$browser$Browser$Events$onEffects = F3(
	function (router, subs, state) {
		var stepRight = F3(
			function (key, sub, _n6) {
				var deads = _n6.a;
				var lives = _n6.b;
				var news = _n6.c;
				return _Utils_Tuple3(
					deads,
					lives,
					A2(
						elm$core$List$cons,
						A3(elm$browser$Browser$Events$spawn, router, key, sub),
						news));
			});
		var stepLeft = F3(
			function (_n4, pid, _n5) {
				var deads = _n5.a;
				var lives = _n5.b;
				var news = _n5.c;
				return _Utils_Tuple3(
					A2(elm$core$List$cons, pid, deads),
					lives,
					news);
			});
		var stepBoth = F4(
			function (key, pid, _n2, _n3) {
				var deads = _n3.a;
				var lives = _n3.b;
				var news = _n3.c;
				return _Utils_Tuple3(
					deads,
					A3(elm$core$Dict$insert, key, pid, lives),
					news);
			});
		var newSubs = A2(elm$core$List$map, elm$browser$Browser$Events$addKey, subs);
		var _n0 = A6(
			elm$core$Dict$merge,
			stepLeft,
			stepBoth,
			stepRight,
			state.pids,
			elm$core$Dict$fromList(newSubs),
			_Utils_Tuple3(_List_Nil, elm$core$Dict$empty, _List_Nil));
		var deadPids = _n0.a;
		var livePids = _n0.b;
		var makeNewPids = _n0.c;
		return A2(
			elm$core$Task$andThen,
			function (pids) {
				return elm$core$Task$succeed(
					A2(
						elm$browser$Browser$Events$State,
						newSubs,
						A2(
							elm$core$Dict$union,
							livePids,
							elm$core$Dict$fromList(pids))));
			},
			A2(
				elm$core$Task$andThen,
				function (_n1) {
					return elm$core$Task$sequence(makeNewPids);
				},
				elm$core$Task$sequence(
					A2(elm$core$List$map, elm$core$Process$kill, deadPids))));
	});
var elm$browser$Browser$Events$onSelfMsg = F3(
	function (router, _n0, state) {
		var key = _n0.key;
		var event = _n0.event;
		var toMessage = function (_n2) {
			var subKey = _n2.a;
			var _n3 = _n2.b;
			var node = _n3.a;
			var name = _n3.b;
			var decoder = _n3.c;
			return _Utils_eq(subKey, key) ? A2(_Browser_decodeEvent, decoder, event) : elm$core$Maybe$Nothing;
		};
		var messages = A2(elm$core$List$filterMap, toMessage, state.subs);
		return A2(
			elm$core$Task$andThen,
			function (_n1) {
				return elm$core$Task$succeed(state);
			},
			elm$core$Task$sequence(
				A2(
					elm$core$List$map,
					elm$core$Platform$sendToApp(router),
					messages)));
	});
var elm$browser$Browser$Events$subMap = F2(
	function (func, _n0) {
		var node = _n0.a;
		var name = _n0.b;
		var decoder = _n0.c;
		return A3(
			elm$browser$Browser$Events$MySub,
			node,
			name,
			A2(elm$json$Json$Decode$map, func, decoder));
	});
_Platform_effectManagers['Browser.Events'] = _Platform_createManager(elm$browser$Browser$Events$init, elm$browser$Browser$Events$onEffects, elm$browser$Browser$Events$onSelfMsg, 0, elm$browser$Browser$Events$subMap);
var elm$browser$Browser$Events$subscription = _Platform_leaf('Browser.Events');
var elm$browser$Browser$Events$on = F3(
	function (node, name, decoder) {
		return elm$browser$Browser$Events$subscription(
			A3(elm$browser$Browser$Events$MySub, node, name, decoder));
	});
var elm$json$Json$Decode$field = _Json_decodeField;
var elm$json$Json$Decode$int = _Json_decodeInt;
var elm$browser$Browser$Events$onResize = function (func) {
	return A3(
		elm$browser$Browser$Events$on,
		elm$browser$Browser$Events$Window,
		'resize',
		A2(
			elm$json$Json$Decode$field,
			'target',
			A3(
				elm$json$Json$Decode$map2,
				func,
				A2(elm$json$Json$Decode$field, 'innerWidth', elm$json$Json$Decode$int),
				A2(elm$json$Json$Decode$field, 'innerHeight', elm$json$Json$Decode$int))));
};
var author$project$Session$changes = F2(
	function (toMessage, session) {
		var updateViewport = F2(
			function (width, height) {
				return toMessage(
					_Utils_update(
						session,
						{
							viewport: A2(author$project$Display$SizeOnScreen, width, height)
						}));
			});
		return elm$browser$Browser$Events$onResize(updateViewport);
	});
var author$project$Display$PositionOnScreen = F2(
	function (x, y) {
		return {x: x, y: y};
	});
var elm$json$Json$Decode$float = _Json_decodeFloat;
var author$project$Utilities$mapMousePosition = function (message) {
	return A2(
		elm$json$Json$Decode$map,
		message,
		A3(
			elm$json$Json$Decode$map2,
			author$project$Display$PositionOnScreen,
			A2(elm$json$Json$Decode$field, 'clientX', elm$json$Json$Decode$float),
			A2(elm$json$Json$Decode$field, 'clientY', elm$json$Json$Decode$float)));
};
var elm$browser$Browser$Events$Document = {$: 'Document'};
var elm$browser$Browser$Events$onMouseDown = A2(elm$browser$Browser$Events$on, elm$browser$Browser$Events$Document, 'mousedown');
var elm$browser$Browser$Events$onMouseMove = A2(elm$browser$Browser$Events$on, elm$browser$Browser$Events$Document, 'mousemove');
var elm$browser$Browser$Events$onMouseUp = A2(elm$browser$Browser$Events$on, elm$browser$Browser$Events$Document, 'mouseup');
var elm$core$Platform$Sub$batch = _Platform_batch;
var elm$browser$Browser$AnimationManager$Time = function (a) {
	return {$: 'Time', a: a};
};
var elm$browser$Browser$AnimationManager$State = F3(
	function (subs, request, oldTime) {
		return {oldTime: oldTime, request: request, subs: subs};
	});
var elm$browser$Browser$AnimationManager$init = elm$core$Task$succeed(
	A3(elm$browser$Browser$AnimationManager$State, _List_Nil, elm$core$Maybe$Nothing, 0));
var elm$browser$Browser$AnimationManager$now = _Browser_now(_Utils_Tuple0);
var elm$browser$Browser$AnimationManager$rAF = _Browser_rAF(_Utils_Tuple0);
var elm$core$Process$spawn = _Scheduler_spawn;
var elm$browser$Browser$AnimationManager$onEffects = F3(
	function (router, subs, _n0) {
		var request = _n0.request;
		var oldTime = _n0.oldTime;
		var _n1 = _Utils_Tuple2(request, subs);
		if (_n1.a.$ === 'Nothing') {
			if (!_n1.b.b) {
				var _n2 = _n1.a;
				return elm$browser$Browser$AnimationManager$init;
			} else {
				var _n4 = _n1.a;
				return A2(
					elm$core$Task$andThen,
					function (pid) {
						return A2(
							elm$core$Task$andThen,
							function (time) {
								return elm$core$Task$succeed(
									A3(
										elm$browser$Browser$AnimationManager$State,
										subs,
										elm$core$Maybe$Just(pid),
										time));
							},
							elm$browser$Browser$AnimationManager$now);
					},
					elm$core$Process$spawn(
						A2(
							elm$core$Task$andThen,
							elm$core$Platform$sendToSelf(router),
							elm$browser$Browser$AnimationManager$rAF)));
			}
		} else {
			if (!_n1.b.b) {
				var pid = _n1.a.a;
				return A2(
					elm$core$Task$andThen,
					function (_n3) {
						return elm$browser$Browser$AnimationManager$init;
					},
					elm$core$Process$kill(pid));
			} else {
				return elm$core$Task$succeed(
					A3(elm$browser$Browser$AnimationManager$State, subs, request, oldTime));
			}
		}
	});
var elm$browser$Browser$AnimationManager$onSelfMsg = F3(
	function (router, newTime, _n0) {
		var subs = _n0.subs;
		var oldTime = _n0.oldTime;
		var send = function (sub) {
			if (sub.$ === 'Time') {
				var tagger = sub.a;
				return A2(
					elm$core$Platform$sendToApp,
					router,
					tagger(
						elm$time$Time$millisToPosix(newTime)));
			} else {
				var tagger = sub.a;
				return A2(
					elm$core$Platform$sendToApp,
					router,
					tagger(newTime - oldTime));
			}
		};
		return A2(
			elm$core$Task$andThen,
			function (pid) {
				return A2(
					elm$core$Task$andThen,
					function (_n1) {
						return elm$core$Task$succeed(
							A3(
								elm$browser$Browser$AnimationManager$State,
								subs,
								elm$core$Maybe$Just(pid),
								newTime));
					},
					elm$core$Task$sequence(
						A2(elm$core$List$map, send, subs)));
			},
			elm$core$Process$spawn(
				A2(
					elm$core$Task$andThen,
					elm$core$Platform$sendToSelf(router),
					elm$browser$Browser$AnimationManager$rAF)));
	});
var elm$browser$Browser$AnimationManager$Delta = function (a) {
	return {$: 'Delta', a: a};
};
var elm$browser$Browser$AnimationManager$subMap = F2(
	function (func, sub) {
		if (sub.$ === 'Time') {
			var tagger = sub.a;
			return elm$browser$Browser$AnimationManager$Time(
				A2(elm$core$Basics$composeL, func, tagger));
		} else {
			var tagger = sub.a;
			return elm$browser$Browser$AnimationManager$Delta(
				A2(elm$core$Basics$composeL, func, tagger));
		}
	});
_Platform_effectManagers['Browser.AnimationManager'] = _Platform_createManager(elm$browser$Browser$AnimationManager$init, elm$browser$Browser$AnimationManager$onEffects, elm$browser$Browser$AnimationManager$onSelfMsg, 0, elm$browser$Browser$AnimationManager$subMap);
var elm$browser$Browser$AnimationManager$subscription = _Platform_leaf('Browser.AnimationManager');
var elm$browser$Browser$AnimationManager$onAnimationFrame = function (tagger) {
	return elm$browser$Browser$AnimationManager$subscription(
		elm$browser$Browser$AnimationManager$Time(tagger));
};
var elm$browser$Browser$Events$onAnimationFrame = elm$browser$Browser$AnimationManager$onAnimationFrame;
var elm$core$Platform$Sub$map = _Platform_map;
var elm$core$Platform$Sub$none = elm$core$Platform$Sub$batch(_List_Nil);
var mdgriffith$elm_style_animation$Animation$isRunning = function (_n0) {
	var model = _n0.a;
	return model.running;
};
var mdgriffith$elm_style_animation$Animation$Model$Tick = function (a) {
	return {$: 'Tick', a: a};
};
var mdgriffith$elm_style_animation$Animation$subscription = F2(
	function (msg, states) {
		return A2(elm$core$List$any, mdgriffith$elm_style_animation$Animation$isRunning, states) ? A2(
			elm$core$Platform$Sub$map,
			msg,
			elm$browser$Browser$Events$onAnimationFrame(mdgriffith$elm_style_animation$Animation$Model$Tick)) : elm$core$Platform$Sub$none;
	});
var author$project$Pages$Interior$subscriptions = function (model) {
	return elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				A2(author$project$Session$changes, author$project$Pages$Interior$GotSession, model.session),
				elm$browser$Browser$Events$onMouseDown(
				author$project$Utilities$mapMousePosition(author$project$Pages$Interior$GotMouseDown)),
				elm$browser$Browser$Events$onMouseMove(
				author$project$Utilities$mapMousePosition(author$project$Pages$Interior$GotMouseMove)),
				elm$browser$Browser$Events$onMouseUp(
				author$project$Utilities$mapMousePosition(author$project$Pages$Interior$GotMouseUp)),
				A2(
				mdgriffith$elm_style_animation$Animation$subscription,
				author$project$Pages$Interior$Animate,
				_List_fromArray(
					[model.drawerAnimationState, model.contextMenuAnimationState, model.contextMenuOptionAnimationState]))
			]));
};
var author$project$Main$subscriptions = function (model) {
	return elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				author$project$Main$requestIfc(author$project$Main$RequestedIfc),
				function () {
				switch (model.$) {
					case 'Interior':
						var interiorModel = model.a;
						return A2(
							elm$core$Platform$Sub$map,
							author$project$Main$GotInteriorMessage,
							author$project$Pages$Interior$subscriptions(interiorModel));
					case 'Layout':
						var session = model.a;
						return A2(
							author$project$Session$changes,
							A2(elm$core$Basics$composeL, author$project$Main$GotNewSession, author$project$Main$Layout),
							session);
					case 'NotFound':
						var session = model.a;
						return A2(
							author$project$Session$changes,
							A2(elm$core$Basics$composeL, author$project$Main$GotNewSession, author$project$Main$NotFound),
							session);
					default:
						var session = model.a;
						return A2(
							author$project$Session$changes,
							A2(elm$core$Basics$composeL, author$project$Main$GotNewSession, author$project$Main$Blank),
							session);
				}
			}()
			]));
};
var author$project$Main$GotIfcTimestamp = function (a) {
	return {$: 'GotIfcTimestamp', a: a};
};
var elm$json$Json$Encode$string = _Json_wrap;
var author$project$Main$ifcContentReady = _Platform_outgoingPort('ifcContentReady', elm$json$Json$Encode$string);
var author$project$Pages$Interior$updateSession = F2(
	function (session, model) {
		return _Utils_update(
			model,
			{session: session});
	});
var author$project$Main$updateSession = F2(
	function (session, model) {
		switch (model.$) {
			case 'Interior':
				var interiorModel = model.a;
				return author$project$Main$Interior(
					A2(author$project$Pages$Interior$updateSession, session, interiorModel));
			case 'Layout':
				return author$project$Main$Layout(session);
			case 'NotFound':
				return author$project$Main$NotFound(session);
			default:
				return author$project$Main$Blank(session);
		}
	});
var author$project$Grid$Units$fromPixels = F2(
	function (pixelsPerMillimeter, pixel) {
		return elm$core$Basics$round((pixel / pixelsPerMillimeter) / author$project$Grid$Units$millimetersPerUnit);
	});
var author$project$Grid$Point$fromPosition = F2(
	function (_n0, position) {
		var session = _n0.session;
		var viewportOffset = _n0.viewportOffset;
		var pixelsPerMillimeter = _n0.pixelsPerMillimeter;
		var fromPixels = author$project$Grid$Units$fromPixels(pixelsPerMillimeter);
		return A2(
			author$project$Grid$Point$GridPoint,
			fromPixels((position.x - (session.viewport.width / 2)) + viewportOffset.x),
			fromPixels((position.y - (session.viewport.height / 2)) + viewportOffset.y));
	});
var author$project$Architecture$Item$drawWall = F4(
	function (model, wallType, startPosition, endPosition) {
		var positionWithinShell = function (position) {
			return A2(author$project$Grid$Point$fromPosition, model, position);
		};
		var wall = A3(
			author$project$Architecture$Wall$betweenControlPoints,
			wallType,
			positionWithinShell(startPosition),
			positionWithinShell(endPosition));
		return author$project$Architecture$Item$Item(
			{
				id: model.session.nextItemId,
				itemType: author$project$Architecture$Item$WallItem(wall),
				level: model.level
			});
	});
var elm_community$list_extra$List$Extra$find = F2(
	function (predicate, list) {
		find:
		while (true) {
			if (!list.b) {
				return elm$core$Maybe$Nothing;
			} else {
				var first = list.a;
				var rest = list.b;
				if (predicate(first)) {
					return elm$core$Maybe$Just(first);
				} else {
					var $temp$predicate = predicate,
						$temp$list = rest;
					predicate = $temp$predicate;
					list = $temp$list;
					continue find;
				}
			}
		}
	});
var author$project$Architecture$Item$find = F2(
	function (session, itemId) {
		return A2(
			elm_community$list_extra$List$Extra$find,
			author$project$Architecture$Item$matches(itemId),
			session.placedItems);
	});
var author$project$Architecture$Equipment$setTranslation = F2(
	function (newTranslation, _n0) {
		var data = _n0.a;
		return author$project$Architecture$Equipment$Equipment(
			_Utils_update(
				data,
				{translation: newTranslation}));
	});
var elm$core$Basics$truncate = _Basics_truncate;
var author$project$Grid$Point$fromPoint2d = function (point2d) {
	var _n0 = ianmackenzie$elm_geometry$Point2d$coordinates(point2d);
	var x = _n0.a;
	var y = _n0.b;
	return A2(
		author$project$Grid$Point$GridPoint,
		A2(author$project$Grid$Units$fromMillimeters, elm$core$Basics$truncate, x),
		A2(author$project$Grid$Units$fromMillimeters, elm$core$Basics$truncate, y));
};
var ianmackenzie$elm_geometry$BoundingBox2d$midX = function (_n0) {
	var boundingBox = _n0.a;
	return boundingBox.minX + (0.5 * (boundingBox.maxX - boundingBox.minX));
};
var ianmackenzie$elm_geometry$BoundingBox2d$midY = function (_n0) {
	var boundingBox = _n0.a;
	return boundingBox.minY + (0.5 * (boundingBox.maxY - boundingBox.minY));
};
var ianmackenzie$elm_geometry$BoundingBox2d$centerPoint = function (boundingBox) {
	return ianmackenzie$elm_geometry$Point2d$fromCoordinates(
		_Utils_Tuple2(
			ianmackenzie$elm_geometry$BoundingBox2d$midX(boundingBox),
			ianmackenzie$elm_geometry$BoundingBox2d$midY(boundingBox)));
};
var ianmackenzie$elm_geometry$BoundingBox2d$centroid = function (boundingBox) {
	return ianmackenzie$elm_geometry$BoundingBox2d$centerPoint(boundingBox);
};
var author$project$Architecture$Equipment$viewMidpoint = function (_n0) {
	var data = _n0.a;
	return author$project$Grid$Point$fromPoint2d(
		ianmackenzie$elm_geometry$BoundingBox2d$centroid(
			author$project$Grid$Boundary$toBoundingBox2d(
				author$project$Architecture$Equipment$computedProperties(data.equipmentType).viewBoundary)));
};
var author$project$Grid$Point$toVector = function (_n0) {
	var x = _n0.a;
	var y = _n0.b;
	return A2(author$project$Grid$Vector$gridVector, x, y);
};
var author$project$Architecture$Item$takeEquipmentFromDrawer = F2(
	function (model, equipment) {
		var mouseMovePosition = A2(
			elm$core$Maybe$withDefault,
			A2(author$project$Display$PositionOnScreen, 0, 0),
			model.currentMouseMovePosition);
		var equipmentMidpoint = author$project$Architecture$Equipment$viewMidpoint(equipment);
		var pointerPositionInUnits = A2(
			author$project$Grid$Point$gridPoint,
			(-author$project$Grid$Point$xCoordinate(equipmentMidpoint)) + A2(author$project$Grid$Units$fromPixels, model.pixelsPerMillimeter, (mouseMovePosition.x - (model.session.viewport.width / 2)) + model.viewportOffset.x),
			author$project$Grid$Point$yCoordinate(equipmentMidpoint) + A2(author$project$Grid$Units$fromPixels, model.pixelsPerMillimeter, ((-mouseMovePosition.y) + (model.session.viewport.height / 2)) - model.viewportOffset.y));
		return author$project$Architecture$Item$Item(
			{
				id: model.session.nextItemId,
				itemType: author$project$Architecture$Item$EquipmentItem(
					A2(
						author$project$Architecture$Equipment$setTranslation,
						author$project$Grid$Point$toVector(pointerPositionInUnits),
						equipment)),
				level: model.level
			});
	});
var author$project$Architecture$Equipment$availableRotations = function (equipmentTypeValue) {
	return author$project$Architecture$Equipment$rawProperties(equipmentTypeValue).availableRotations;
};
var elm$core$Dict$member = F2(
	function (key, dict) {
		var _n0 = A2(elm$core$Dict$get, key, dict);
		if (_n0.$ === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var turboMaCk$any_dict$Dict$Any$member = F2(
	function (k, _n0) {
		var dict = _n0.a.dict;
		var toKey = _n0.a.toKey;
		return A2(
			elm$core$Dict$member,
			toKey(k),
			dict);
	});
var turboMaCk$any_set$Set$Any$member = F2(
	function (a, _n0) {
		var dict = _n0.a;
		return A2(turboMaCk$any_dict$Dict$Any$member, a, dict);
	});
var author$project$Architecture$Equipment$nextRotation = F2(
	function (availableSpaceRotations, currentRotation) {
		nextRotation:
		while (true) {
			var bid = function () {
				if (currentRotation.$ === 'Just') {
					switch (currentRotation.a.$) {
						case 'QuarterTurnClockwise':
							var _n2 = currentRotation.a;
							return elm$core$Maybe$Just(author$project$Grid$Rotation$HalfTurn);
						case 'HalfTurn':
							var _n3 = currentRotation.a;
							return elm$core$Maybe$Just(author$project$Grid$Rotation$QuarterTurnCounterclockwise);
						default:
							var _n4 = currentRotation.a;
							return elm$core$Maybe$Nothing;
					}
				} else {
					return elm$core$Maybe$Just(author$project$Grid$Rotation$QuarterTurnClockwise);
				}
			}();
			if (bid.$ === 'Nothing') {
				return bid;
			} else {
				var bidValue = bid.a;
				if (A2(turboMaCk$any_set$Set$Any$member, bidValue, availableSpaceRotations)) {
					return bid;
				} else {
					var $temp$availableSpaceRotations = availableSpaceRotations,
						$temp$currentRotation = bid;
					availableSpaceRotations = $temp$availableSpaceRotations;
					currentRotation = $temp$currentRotation;
					continue nextRotation;
				}
			}
		}
	});
var author$project$Architecture$Equipment$update = F2(
	function (message, _n0) {
		var data = _n0.a;
		var _n1 = _Utils_Tuple2(message, data.equipmentType);
		if (_n1.a.$ === 'SetNextRotation') {
			var _n2 = _n1.a;
			var newRotation = A2(
				author$project$Architecture$Equipment$nextRotation,
				author$project$Architecture$Equipment$availableRotations(data.equipmentType),
				data.rotation);
			return author$project$Architecture$Equipment$Equipment(
				_Utils_update(
					data,
					{rotation: newRotation}));
		} else {
			if (_n1.b.$ === 'Curtain') {
				var newStatus = _n1.a.a;
				var _n3 = _n1.b;
				var dimensions = _n3.a;
				return author$project$Architecture$Equipment$Equipment(
					_Utils_update(
						data,
						{
							equipmentType: A2(author$project$Architecture$Equipment$Curtain, dimensions, newStatus)
						}));
			} else {
				return author$project$Architecture$Equipment$Equipment(data);
			}
		}
	});
var author$project$Architecture$Door$NorthOrWest = {$: 'NorthOrWest'};
var author$project$Architecture$Door$defaultWidth = 8;
var author$project$Architecture$Door$moveBy = F2(
	function (units, _n0) {
		var door = _n0.a;
		return author$project$Architecture$Door$Door(
			_Utils_update(
				door,
				{offsetFromEnd: door.offsetFromEnd + units}));
	});
var author$project$Architecture$Door$toggleOrientation = function (_n0) {
	var door = _n0.a;
	return author$project$Architecture$Door$Door(
		function () {
			var _n1 = _Utils_Tuple2(door.orientation, door.openSide);
			if (_n1.a.$ === 'HingesOnRight') {
				if (_n1.b.$ === 'NorthOrWest') {
					var _n2 = _n1.a;
					var _n3 = _n1.b;
					return _Utils_update(
						door,
						{orientation: author$project$Architecture$Door$HingesOnLeft});
				} else {
					var _n6 = _n1.a;
					var _n7 = _n1.b;
					return _Utils_update(
						door,
						{orientation: author$project$Architecture$Door$HingesOnLeft});
				}
			} else {
				if (_n1.b.$ === 'NorthOrWest') {
					var _n4 = _n1.a;
					var _n5 = _n1.b;
					return _Utils_update(
						door,
						{openSide: author$project$Architecture$Door$SouthOrEast, orientation: author$project$Architecture$Door$HingesOnRight});
				} else {
					var _n8 = _n1.a;
					var _n9 = _n1.b;
					return _Utils_update(
						door,
						{openSide: author$project$Architecture$Door$NorthOrWest, orientation: author$project$Architecture$Door$HingesOnRight});
				}
			}
		}());
};
var author$project$Architecture$Door$minPaddingAroundClearance = 1;
var author$project$Architecture$Door$offsetFromEnd = function (_n0) {
	var doorProperties = _n0.a;
	return doorProperties.offsetFromEnd;
};
var elm$core$Dict$values = function (dict) {
	return A3(
		elm$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2(elm$core$List$cons, value, valueList);
			}),
		_List_Nil,
		dict);
};
var elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return elm$core$Maybe$Just(
			A3(elm$core$List$foldl, elm$core$Basics$max, x, xs));
	} else {
		return elm$core$Maybe$Nothing;
	}
};
var author$project$Architecture$Wall$defaultDoorInsertPoint = function (_n0) {
	var wallProperties = _n0.a;
	return author$project$Architecture$Door$minPaddingAroundClearance + (author$project$Architecture$Door$defaultWidth + A2(
		elm$core$Maybe$withDefault,
		-author$project$Architecture$Door$defaultWidth,
		elm$core$List$maximum(
			A2(
				elm$core$List$map,
				author$project$Architecture$Door$offsetFromEnd,
				elm$core$Dict$values(wallProperties.doors)))));
};
var author$project$Architecture$Wall$canAddDoor = function (wall) {
	return _Utils_cmp(
		author$project$Architecture$Wall$length(wall) - author$project$Architecture$Wall$defaultDoorInsertPoint(wall),
		author$project$Architecture$Door$defaultWidth + author$project$Architecture$Door$minPaddingAroundClearance) > -1;
};
var elm$core$Basics$always = F2(
	function (a, _n0) {
		return a;
	});
var author$project$Architecture$Wall$update = F2(
	function (transformation, wall) {
		var _n0 = _Utils_Tuple2(
			transformation,
			author$project$Architecture$Wall$canAddDoor(wall));
		switch (_n0.a.$) {
			case 'ChangeWallLength':
				var delta = _n0.a.a;
				var _n1 = wall;
				var wallProperties = _n1.a;
				return author$project$Architecture$Wall$Wall(
					_Utils_update(
						wallProperties,
						{length: wallProperties.length + delta}));
			case 'AddDoor':
				if (_n0.b) {
					var _n2 = _n0.a;
					return A2(
						author$project$Architecture$Wall$withDoor,
						A4(
							author$project$Architecture$Door$with,
							{clearance: author$project$Architecture$Door$defaultWidth, doorType: author$project$Architecture$Door$Basic},
							author$project$Architecture$Door$NorthOrWest,
							author$project$Architecture$Door$HingesOnLeft,
							author$project$Architecture$Wall$defaultDoorInsertPoint(wall)),
						wall);
				} else {
					var _n3 = _n0.a;
					return wall;
				}
			case 'ToggleDoorOrientation':
				var doorId = _n0.a.a;
				var _n4 = wall;
				var wallProperties = _n4.a;
				var wallDoors = wallProperties.doors;
				var updatedDoor = A2(
					elm$core$Maybe$map,
					author$project$Architecture$Door$toggleOrientation,
					A2(elm$core$Dict$get, doorId, wallDoors));
				return author$project$Architecture$Wall$Wall(
					_Utils_update(
						wallProperties,
						{
							doors: A3(
								elm$core$Dict$update,
								doorId,
								elm$core$Basics$always(updatedDoor),
								wallDoors)
						}));
			case 'RemoveDoor':
				var doorId = _n0.a.a;
				var _n5 = wall;
				var wallProperties = _n5.a;
				var updatedDoors = A2(elm$core$Dict$remove, doorId, wallProperties.doors);
				return author$project$Architecture$Wall$Wall(
					_Utils_update(
						wallProperties,
						{
							doors: updatedDoors,
							nextDoorId: A2(
								elm$core$Maybe$withDefault,
								0,
								A2(
									elm$core$Maybe$map,
									function (maxId) {
										return maxId + 1;
									},
									elm$core$List$maximum(
										elm$core$Dict$keys(updatedDoors))))
						}));
			case 'MoveDoor':
				var _n6 = _n0.a;
				var units = _n6.a;
				var doorId = _n6.b;
				var _n7 = wall;
				var wallProperties = _n7.a;
				return author$project$Architecture$Wall$Wall(
					_Utils_update(
						wallProperties,
						{
							doors: A3(
								elm$core$Dict$update,
								doorId,
								elm$core$Maybe$map(
									author$project$Architecture$Door$moveBy(units)),
								wallProperties.doors)
						}));
			default:
				var _n8 = _n0.a;
				return wall;
		}
	});
var author$project$Architecture$Item$update = F2(
	function (itemMessage, _n0) {
		var data = _n0.a;
		var _n1 = _Utils_Tuple2(itemMessage, data.itemType);
		_n1$2:
		while (true) {
			if (_n1.a.$ === 'WallMessage') {
				if (_n1.b.$ === 'WallItem') {
					var message = _n1.a.a;
					var wall = _n1.b.a;
					return author$project$Architecture$Item$Item(
						_Utils_update(
							data,
							{
								itemType: author$project$Architecture$Item$WallItem(
									A2(author$project$Architecture$Wall$update, message, wall))
							}));
				} else {
					break _n1$2;
				}
			} else {
				if (_n1.b.$ === 'EquipmentItem') {
					var message = _n1.a.a;
					var equipment = _n1.b.a;
					return author$project$Architecture$Item$Item(
						_Utils_update(
							data,
							{
								itemType: author$project$Architecture$Item$EquipmentItem(
									A2(author$project$Architecture$Equipment$update, message, equipment))
							}));
				} else {
					break _n1$2;
				}
			}
		}
		return author$project$Architecture$Item$Item(data);
	});
var author$project$Pages$Interior$BuildingWalls = function (a) {
	return {$: 'BuildingWalls', a: a};
};
var author$project$Pages$Interior$DraggingOrTapping = F3(
	function (a, b, c) {
		return {$: 'DraggingOrTapping', a: a, b: b, c: c};
	});
var author$project$Pages$Interior$DrawingWall = {$: 'DrawingWall'};
var author$project$Pages$Interior$FinishBurstAnimation = function (a) {
	return {$: 'FinishBurstAnimation', a: a};
};
var author$project$Pages$Interior$GrabbedFromPlan = {$: 'GrabbedFromPlan'};
var author$project$Pages$Interior$GrabbedInDrawer = function (a) {
	return {$: 'GrabbedInDrawer', a: a};
};
var author$project$Pages$Interior$MouseUpData = F5(
	function (a, b, c, d, e) {
		return {$: 'MouseUpData', a: a, b: b, c: c, d: d, e: e};
	});
var author$project$Pages$Interior$TakenOutOfDrawer = {$: 'TakenOutOfDrawer'};
var author$project$Pages$Interior$WithinDrawer = {$: 'WithinDrawer'};
var author$project$Pages$Interior$WithinItem = {$: 'WithinItem'};
var author$project$Architecture$Item$collidesWithBoundingBoxes = F2(
	function (item, boundingBoxes) {
		return A2(
			elm$core$List$any,
			function (boundingBox) {
				return A2(
					elm$core$List$any,
					author$project$Grid$Boundary$overlapsWithBoundingBox2d(boundingBox),
					author$project$Grid$Footprint$boundaries(
						author$project$Architecture$Item$footprint(item)));
			},
			boundingBoxes);
	});
var author$project$Grid$Footprint$toBoundingBoxes = function (_n0) {
	var gridBoundaries = _n0.a;
	return A2(elm$core$List$map, author$project$Grid$Boundary$toBoundingBox2d, gridBoundaries);
};
var author$project$Architecture$Item$collidesWithItems = F3(
	function (existingItems, otherItems, item) {
		var otherItemsBoundingBoxes = A2(
			elm$core$List$map,
			author$project$Grid$Footprint$toBoundingBoxes,
			A2(elm$core$List$map, author$project$Architecture$Item$footprint, otherItems));
		var existingItemsBoundingBoxes = A2(elm$core$List$map, author$project$Architecture$ExistingItem$boundingBoxes, existingItems);
		return A2(
			elm$core$List$any,
			author$project$Architecture$Item$collidesWithBoundingBoxes(item),
			_Utils_ap(otherItemsBoundingBoxes, existingItemsBoundingBoxes));
	});
var author$project$Architecture$Wall$setTranslation = F2(
	function (newTranslation, _n0) {
		var data = _n0.a;
		return author$project$Architecture$Wall$Wall(
			_Utils_update(
				data,
				{originToSouthEastCorner: newTranslation}));
	});
var author$project$Architecture$Item$setTranslation = F2(
	function (newTranslation, _n0) {
		var data = _n0.a;
		var newItemType = function () {
			var _n1 = data.itemType;
			if (_n1.$ === 'EquipmentItem') {
				var equipment = _n1.a;
				return author$project$Architecture$Item$EquipmentItem(
					A2(author$project$Architecture$Equipment$setTranslation, newTranslation, equipment));
			} else {
				var wall = _n1.a;
				return author$project$Architecture$Item$WallItem(
					A2(author$project$Architecture$Wall$setTranslation, newTranslation, wall));
			}
		}();
		return author$project$Architecture$Item$Item(
			_Utils_update(
				data,
				{itemType: newItemType}));
	});
var author$project$Pages$Interior$draggedItem = F3(
	function (model, originalItemTranslation, item) {
		var unitsFromPixels = author$project$Grid$Units$fromPixels(model.pixelsPerMillimeter);
		var lastMouseDown = A2(
			elm$core$Maybe$withDefault,
			{x: 0, y: 0},
			model.lastMouseDownPosition);
		var currentMouseMove = A2(
			elm$core$Maybe$withDefault,
			{x: 0, y: 0},
			model.currentMouseMovePosition);
		var translatedX = author$project$Grid$Vector$xComponent(originalItemTranslation) + unitsFromPixels(currentMouseMove.x - lastMouseDown.x);
		var translatedY = author$project$Grid$Vector$yComponent(originalItemTranslation) - unitsFromPixels(currentMouseMove.y - lastMouseDown.y);
		return A2(
			elm$core$Maybe$withDefault,
			item,
			A2(
				elm_community$list_extra$List$Extra$find,
				A2(
					elm$core$Basics$composeL,
					elm$core$Basics$not,
					A2(
						author$project$Architecture$Item$collidesWithItems,
						model.session.existingItems,
						author$project$Pages$Interior$items(model))),
				_List_fromArray(
					[
						A2(
						author$project$Architecture$Item$setTranslation,
						A2(author$project$Grid$Vector$gridVector, translatedX, translatedY),
						item),
						A2(
						author$project$Architecture$Item$setTranslation,
						A2(
							author$project$Grid$Vector$gridVector,
							translatedX,
							author$project$Grid$Vector$yComponent(
								author$project$Architecture$Item$translation(item))),
						item),
						A2(
						author$project$Architecture$Item$setTranslation,
						A2(
							author$project$Grid$Vector$gridVector,
							author$project$Grid$Vector$xComponent(
								author$project$Architecture$Item$translation(item)),
							translatedY),
						item)
					])));
	});
var author$project$Pages$Interior$withZoom = F2(
	function (zoomRatio, model) {
		var currentMouseMovePosition = A2(
			elm$core$Maybe$withDefault,
			{x: 0, y: 0},
			model.currentMouseMovePosition);
		var offsetCoordinate = F2(
			function (getPointCoordinate, getViewportDimension) {
				return (getPointCoordinate(model.viewportOffset) * zoomRatio) + ((getPointCoordinate(currentMouseMovePosition) - (getViewportDimension(model.session.viewport) / 2)) * (zoomRatio - 1));
			});
		return _Utils_update(
			model,
			{
				pixelsPerMillimeter: model.pixelsPerMillimeter * zoomRatio,
				viewportOffset: {
					x: A2(
						offsetCoordinate,
						function ($) {
							return $.x;
						},
						function ($) {
							return $.width;
						}),
					y: A2(
						offsetCoordinate,
						function ($) {
							return $.y;
						},
						function ($) {
							return $.height;
						})
				}
			});
	});
var author$project$Pages$Interior$Burst$duration = 1000;
var author$project$Pages$Interior$ContextMenu$optionSpacing = 8;
var elm$core$Process$sleep = _Process_sleep;
var author$project$Utilities$executeAfter = F2(
	function (milliseconds, message) {
		return A2(
			elm$core$Task$perform,
			elm$core$Basics$identity,
			A2(
				elm$core$Task$andThen,
				elm$core$Basics$always(
					elm$core$Task$succeed(message)),
				elm$core$Process$sleep(milliseconds)));
	});
var author$project$Views$ContextMenuOption$optionIconSize = 32;
var elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var elm$time$Time$posixToMillis = function (_n0) {
	var millis = _n0.a;
	return millis;
};
var mdgriffith$elm_style_animation$Animation$extractInitialWait = function (steps) {
	var _n0 = elm$core$List$head(steps);
	if (_n0.$ === 'Nothing') {
		return _Utils_Tuple2(
			elm$time$Time$millisToPosix(0),
			_List_Nil);
	} else {
		var step = _n0.a;
		if (step.$ === 'Wait') {
			var till = step.a;
			var _n2 = mdgriffith$elm_style_animation$Animation$extractInitialWait(
				A2(elm$core$List$drop, 1, steps));
			var additionalTime = _n2.a;
			var remainingSteps = _n2.b;
			return _Utils_Tuple2(
				elm$time$Time$millisToPosix(
					elm$time$Time$posixToMillis(till) + elm$time$Time$posixToMillis(additionalTime)),
				remainingSteps);
		} else {
			return _Utils_Tuple2(
				elm$time$Time$millisToPosix(0),
				steps);
		}
	}
};
var mdgriffith$elm_style_animation$Animation$interrupt = F2(
	function (steps, _n0) {
		var model = _n0.a;
		return mdgriffith$elm_style_animation$Animation$Model$Animation(
			_Utils_update(
				model,
				{
					interruption: A2(
						elm$core$List$cons,
						mdgriffith$elm_style_animation$Animation$extractInitialWait(steps),
						model.interruption),
					running: true
				}));
	});
var mdgriffith$elm_style_animation$Animation$Model$To = function (a) {
	return {$: 'To', a: a};
};
var mdgriffith$elm_style_animation$Animation$to = function (props) {
	return mdgriffith$elm_style_animation$Animation$Model$To(props);
};
var elm$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _n0) {
				var trues = _n0.a;
				var falses = _n0.b;
				return pred(x) ? _Utils_Tuple2(
					A2(elm$core$List$cons, x, trues),
					falses) : _Utils_Tuple2(
					trues,
					A2(elm$core$List$cons, x, falses));
			});
		return A3(
			elm$core$List$foldr,
			step,
			_Utils_Tuple2(_List_Nil, _List_Nil),
			list);
	});
var mdgriffith$elm_style_animation$Animation$Model$refreshTiming = F2(
	function (now, timing) {
		var dt = elm$time$Time$posixToMillis(now) - elm$time$Time$posixToMillis(timing.current);
		return {
			current: now,
			dt: ((dt > 34) || (!elm$time$Time$posixToMillis(timing.current))) ? elm$time$Time$millisToPosix(
				elm$core$Basics$round(16.666)) : elm$time$Time$millisToPosix(dt)
		};
	});
var elm$core$List$all = F2(
	function (isOkay, list) {
		return !A2(
			elm$core$List$any,
			A2(elm$core$Basics$composeL, elm$core$Basics$not, isOkay),
			list);
	});
var mdgriffith$elm_style_animation$Animation$Model$Loop = function (a) {
	return {$: 'Loop', a: a};
};
var mdgriffith$elm_style_animation$Animation$Model$Repeat = F2(
	function (a, b) {
		return {$: 'Repeat', a: a, b: b};
	});
var mdgriffith$elm_style_animation$Animation$Model$Step = {$: 'Step'};
var mdgriffith$elm_style_animation$Animation$Model$Wait = function (a) {
	return {$: 'Wait', a: a};
};
var mdgriffith$elm_style_animation$Animation$Model$isCmdDone = function (cmd) {
	var motionDone = function (motion) {
		return (!motion.velocity) && _Utils_eq(motion.position, motion.target);
	};
	switch (cmd.$) {
		case 'Move':
			var m1 = cmd.a;
			var m2 = cmd.b;
			return motionDone(m1) && motionDone(m2);
		case 'MoveTo':
			var m1 = cmd.a;
			var m2 = cmd.b;
			return motionDone(m1) && motionDone(m2);
		case 'Line':
			var m1 = cmd.a;
			var m2 = cmd.b;
			return motionDone(m1) && motionDone(m2);
		case 'LineTo':
			var m1 = cmd.a;
			var m2 = cmd.b;
			return motionDone(m1) && motionDone(m2);
		case 'Horizontal':
			var motion = cmd.a;
			return motionDone(motion);
		case 'HorizontalTo':
			var motion = cmd.a;
			return motionDone(motion);
		case 'Vertical':
			var motion = cmd.a;
			return motionDone(motion);
		case 'VerticalTo':
			var motion = cmd.a;
			return motionDone(motion);
		case 'Curve':
			var control1 = cmd.a.control1;
			var control2 = cmd.a.control2;
			var point = cmd.a.point;
			return motionDone(control1.a) && (motionDone(control1.b) && (motionDone(control2.a) && (motionDone(control2.b) && (motionDone(point.a) && motionDone(point.b)))));
		case 'CurveTo':
			var control1 = cmd.a.control1;
			var control2 = cmd.a.control2;
			var point = cmd.a.point;
			return motionDone(control1.a) && (motionDone(control1.b) && (motionDone(control2.a) && (motionDone(control2.b) && (motionDone(point.a) && motionDone(point.b)))));
		case 'Quadratic':
			var control = cmd.a.control;
			var point = cmd.a.point;
			return motionDone(control.a) && (motionDone(control.b) && (motionDone(point.a) && motionDone(point.b)));
		case 'QuadraticTo':
			var control = cmd.a.control;
			var point = cmd.a.point;
			return motionDone(control.a) && (motionDone(control.b) && (motionDone(point.a) && motionDone(point.b)));
		case 'SmoothQuadratic':
			var coords = cmd.a;
			return A2(
				elm$core$List$all,
				function (_n1) {
					var x = _n1.a;
					var y = _n1.b;
					return motionDone(x) && motionDone(y);
				},
				coords);
		case 'SmoothQuadraticTo':
			var coords = cmd.a;
			return A2(
				elm$core$List$all,
				function (_n2) {
					var x = _n2.a;
					var y = _n2.b;
					return motionDone(x) && motionDone(y);
				},
				coords);
		case 'Smooth':
			var coords = cmd.a;
			return A2(
				elm$core$List$all,
				function (_n3) {
					var x = _n3.a;
					var y = _n3.b;
					return motionDone(x) && motionDone(y);
				},
				coords);
		case 'SmoothTo':
			var coords = cmd.a;
			return A2(
				elm$core$List$all,
				function (_n4) {
					var x = _n4.a;
					var y = _n4.b;
					return motionDone(x) && motionDone(y);
				},
				coords);
		case 'ClockwiseArc':
			var arc = cmd.a;
			return motionDone(arc.x) && (motionDone(arc.y) && (motionDone(arc.radius) && (motionDone(arc.startAngle) && motionDone(arc.endAngle))));
		case 'AntiClockwiseArc':
			var arc = cmd.a;
			return motionDone(arc.x) && (motionDone(arc.y) && (motionDone(arc.radius) && (motionDone(arc.startAngle) && motionDone(arc.endAngle))));
		default:
			return true;
	}
};
var mdgriffith$elm_style_animation$Animation$Model$isDone = function (property) {
	var motionDone = function (motion) {
		var runningInterpolation = A2(elm$core$Maybe$withDefault, motion.interpolation, motion.interpolationOverride);
		switch (runningInterpolation.$) {
			case 'Spring':
				return (!motion.velocity) && _Utils_eq(motion.position, motion.target);
			case 'Easing':
				var eased = runningInterpolation.a;
				return (eased.progress === 1) || ((!eased.progress) && _Utils_eq(motion.position, motion.target));
			default:
				var speed = runningInterpolation.a;
				return _Utils_eq(motion.position, motion.target);
		}
	};
	switch (property.$) {
		case 'ExactProperty':
			return true;
		case 'ColorProperty':
			var m1 = property.b;
			var m2 = property.c;
			var m3 = property.d;
			var m4 = property.e;
			return A2(
				elm$core$List$all,
				motionDone,
				_List_fromArray(
					[m1, m2, m3, m4]));
		case 'ShadowProperty':
			var shadow = property.c;
			return A2(
				elm$core$List$all,
				motionDone,
				_List_fromArray(
					[shadow.offsetX, shadow.offsetY, shadow.size, shadow.blur, shadow.red, shadow.green, shadow.blue, shadow.alpha]));
		case 'Property':
			var m1 = property.b;
			return motionDone(m1);
		case 'Property2':
			var m1 = property.b;
			var m2 = property.c;
			return motionDone(m1) && motionDone(m2);
		case 'Property3':
			var m1 = property.b;
			var m2 = property.c;
			var m3 = property.d;
			return A2(
				elm$core$List$all,
				motionDone,
				_List_fromArray(
					[m1, m2, m3]));
		case 'Property4':
			var m1 = property.b;
			var m2 = property.c;
			var m3 = property.d;
			var m4 = property.e;
			return A2(
				elm$core$List$all,
				motionDone,
				_List_fromArray(
					[m1, m2, m3, m4]));
		case 'AngleProperty':
			var m1 = property.b;
			return motionDone(m1);
		case 'Points':
			var ms = property.a;
			return A2(
				elm$core$List$all,
				function (_n1) {
					var x = _n1.a;
					var y = _n1.b;
					return motionDone(x) && motionDone(y);
				},
				ms);
		default:
			var cmds = property.a;
			return A2(elm$core$List$all, mdgriffith$elm_style_animation$Animation$Model$isCmdDone, cmds);
	}
};
var mdgriffith$elm_style_animation$Animation$Model$Easing = function (a) {
	return {$: 'Easing', a: a};
};
var elm$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (n <= 0) {
				return result;
			} else {
				var $temp$result = A2(elm$core$List$cons, value, result),
					$temp$n = n - 1,
					$temp$value = value;
				result = $temp$result;
				n = $temp$n;
				value = $temp$value;
				continue repeatHelp;
			}
		}
	});
var elm$core$List$repeat = F2(
	function (n, value) {
		return A3(elm$core$List$repeatHelp, _List_Nil, n, value);
	});
var mdgriffith$elm_style_animation$Animation$Model$matchPoints = F2(
	function (points1, points2) {
		var diff = elm$core$List$length(points1) - elm$core$List$length(points2);
		if (diff > 0) {
			var _n0 = elm$core$List$head(
				elm$core$List$reverse(points2));
			if (_n0.$ === 'Nothing') {
				return _Utils_Tuple2(points1, points2);
			} else {
				var last2 = _n0.a;
				return _Utils_Tuple2(
					points1,
					_Utils_ap(
						points2,
						A2(
							elm$core$List$repeat,
							elm$core$Basics$abs(diff),
							last2)));
			}
		} else {
			if (diff < 0) {
				var _n1 = elm$core$List$head(
					elm$core$List$reverse(points1));
				if (_n1.$ === 'Nothing') {
					return _Utils_Tuple2(points1, points2);
				} else {
					var last1 = _n1.a;
					return _Utils_Tuple2(
						_Utils_ap(
							points1,
							A2(
								elm$core$List$repeat,
								elm$core$Basics$abs(diff),
								last1)),
						points2);
				}
			} else {
				return _Utils_Tuple2(points1, points2);
			}
		}
	});
var mdgriffith$elm_style_animation$Animation$Model$setPathTarget = F2(
	function (cmd, targetCmd) {
		var setMotionTarget = F2(
			function (motion, targetMotion) {
				var _n27 = motion.interpolation;
				if (_n27.$ === 'Easing') {
					var ease = _n27.a;
					return _Utils_update(
						motion,
						{
							interpolation: mdgriffith$elm_style_animation$Animation$Model$Easing(
								_Utils_update(
									ease,
									{start: motion.position})),
							target: targetMotion.position
						});
				} else {
					return _Utils_update(
						motion,
						{target: targetMotion.position});
				}
			});
		switch (cmd.$) {
			case 'Move':
				var m1 = cmd.a;
				var m2 = cmd.b;
				if (targetCmd.$ === 'Move') {
					var t1 = targetCmd.a;
					var t2 = targetCmd.b;
					return A2(
						mdgriffith$elm_style_animation$Animation$Model$Move,
						A2(setMotionTarget, m1, t1),
						A2(setMotionTarget, m2, t2));
				} else {
					return cmd;
				}
			case 'MoveTo':
				var m1 = cmd.a;
				var m2 = cmd.b;
				if (targetCmd.$ === 'MoveTo') {
					var t1 = targetCmd.a;
					var t2 = targetCmd.b;
					return A2(
						mdgriffith$elm_style_animation$Animation$Model$MoveTo,
						A2(setMotionTarget, m1, t1),
						A2(setMotionTarget, m2, t2));
				} else {
					return cmd;
				}
			case 'Line':
				var m1 = cmd.a;
				var m2 = cmd.b;
				if (targetCmd.$ === 'Line') {
					var t1 = targetCmd.a;
					var t2 = targetCmd.b;
					return A2(
						mdgriffith$elm_style_animation$Animation$Model$Line,
						A2(setMotionTarget, m1, t1),
						A2(setMotionTarget, m2, t2));
				} else {
					return cmd;
				}
			case 'LineTo':
				var m1 = cmd.a;
				var m2 = cmd.b;
				if (targetCmd.$ === 'LineTo') {
					var t1 = targetCmd.a;
					var t2 = targetCmd.b;
					return A2(
						mdgriffith$elm_style_animation$Animation$Model$LineTo,
						A2(setMotionTarget, m1, t1),
						A2(setMotionTarget, m2, t2));
				} else {
					return cmd;
				}
			case 'Horizontal':
				var m1 = cmd.a;
				if (targetCmd.$ === 'Horizontal') {
					var t1 = targetCmd.a;
					return mdgriffith$elm_style_animation$Animation$Model$Horizontal(
						A2(setMotionTarget, m1, t1));
				} else {
					return cmd;
				}
			case 'HorizontalTo':
				var m1 = cmd.a;
				if (targetCmd.$ === 'HorizontalTo') {
					var t1 = targetCmd.a;
					return mdgriffith$elm_style_animation$Animation$Model$HorizontalTo(
						A2(setMotionTarget, m1, t1));
				} else {
					return cmd;
				}
			case 'Vertical':
				var m1 = cmd.a;
				if (targetCmd.$ === 'Vertical') {
					var t1 = targetCmd.a;
					return mdgriffith$elm_style_animation$Animation$Model$Vertical(
						A2(setMotionTarget, m1, t1));
				} else {
					return cmd;
				}
			case 'VerticalTo':
				var m1 = cmd.a;
				if (targetCmd.$ === 'VerticalTo') {
					var t1 = targetCmd.a;
					return mdgriffith$elm_style_animation$Animation$Model$VerticalTo(
						A2(setMotionTarget, m1, t1));
				} else {
					return cmd;
				}
			case 'Curve':
				var points = cmd.a;
				if (targetCmd.$ === 'Curve') {
					var targets = targetCmd.a;
					return mdgriffith$elm_style_animation$Animation$Model$Curve(
						{
							control1: _Utils_Tuple2(
								A2(setMotionTarget, points.control1.a, targets.control1.a),
								A2(setMotionTarget, points.control1.b, targets.control1.b)),
							control2: _Utils_Tuple2(
								A2(setMotionTarget, points.control2.a, targets.control2.a),
								A2(setMotionTarget, points.control2.b, targets.control2.b)),
							point: _Utils_Tuple2(
								A2(setMotionTarget, points.point.a, targets.point.a),
								A2(setMotionTarget, points.point.b, targets.point.b))
						});
				} else {
					return cmd;
				}
			case 'CurveTo':
				var points = cmd.a;
				if (targetCmd.$ === 'CurveTo') {
					var targets = targetCmd.a;
					return mdgriffith$elm_style_animation$Animation$Model$CurveTo(
						{
							control1: _Utils_Tuple2(
								A2(setMotionTarget, points.control1.a, targets.control1.a),
								A2(setMotionTarget, points.control1.b, targets.control1.b)),
							control2: _Utils_Tuple2(
								A2(setMotionTarget, points.control2.a, targets.control2.a),
								A2(setMotionTarget, points.control2.b, targets.control2.b)),
							point: _Utils_Tuple2(
								A2(setMotionTarget, points.point.a, targets.point.a),
								A2(setMotionTarget, points.point.b, targets.point.b))
						});
				} else {
					return cmd;
				}
			case 'Quadratic':
				var points = cmd.a;
				if (targetCmd.$ === 'Quadratic') {
					var targets = targetCmd.a;
					return mdgriffith$elm_style_animation$Animation$Model$Quadratic(
						{
							control: _Utils_Tuple2(
								A2(setMotionTarget, points.control.a, targets.control.a),
								A2(setMotionTarget, points.control.b, targets.control.b)),
							point: _Utils_Tuple2(
								A2(setMotionTarget, points.point.a, targets.point.a),
								A2(setMotionTarget, points.point.b, targets.point.b))
						});
				} else {
					return cmd;
				}
			case 'QuadraticTo':
				var points = cmd.a;
				if (targetCmd.$ === 'QuadraticTo') {
					var targets = targetCmd.a;
					return mdgriffith$elm_style_animation$Animation$Model$QuadraticTo(
						{
							control: _Utils_Tuple2(
								A2(setMotionTarget, points.control.a, targets.control.a),
								A2(setMotionTarget, points.control.b, targets.control.b)),
							point: _Utils_Tuple2(
								A2(setMotionTarget, points.point.a, targets.point.a),
								A2(setMotionTarget, points.point.b, targets.point.b))
						});
				} else {
					return cmd;
				}
			case 'SmoothQuadratic':
				var coords = cmd.a;
				if (targetCmd.$ === 'SmoothQuadratic') {
					var targetCoords = targetCmd.a;
					return mdgriffith$elm_style_animation$Animation$Model$SmoothQuadratic(
						A3(
							elm$core$List$map2,
							F2(
								function (_n14, _n15) {
									var x1 = _n14.a;
									var y1 = _n14.b;
									var x2 = _n15.a;
									var y2 = _n15.b;
									return _Utils_Tuple2(
										A2(setMotionTarget, x1, x2),
										A2(setMotionTarget, y1, y2));
								}),
							coords,
							targetCoords));
				} else {
					return cmd;
				}
			case 'SmoothQuadraticTo':
				var coords = cmd.a;
				if (targetCmd.$ === 'SmoothQuadraticTo') {
					var targetCoords = targetCmd.a;
					return mdgriffith$elm_style_animation$Animation$Model$SmoothQuadraticTo(
						A3(
							elm$core$List$map2,
							F2(
								function (_n17, _n18) {
									var x1 = _n17.a;
									var y1 = _n17.b;
									var x2 = _n18.a;
									var y2 = _n18.b;
									return _Utils_Tuple2(
										A2(setMotionTarget, x1, x2),
										A2(setMotionTarget, y1, y2));
								}),
							coords,
							targetCoords));
				} else {
					return cmd;
				}
			case 'Smooth':
				var coords = cmd.a;
				if (targetCmd.$ === 'Smooth') {
					var targetCoords = targetCmd.a;
					return mdgriffith$elm_style_animation$Animation$Model$Smooth(
						A3(
							elm$core$List$map2,
							F2(
								function (_n20, _n21) {
									var x1 = _n20.a;
									var y1 = _n20.b;
									var x2 = _n21.a;
									var y2 = _n21.b;
									return _Utils_Tuple2(
										A2(setMotionTarget, x1, x2),
										A2(setMotionTarget, y1, y2));
								}),
							coords,
							targetCoords));
				} else {
					return cmd;
				}
			case 'SmoothTo':
				var coords = cmd.a;
				if (targetCmd.$ === 'SmoothTo') {
					var targetCoords = targetCmd.a;
					return mdgriffith$elm_style_animation$Animation$Model$SmoothTo(
						A3(
							elm$core$List$map2,
							F2(
								function (_n23, _n24) {
									var x1 = _n23.a;
									var y1 = _n23.b;
									var x2 = _n24.a;
									var y2 = _n24.b;
									return _Utils_Tuple2(
										A2(setMotionTarget, x1, x2),
										A2(setMotionTarget, y1, y2));
								}),
							coords,
							targetCoords));
				} else {
					return cmd;
				}
			case 'ClockwiseArc':
				var arc = cmd.a;
				if (targetCmd.$ === 'ClockwiseArc') {
					var target = targetCmd.a;
					return mdgriffith$elm_style_animation$Animation$Model$ClockwiseArc(
						function () {
							var y = arc.y;
							var x = arc.x;
							var startAngle = arc.startAngle;
							var radius = arc.radius;
							var endAngle = arc.endAngle;
							return _Utils_update(
								arc,
								{
									endAngle: A2(setMotionTarget, endAngle, target.endAngle),
									radius: A2(setMotionTarget, radius, target.radius),
									startAngle: A2(setMotionTarget, startAngle, target.startAngle),
									x: A2(setMotionTarget, x, target.x),
									y: A2(setMotionTarget, y, target.y)
								});
						}());
				} else {
					return cmd;
				}
			case 'AntiClockwiseArc':
				var arc = cmd.a;
				if (targetCmd.$ === 'AntiClockwiseArc') {
					var target = targetCmd.a;
					return mdgriffith$elm_style_animation$Animation$Model$AntiClockwiseArc(
						function () {
							var y = arc.y;
							var x = arc.x;
							var startAngle = arc.startAngle;
							var radius = arc.radius;
							var endAngle = arc.endAngle;
							return _Utils_update(
								arc,
								{
									endAngle: A2(setMotionTarget, endAngle, target.endAngle),
									radius: A2(setMotionTarget, radius, target.radius),
									startAngle: A2(setMotionTarget, startAngle, target.startAngle),
									x: A2(setMotionTarget, x, target.x),
									y: A2(setMotionTarget, y, target.y)
								});
						}());
				} else {
					return cmd;
				}
			default:
				return mdgriffith$elm_style_animation$Animation$Model$Close;
		}
	});
var mdgriffith$elm_style_animation$Animation$Model$setTarget = F3(
	function (overrideInterpolation, current, newTarget) {
		var setMotionTarget = F2(
			function (motion, targetMotion) {
				var newMotion = overrideInterpolation ? _Utils_update(
					motion,
					{
						interpolationOverride: elm$core$Maybe$Just(targetMotion.interpolation)
					}) : motion;
				var _n13 = newMotion.interpolationOverride;
				if (_n13.$ === 'Nothing') {
					var _n14 = newMotion.interpolation;
					if (_n14.$ === 'Easing') {
						var ease = _n14.a;
						return _Utils_update(
							newMotion,
							{
								interpolation: mdgriffith$elm_style_animation$Animation$Model$Easing(
									_Utils_update(
										ease,
										{progress: 0, start: motion.position})),
								target: targetMotion.position
							});
					} else {
						return _Utils_update(
							newMotion,
							{target: targetMotion.position});
					}
				} else {
					var override = _n13.a;
					if (override.$ === 'Easing') {
						var ease = override.a;
						return _Utils_update(
							newMotion,
							{
								interpolationOverride: elm$core$Maybe$Just(
									mdgriffith$elm_style_animation$Animation$Model$Easing(
										_Utils_update(
											ease,
											{progress: 0, start: motion.position}))),
								target: targetMotion.position
							});
					} else {
						return _Utils_update(
							newMotion,
							{target: targetMotion.position});
					}
				}
			});
		switch (current.$) {
			case 'ExactProperty':
				var name = current.a;
				var value = current.b;
				return A2(mdgriffith$elm_style_animation$Animation$Model$ExactProperty, name, value);
			case 'ColorProperty':
				var name = current.a;
				var m1 = current.b;
				var m2 = current.c;
				var m3 = current.d;
				var m4 = current.e;
				if (newTarget.$ === 'ColorProperty') {
					var t1 = newTarget.b;
					var t2 = newTarget.c;
					var t3 = newTarget.d;
					var t4 = newTarget.e;
					return A5(
						mdgriffith$elm_style_animation$Animation$Model$ColorProperty,
						name,
						A2(setMotionTarget, m1, t1),
						A2(setMotionTarget, m2, t2),
						A2(setMotionTarget, m3, t3),
						A2(setMotionTarget, m4, t4));
				} else {
					return current;
				}
			case 'ShadowProperty':
				var name = current.a;
				var inset = current.b;
				var shadow = current.c;
				if (newTarget.$ === 'ShadowProperty') {
					var targetShadow = newTarget.c;
					return A3(
						mdgriffith$elm_style_animation$Animation$Model$ShadowProperty,
						name,
						inset,
						{
							alpha: A2(setMotionTarget, shadow.alpha, targetShadow.alpha),
							blue: A2(setMotionTarget, shadow.blue, targetShadow.blue),
							blur: A2(setMotionTarget, shadow.blur, targetShadow.blur),
							green: A2(setMotionTarget, shadow.green, targetShadow.green),
							offsetX: A2(setMotionTarget, shadow.offsetX, targetShadow.offsetX),
							offsetY: A2(setMotionTarget, shadow.offsetY, targetShadow.offsetY),
							red: A2(setMotionTarget, shadow.red, targetShadow.red),
							size: A2(setMotionTarget, shadow.size, targetShadow.size)
						});
				} else {
					return current;
				}
			case 'Property':
				var name = current.a;
				var m1 = current.b;
				if (newTarget.$ === 'Property') {
					var t1 = newTarget.b;
					return A2(
						mdgriffith$elm_style_animation$Animation$Model$Property,
						name,
						A2(setMotionTarget, m1, t1));
				} else {
					return current;
				}
			case 'Property2':
				var name = current.a;
				var m1 = current.b;
				var m2 = current.c;
				if (newTarget.$ === 'Property2') {
					var t1 = newTarget.b;
					var t2 = newTarget.c;
					return A3(
						mdgriffith$elm_style_animation$Animation$Model$Property2,
						name,
						A2(setMotionTarget, m1, t1),
						A2(setMotionTarget, m2, t2));
				} else {
					return current;
				}
			case 'Property3':
				var name = current.a;
				var m1 = current.b;
				var m2 = current.c;
				var m3 = current.d;
				if (newTarget.$ === 'Property3') {
					var t1 = newTarget.b;
					var t2 = newTarget.c;
					var t3 = newTarget.d;
					return A4(
						mdgriffith$elm_style_animation$Animation$Model$Property3,
						name,
						A2(setMotionTarget, m1, t1),
						A2(setMotionTarget, m2, t2),
						A2(setMotionTarget, m3, t3));
				} else {
					return current;
				}
			case 'Property4':
				var name = current.a;
				var m1 = current.b;
				var m2 = current.c;
				var m3 = current.d;
				var m4 = current.e;
				if (newTarget.$ === 'Property4') {
					var t1 = newTarget.b;
					var t2 = newTarget.c;
					var t3 = newTarget.d;
					var t4 = newTarget.e;
					return A5(
						mdgriffith$elm_style_animation$Animation$Model$Property4,
						name,
						A2(setMotionTarget, m1, t1),
						A2(setMotionTarget, m2, t2),
						A2(setMotionTarget, m3, t3),
						A2(setMotionTarget, m4, t4));
				} else {
					return current;
				}
			case 'AngleProperty':
				var name = current.a;
				var m1 = current.b;
				if (newTarget.$ === 'AngleProperty') {
					var t1 = newTarget.b;
					return A2(
						mdgriffith$elm_style_animation$Animation$Model$AngleProperty,
						name,
						A2(setMotionTarget, m1, t1));
				} else {
					return current;
				}
			case 'Points':
				var currentPts = current.a;
				if (newTarget.$ === 'Points') {
					var targetPts = newTarget.a;
					var _n9 = A2(mdgriffith$elm_style_animation$Animation$Model$matchPoints, currentPts, targetPts);
					var m1s = _n9.a;
					var m2s = _n9.b;
					return mdgriffith$elm_style_animation$Animation$Model$Points(
						A3(
							elm$core$List$map2,
							F2(
								function (_n10, _n11) {
									var x1 = _n10.a;
									var y1 = _n10.b;
									var x2 = _n11.a;
									var y2 = _n11.b;
									return _Utils_Tuple2(
										A2(setMotionTarget, x1, x2),
										A2(setMotionTarget, y1, y2));
								}),
							m1s,
							m2s));
				} else {
					return current;
				}
			default:
				var cmds = current.a;
				if (newTarget.$ === 'Path') {
					var targets = newTarget.a;
					return mdgriffith$elm_style_animation$Animation$Model$Path(
						A3(elm$core$List$map2, mdgriffith$elm_style_animation$Animation$Model$setPathTarget, cmds, targets));
				} else {
					return current;
				}
		}
	});
var mdgriffith$elm_style_animation$Animation$Model$zipPropertiesGreedy = F2(
	function (initialProps, newTargetProps) {
		var propertyMatch = F2(
			function (prop1, prop2) {
				return _Utils_eq(
					mdgriffith$elm_style_animation$Animation$Model$propertyName(prop1),
					mdgriffith$elm_style_animation$Animation$Model$propertyName(prop2));
			});
		var _n0 = A3(
			elm$core$List$foldl,
			F2(
				function (_n1, _n2) {
					var stackA = _n2.a;
					var stackB = _n2.b;
					var result = _n2.c;
					var _n3 = elm$core$List$head(stackA);
					if (_n3.$ === 'Nothing') {
						return _Utils_Tuple3(stackA, stackB, result);
					} else {
						var a = _n3.a;
						var _n4 = A2(
							elm$core$List$partition,
							propertyMatch(a),
							stackB);
						var matchingBs = _n4.a;
						var nonMatchingBs = _n4.b;
						return _Utils_Tuple3(
							A2(elm$core$List$drop, 1, stackA),
							function () {
								if (!matchingBs.b) {
									return nonMatchingBs;
								} else {
									var b = matchingBs.a;
									var remainingBs = matchingBs.b;
									return _Utils_ap(remainingBs, nonMatchingBs);
								}
							}(),
							A2(
								elm$core$List$cons,
								_Utils_Tuple2(
									a,
									elm$core$List$head(matchingBs)),
								result));
					}
				}),
			_Utils_Tuple3(initialProps, newTargetProps, _List_Nil),
			A2(
				elm$core$List$repeat,
				elm$core$List$length(initialProps),
				0));
		var warnings = _n0.b;
		var props = _n0.c;
		var _n6 = warnings;
		return elm$core$List$reverse(props);
	});
var mdgriffith$elm_style_animation$Animation$Model$startTowards = F3(
	function (overrideInterpolation, current, target) {
		return A2(
			elm$core$List$filterMap,
			function (propPair) {
				if (propPair.b.$ === 'Just') {
					var cur = propPair.a;
					var to = propPair.b.a;
					return elm$core$Maybe$Just(
						A3(mdgriffith$elm_style_animation$Animation$Model$setTarget, overrideInterpolation, cur, to));
				} else {
					var prop = propPair.a;
					var _n1 = propPair.b;
					return elm$core$Maybe$Just(prop);
				}
			},
			A2(mdgriffith$elm_style_animation$Animation$Model$zipPropertiesGreedy, current, target));
	});
var mdgriffith$elm_style_animation$Animation$Model$tolerance = 1.0e-2;
var mdgriffith$elm_style_animation$Animation$Model$vTolerance = 0.1;
var mdgriffith$elm_style_animation$Animation$Model$stepInterpolation = F2(
	function (posix, motion) {
		var interpolationToUse = A2(elm$core$Maybe$withDefault, motion.interpolation, motion.interpolationOverride);
		var dtms = elm$time$Time$posixToMillis(posix);
		switch (interpolationToUse.$) {
			case 'AtSpeed':
				var perSecond = interpolationToUse.a.perSecond;
				var _n1 = function () {
					if (_Utils_cmp(motion.position, motion.target) < 0) {
						var _new = motion.position + (perSecond * (dtms / 1000));
						return _Utils_Tuple2(
							_new,
							_Utils_cmp(_new, motion.target) > -1);
					} else {
						var _new = motion.position - (perSecond * (dtms / 1000));
						return _Utils_Tuple2(
							_new,
							_Utils_cmp(_new, motion.target) < 1);
					}
				}();
				var newPos = _n1.a;
				var finished = _n1.b;
				return finished ? _Utils_update(
					motion,
					{position: motion.target, velocity: 0.0}) : _Utils_update(
					motion,
					{position: newPos, velocity: perSecond * 1000});
			case 'Spring':
				var stiffness = interpolationToUse.a.stiffness;
				var damping = interpolationToUse.a.damping;
				var fspring = stiffness * (motion.target - motion.position);
				var fdamper = ((-1) * damping) * motion.velocity;
				var dt = dtms / 1000;
				var a = fspring + fdamper;
				var newVelocity = motion.velocity + (a * dt);
				var newPos = motion.position + (newVelocity * dt);
				var dx = elm$core$Basics$abs(motion.target - newPos);
				return ((_Utils_cmp(dx, mdgriffith$elm_style_animation$Animation$Model$tolerance) < 0) && (_Utils_cmp(
					elm$core$Basics$abs(newVelocity),
					mdgriffith$elm_style_animation$Animation$Model$vTolerance) < 0)) ? _Utils_update(
					motion,
					{position: motion.target, velocity: 0.0}) : _Utils_update(
					motion,
					{position: newPos, velocity: newVelocity});
			default:
				var progress = interpolationToUse.a.progress;
				var duration = interpolationToUse.a.duration;
				var ease = interpolationToUse.a.ease;
				var start = interpolationToUse.a.start;
				var durationMs = elm$time$Time$posixToMillis(duration);
				var newProgress = (((dtms / durationMs) + progress) < 1) ? ((dtms / durationMs) + progress) : 1;
				var eased = ease(newProgress);
				var distance = motion.target - start;
				var newPos = ((((eased * distance) + start) * 10000) | 0) / 10000;
				var newVelocity = (newProgress === 1) ? 0 : ((newPos - motion.position) / dtms);
				var _n2 = motion.interpolationOverride;
				if (_n2.$ === 'Nothing') {
					return _Utils_update(
						motion,
						{
							interpolation: mdgriffith$elm_style_animation$Animation$Model$Easing(
								{duration: duration, ease: ease, progress: newProgress, start: start}),
							position: newPos,
							velocity: newVelocity
						});
				} else {
					var override = _n2.a;
					return _Utils_update(
						motion,
						{
							interpolationOverride: elm$core$Maybe$Just(
								mdgriffith$elm_style_animation$Animation$Model$Easing(
									{duration: duration, ease: ease, progress: newProgress, start: start})),
							position: newPos,
							velocity: newVelocity
						});
				}
		}
	});
var mdgriffith$elm_style_animation$Animation$Model$stepPath = F2(
	function (dt, cmd) {
		var stepCoords = function (coords) {
			return A2(
				elm$core$List$map,
				function (_n1) {
					var x = _n1.a;
					var y = _n1.b;
					return _Utils_Tuple2(
						A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, x),
						A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, y));
				},
				coords);
		};
		switch (cmd.$) {
			case 'Move':
				var m1 = cmd.a;
				var m2 = cmd.b;
				return A2(
					mdgriffith$elm_style_animation$Animation$Model$Move,
					A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, m1),
					A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, m2));
			case 'MoveTo':
				var m1 = cmd.a;
				var m2 = cmd.b;
				return A2(
					mdgriffith$elm_style_animation$Animation$Model$MoveTo,
					A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, m1),
					A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, m2));
			case 'Line':
				var m1 = cmd.a;
				var m2 = cmd.b;
				return A2(
					mdgriffith$elm_style_animation$Animation$Model$Line,
					A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, m1),
					A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, m2));
			case 'LineTo':
				var m1 = cmd.a;
				var m2 = cmd.b;
				return A2(
					mdgriffith$elm_style_animation$Animation$Model$LineTo,
					A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, m1),
					A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, m2));
			case 'Horizontal':
				var motion = cmd.a;
				return mdgriffith$elm_style_animation$Animation$Model$Horizontal(
					A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, motion));
			case 'HorizontalTo':
				var motion = cmd.a;
				return mdgriffith$elm_style_animation$Animation$Model$HorizontalTo(
					A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, motion));
			case 'Vertical':
				var motion = cmd.a;
				return mdgriffith$elm_style_animation$Animation$Model$Vertical(
					A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, motion));
			case 'VerticalTo':
				var motion = cmd.a;
				return mdgriffith$elm_style_animation$Animation$Model$VerticalTo(
					A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, motion));
			case 'Curve':
				var control1 = cmd.a.control1;
				var control2 = cmd.a.control2;
				var point = cmd.a.point;
				return mdgriffith$elm_style_animation$Animation$Model$Curve(
					{
						control1: _Utils_Tuple2(
							A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, control1.a),
							A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, control1.b)),
						control2: _Utils_Tuple2(
							A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, control2.a),
							A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, control2.b)),
						point: _Utils_Tuple2(
							A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, point.a),
							A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, point.b))
					});
			case 'CurveTo':
				var control1 = cmd.a.control1;
				var control2 = cmd.a.control2;
				var point = cmd.a.point;
				return mdgriffith$elm_style_animation$Animation$Model$CurveTo(
					{
						control1: _Utils_Tuple2(
							A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, control1.a),
							A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, control1.b)),
						control2: _Utils_Tuple2(
							A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, control2.a),
							A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, control2.b)),
						point: _Utils_Tuple2(
							A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, point.a),
							A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, point.b))
					});
			case 'Quadratic':
				var control = cmd.a.control;
				var point = cmd.a.point;
				return mdgriffith$elm_style_animation$Animation$Model$Quadratic(
					{
						control: _Utils_Tuple2(
							A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, control.a),
							A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, control.b)),
						point: _Utils_Tuple2(
							A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, point.a),
							A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, point.b))
					});
			case 'QuadraticTo':
				var control = cmd.a.control;
				var point = cmd.a.point;
				return mdgriffith$elm_style_animation$Animation$Model$QuadraticTo(
					{
						control: _Utils_Tuple2(
							A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, control.a),
							A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, control.b)),
						point: _Utils_Tuple2(
							A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, point.a),
							A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, point.b))
					});
			case 'SmoothQuadratic':
				var coords = cmd.a;
				return mdgriffith$elm_style_animation$Animation$Model$SmoothQuadratic(
					stepCoords(coords));
			case 'SmoothQuadraticTo':
				var coords = cmd.a;
				return mdgriffith$elm_style_animation$Animation$Model$SmoothQuadraticTo(
					stepCoords(coords));
			case 'Smooth':
				var coords = cmd.a;
				return mdgriffith$elm_style_animation$Animation$Model$Smooth(
					stepCoords(coords));
			case 'SmoothTo':
				var coords = cmd.a;
				return mdgriffith$elm_style_animation$Animation$Model$SmoothTo(
					stepCoords(coords));
			case 'ClockwiseArc':
				var arc = cmd.a;
				return mdgriffith$elm_style_animation$Animation$Model$ClockwiseArc(
					_Utils_update(
						arc,
						{
							endAngle: A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, arc.endAngle),
							radius: A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, arc.radius),
							startAngle: A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, arc.startAngle),
							x: A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, arc.x),
							y: A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, arc.y)
						}));
			case 'AntiClockwiseArc':
				var arc = cmd.a;
				return mdgriffith$elm_style_animation$Animation$Model$AntiClockwiseArc(
					_Utils_update(
						arc,
						{
							endAngle: A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, arc.endAngle),
							radius: A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, arc.radius),
							startAngle: A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, arc.startAngle),
							x: A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, arc.x),
							y: A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, arc.y)
						}));
			default:
				return mdgriffith$elm_style_animation$Animation$Model$Close;
		}
	});
var mdgriffith$elm_style_animation$Animation$Model$step = F2(
	function (dt, props) {
		var stepProp = function (property) {
			switch (property.$) {
				case 'ExactProperty':
					var name = property.a;
					var value = property.b;
					return A2(mdgriffith$elm_style_animation$Animation$Model$ExactProperty, name, value);
				case 'Property':
					var name = property.a;
					var motion = property.b;
					return A2(
						mdgriffith$elm_style_animation$Animation$Model$Property,
						name,
						A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, motion));
				case 'Property2':
					var name = property.a;
					var motion1 = property.b;
					var motion2 = property.c;
					return A3(
						mdgriffith$elm_style_animation$Animation$Model$Property2,
						name,
						A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, motion1),
						A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, motion2));
				case 'Property3':
					var name = property.a;
					var motion1 = property.b;
					var motion2 = property.c;
					var motion3 = property.d;
					return A4(
						mdgriffith$elm_style_animation$Animation$Model$Property3,
						name,
						A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, motion1),
						A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, motion2),
						A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, motion3));
				case 'Property4':
					var name = property.a;
					var motion1 = property.b;
					var motion2 = property.c;
					var motion3 = property.d;
					var motion4 = property.e;
					return A5(
						mdgriffith$elm_style_animation$Animation$Model$Property4,
						name,
						A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, motion1),
						A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, motion2),
						A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, motion3),
						A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, motion4));
				case 'AngleProperty':
					var name = property.a;
					var motion = property.b;
					return A2(
						mdgriffith$elm_style_animation$Animation$Model$AngleProperty,
						name,
						A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, motion));
				case 'ColorProperty':
					var name = property.a;
					var red = property.b;
					var green = property.c;
					var blue = property.d;
					var alpha = property.e;
					return A5(
						mdgriffith$elm_style_animation$Animation$Model$ColorProperty,
						name,
						A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, red),
						A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, green),
						A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, blue),
						A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, alpha));
				case 'ShadowProperty':
					var name = property.a;
					var inset = property.b;
					var shadow = property.c;
					return A3(
						mdgriffith$elm_style_animation$Animation$Model$ShadowProperty,
						name,
						inset,
						{
							alpha: A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, shadow.alpha),
							blue: A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, shadow.blue),
							blur: A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, shadow.blur),
							green: A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, shadow.green),
							offsetX: A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, shadow.offsetX),
							offsetY: A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, shadow.offsetY),
							red: A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, shadow.red),
							size: A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, shadow.size)
						});
				case 'Points':
					var points = property.a;
					return mdgriffith$elm_style_animation$Animation$Model$Points(
						A2(
							elm$core$List$map,
							function (_n1) {
								var x = _n1.a;
								var y = _n1.b;
								return _Utils_Tuple2(
									A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, x),
									A2(mdgriffith$elm_style_animation$Animation$Model$stepInterpolation, dt, y));
							},
							points));
				default:
					var cmds = property.a;
					return mdgriffith$elm_style_animation$Animation$Model$Path(
						A2(
							elm$core$List$map,
							mdgriffith$elm_style_animation$Animation$Model$stepPath(dt),
							cmds));
			}
		};
		return A2(elm$core$List$map, stepProp, props);
	});
var mdgriffith$elm_style_animation$Animation$Model$alreadyThere = F2(
	function (current, target) {
		return A2(
			elm$core$List$all,
			mdgriffith$elm_style_animation$Animation$Model$isDone,
			A2(
				mdgriffith$elm_style_animation$Animation$Model$step,
				elm$time$Time$millisToPosix(0),
				A3(mdgriffith$elm_style_animation$Animation$Model$startTowards, false, current, target)));
	});
var mdgriffith$elm_style_animation$Animation$Model$replaceProps = F2(
	function (props, replacements) {
		var replacementNames = A2(elm$core$List$map, mdgriffith$elm_style_animation$Animation$Model$propertyName, replacements);
		var removed = A2(
			elm$core$List$filter,
			function (prop) {
				return !A2(
					elm$core$List$member,
					mdgriffith$elm_style_animation$Animation$Model$propertyName(prop),
					replacementNames);
			},
			props);
		return _Utils_ap(removed, replacements);
	});
var mdgriffith$elm_style_animation$Animation$Model$resolveSteps = F3(
	function (currentStyle, steps, dt) {
		resolveSteps:
		while (true) {
			var _n0 = elm$core$List$head(steps);
			if (_n0.$ === 'Nothing') {
				return _Utils_Tuple3(currentStyle, _List_Nil, _List_Nil);
			} else {
				var currentStep = _n0.a;
				switch (currentStep.$) {
					case 'Wait':
						var n = currentStep.a;
						if (elm$time$Time$posixToMillis(n) <= 0) {
							var $temp$currentStyle = currentStyle,
								$temp$steps = A2(elm$core$List$drop, 1, steps),
								$temp$dt = dt;
							currentStyle = $temp$currentStyle;
							steps = $temp$steps;
							dt = $temp$dt;
							continue resolveSteps;
						} else {
							return _Utils_Tuple3(
								currentStyle,
								_List_Nil,
								A2(
									elm$core$List$cons,
									mdgriffith$elm_style_animation$Animation$Model$Wait(
										elm$time$Time$millisToPosix(
											elm$time$Time$posixToMillis(n) - elm$time$Time$posixToMillis(dt))),
									A2(elm$core$List$drop, 1, steps)));
						}
					case 'Send':
						var msg = currentStep.a;
						var _n2 = A3(
							mdgriffith$elm_style_animation$Animation$Model$resolveSteps,
							currentStyle,
							A2(elm$core$List$drop, 1, steps),
							dt);
						var newStyle = _n2.a;
						var msgs = _n2.b;
						var remainingSteps = _n2.c;
						return _Utils_Tuple3(
							newStyle,
							A2(elm$core$List$cons, msg, msgs),
							remainingSteps);
					case 'To':
						var target = currentStep.a;
						if (A2(mdgriffith$elm_style_animation$Animation$Model$alreadyThere, currentStyle, target)) {
							return _Utils_Tuple3(
								currentStyle,
								_List_Nil,
								A2(elm$core$List$drop, 1, steps));
						} else {
							var $temp$currentStyle = A3(mdgriffith$elm_style_animation$Animation$Model$startTowards, false, currentStyle, target),
								$temp$steps = A2(
								elm$core$List$cons,
								mdgriffith$elm_style_animation$Animation$Model$Step,
								A2(elm$core$List$drop, 1, steps)),
								$temp$dt = dt;
							currentStyle = $temp$currentStyle;
							steps = $temp$steps;
							dt = $temp$dt;
							continue resolveSteps;
						}
					case 'ToWith':
						var target = currentStep.a;
						if (A2(mdgriffith$elm_style_animation$Animation$Model$alreadyThere, currentStyle, target)) {
							return _Utils_Tuple3(
								currentStyle,
								_List_Nil,
								A2(elm$core$List$drop, 1, steps));
						} else {
							var $temp$currentStyle = A3(mdgriffith$elm_style_animation$Animation$Model$startTowards, true, currentStyle, target),
								$temp$steps = A2(
								elm$core$List$cons,
								mdgriffith$elm_style_animation$Animation$Model$Step,
								A2(elm$core$List$drop, 1, steps)),
								$temp$dt = dt;
							currentStyle = $temp$currentStyle;
							steps = $temp$steps;
							dt = $temp$dt;
							continue resolveSteps;
						}
					case 'Set':
						var props = currentStep.a;
						var $temp$currentStyle = A2(mdgriffith$elm_style_animation$Animation$Model$replaceProps, currentStyle, props),
							$temp$steps = A2(elm$core$List$drop, 1, steps),
							$temp$dt = dt;
						currentStyle = $temp$currentStyle;
						steps = $temp$steps;
						dt = $temp$dt;
						continue resolveSteps;
					case 'Step':
						var stepped = A2(mdgriffith$elm_style_animation$Animation$Model$step, dt, currentStyle);
						return A2(elm$core$List$all, mdgriffith$elm_style_animation$Animation$Model$isDone, stepped) ? _Utils_Tuple3(
							A2(
								elm$core$List$map,
								mdgriffith$elm_style_animation$Animation$Model$mapToMotion(
									function (m) {
										return _Utils_update(
											m,
											{interpolationOverride: elm$core$Maybe$Nothing});
									}),
								stepped),
							_List_Nil,
							A2(elm$core$List$drop, 1, steps)) : _Utils_Tuple3(stepped, _List_Nil, steps);
					case 'Loop':
						var substeps = currentStep.a;
						var $temp$currentStyle = currentStyle,
							$temp$steps = _Utils_ap(
							substeps,
							_List_fromArray(
								[
									mdgriffith$elm_style_animation$Animation$Model$Loop(substeps)
								])),
							$temp$dt = dt;
						currentStyle = $temp$currentStyle;
						steps = $temp$steps;
						dt = $temp$dt;
						continue resolveSteps;
					default:
						var n = currentStep.a;
						var substeps = currentStep.b;
						if (n <= 0) {
							var $temp$currentStyle = currentStyle,
								$temp$steps = A2(elm$core$List$drop, 1, steps),
								$temp$dt = dt;
							currentStyle = $temp$currentStyle;
							steps = $temp$steps;
							dt = $temp$dt;
							continue resolveSteps;
						} else {
							var $temp$currentStyle = currentStyle,
								$temp$steps = _Utils_ap(
								substeps,
								_Utils_ap(
									_List_fromArray(
										[
											A2(mdgriffith$elm_style_animation$Animation$Model$Repeat, n - 1, substeps)
										]),
									A2(elm$core$List$drop, 1, steps))),
								$temp$dt = dt;
							currentStyle = $temp$currentStyle;
							steps = $temp$steps;
							dt = $temp$dt;
							continue resolveSteps;
						}
				}
			}
		}
	});
var mdgriffith$elm_style_animation$Animation$Model$updateAnimation = F2(
	function (_n0, _n1) {
		var now = _n0.a;
		var model = _n1.a;
		var timing = A2(mdgriffith$elm_style_animation$Animation$Model$refreshTiming, now, model.timing);
		var _n2 = A2(
			elm$core$List$partition,
			function (_n4) {
				var wait = _n4.a;
				var mySteps = _n4.b;
				return elm$time$Time$posixToMillis(wait) <= 0;
			},
			A2(
				elm$core$List$map,
				function (_n3) {
					var wait = _n3.a;
					var mySteps = _n3.b;
					return _Utils_Tuple2(
						elm$time$Time$millisToPosix(
							elm$time$Time$posixToMillis(wait) - elm$time$Time$posixToMillis(timing.dt)),
						mySteps);
				},
				model.interruption));
		var readyInterruption = _n2.a;
		var queuedInterruptions = _n2.b;
		var _n5 = function () {
			var _n6 = elm$core$List$head(readyInterruption);
			if (_n6.$ === 'Just') {
				var _n7 = _n6.a;
				var wait = _n7.a;
				var interrupt = _n7.b;
				return _Utils_Tuple2(
					interrupt,
					A2(
						elm$core$List$map,
						mdgriffith$elm_style_animation$Animation$Model$mapToMotion(
							function (m) {
								return _Utils_update(
									m,
									{interpolationOverride: elm$core$Maybe$Nothing});
							}),
						model.style));
			} else {
				return _Utils_Tuple2(model.steps, model.style);
			}
		}();
		var steps = _n5.a;
		var style = _n5.b;
		var _n8 = A3(mdgriffith$elm_style_animation$Animation$Model$resolveSteps, style, steps, timing.dt);
		var revisedStyle = _n8.a;
		var sentMessages = _n8.b;
		var revisedSteps = _n8.c;
		return _Utils_Tuple2(
			mdgriffith$elm_style_animation$Animation$Model$Animation(
				_Utils_update(
					model,
					{
						interruption: queuedInterruptions,
						running: elm$core$List$length(revisedSteps) || elm$core$List$length(queuedInterruptions),
						steps: revisedSteps,
						style: revisedStyle,
						timing: timing
					})),
			elm$core$Platform$Cmd$batch(
				A2(
					elm$core$List$map,
					function (m) {
						return A2(
							elm$core$Task$perform,
							elm$core$Basics$identity,
							elm$core$Task$succeed(m));
					},
					sentMessages)));
	});
var mdgriffith$elm_style_animation$Animation$update = F2(
	function (tick, animation) {
		return A2(mdgriffith$elm_style_animation$Animation$Model$updateAnimation, tick, animation).a;
	});
var author$project$Pages$Interior$update = F2(
	function (message, model) {
		var withoutContextMenu = function (intermediateModel) {
			return _Utils_update(
				intermediateModel,
				{contextMenuAnimationState: author$project$Pages$Interior$initialContextMenuAnimationState, contextMenuOptionAnimationState: author$project$Pages$Interior$initialContextMenuOptionAnimationState, itemContextMenu: elm$core$Maybe$Nothing});
		};
		var withUpdatedSession = F2(
			function (sessionUpdate, intermediateModel) {
				return _Utils_update(
					intermediateModel,
					{
						session: sessionUpdate(intermediateModel.session)
					});
			});
		var withoutDroppedItem = function (itemId) {
			return withUpdatedSession(
				function (session) {
					return _Utils_update(
						session,
						{
							placedItems: A2(
								elm$core$List$filter,
								A2(
									elm$core$Basics$composeL,
									elm$core$Basics$not,
									author$project$Architecture$Item$matches(itemId)),
								session.placedItems)
						});
				});
		};
		var withUpdatedItem = F3(
			function (item, itemMessage, intermediateModel) {
				var _n18 = A2(
					author$project$Architecture$Item$find,
					intermediateModel.session,
					author$project$Architecture$Item$id(item));
				if (_n18.$ === 'Just') {
					var itemToUpdate = _n18.a;
					return A2(
						withUpdatedSession,
						function (session) {
							return _Utils_update(
								session,
								{
									placedItems: A2(
										elm$core$List$cons,
										A2(author$project$Architecture$Item$update, itemMessage, itemToUpdate),
										A2(
											elm$core$List$filter,
											A2(
												elm$core$Basics$composeL,
												elm$core$Basics$not,
												author$project$Architecture$Item$matches(
													author$project$Architecture$Item$id(itemToUpdate))),
											session.placedItems))
								});
						},
						intermediateModel);
				} else {
					return intermediateModel;
				}
			});
		var withOpenDrawer = function (intermediateModel) {
			return _Utils_update(
				intermediateModel,
				{
					drawerAnimationState: A2(
						mdgriffith$elm_style_animation$Animation$interrupt,
						_List_fromArray(
							[
								mdgriffith$elm_style_animation$Animation$to(
								_List_fromArray(
									[
										mdgriffith$elm_style_animation$Animation$marginLeft(
										mdgriffith$elm_style_animation$Animation$px(0))
									]))
							]),
						model.drawerAnimationState)
				});
		};
		var withMouseMovePosition = F2(
			function (position, intermediateModel) {
				return _Utils_update(
					intermediateModel,
					{
						currentMouseMovePosition: elm$core$Maybe$Just(position)
					});
			});
		var withLastMouseDownPosition = F2(
			function (position, intermediateModel) {
				return _Utils_update(
					intermediateModel,
					{
						currentMouseDownLocation: author$project$Pages$Interior$UnknownMouseDownLocation,
						lastMouseDownPosition: elm$core$Maybe$Just(position)
					});
			});
		var withIncrementedNextItem = withUpdatedSession(
			function (session) {
				return _Utils_update(
					session,
					{nextItemId: session.nextItemId + 1});
			});
		var withHideDrawer = function (intermediateModel) {
			return _Utils_update(
				intermediateModel,
				{
					drawerAnimationState: A2(
						mdgriffith$elm_style_animation$Animation$interrupt,
						_List_fromArray(
							[
								mdgriffith$elm_style_animation$Animation$to(author$project$Pages$Interior$initialDrawerState)
							]),
						model.drawerAnimationState)
				});
		};
		var withoutDrawer = function (intermediateModel) {
			return withHideDrawer(
				_Utils_update(
					intermediateModel,
					{uiMode: author$project$Pages$Interior$Default}));
		};
		var withoutTransientUi = function (intermediateModel) {
			return withoutDrawer(
				withoutContextMenu(intermediateModel));
		};
		var withDroppedItem = function (intermediateModel) {
			var intermediateSession = intermediateModel.session;
			return _Utils_update(
				intermediateModel,
				{
					dragAndDropState: author$project$Pages$Interior$NotDragging,
					session: function () {
						var _n17 = intermediateModel.dragAndDropState;
						if (_n17.$ === 'DraggingOrTapping') {
							var item = _n17.b;
							return _Utils_update(
								intermediateSession,
								{
									placedItems: A2(elm$core$List$cons, item, intermediateSession.placedItems)
								});
						} else {
							return intermediateSession;
						}
					}()
				});
		};
		var withDrop = function (intermediateModel) {
			var _n14 = intermediateModel.dragAndDropState;
			if (_n14.$ === 'DraggingOrTapping') {
				if (_n14.a.$ === 'TakenOutOfDrawer') {
					var _n15 = _n14.a;
					return withOpenDrawer(intermediateModel);
				} else {
					var _n16 = _n14.a;
					return intermediateModel;
				}
			} else {
				return withoutTransientUi(intermediateModel);
			}
		};
		var withComfortIndicatorBurst = function (intermediateModel) {
			var uniqueId = elm$core$String$fromInt(model.nextUniqueId);
			var updatedModel = _Utils_update(
				intermediateModel,
				{
					comfortIndicatorBurstAnimations: A2(elm$core$List$cons, uniqueId, intermediateModel.comfortIndicatorBurstAnimations),
					nextUniqueId: model.nextUniqueId + 1
				});
			return _Utils_Tuple2(
				updatedModel,
				A2(
					author$project$Utilities$executeAfter,
					author$project$Pages$Interior$Burst$duration,
					author$project$Pages$Interior$FinishBurstAnimation(uniqueId)));
		};
		var toPoint = author$project$Grid$Point$fromPosition(model);
		var pointerHasMoved = function (currentPosition) {
			var _n13 = model.lastMouseDownPosition;
			if (_n13.$ === 'Just') {
				var mouseDownPosition = _n13.a;
				return !_Utils_eq(
					toPoint(mouseDownPosition),
					toPoint(currentPosition));
			} else {
				return true;
			}
		};
		var itemOnPlanHasBeenClicked = function () {
			var _n11 = model.dragAndDropState;
			if ((_n11.$ === 'DraggingOrTapping') && (_n11.a.$ === 'GrabbedFromPlan')) {
				var _n12 = _n11.a;
				return true;
			} else {
				return false;
			}
		}();
		var contextMenuOptionHeight = author$project$Pages$Interior$ContextMenu$optionSpacing + author$project$Views$ContextMenuOption$optionIconSize;
		var withContextMenu = function (intermediateModel) {
			return withoutDrawer(
				function () {
					var _n10 = intermediateModel.dragAndDropState;
					if (_n10.$ === 'DraggingOrTapping') {
						var item = _n10.b;
						return _Utils_update(
							intermediateModel,
							{
								contextMenuAnimationState: A2(
									mdgriffith$elm_style_animation$Animation$interrupt,
									_List_fromArray(
										[
											mdgriffith$elm_style_animation$Animation$to(
											_List_fromArray(
												[
													mdgriffith$elm_style_animation$Animation$opacity(1)
												]))
										]),
									model.contextMenuAnimationState),
								contextMenuOptionAnimationState: A2(
									mdgriffith$elm_style_animation$Animation$interrupt,
									_List_fromArray(
										[
											mdgriffith$elm_style_animation$Animation$to(
											_List_fromArray(
												[
													mdgriffith$elm_style_animation$Animation$height(
													mdgriffith$elm_style_animation$Animation$px(contextMenuOptionHeight))
												]))
										]),
									model.contextMenuOptionAnimationState),
								itemContextMenu: elm$core$Maybe$Just(
									author$project$Architecture$Item$id(item))
							});
					} else {
						return intermediateModel;
					}
				}());
		};
		var newModelWithoutComfortIssue = function () {
			switch (message.$) {
				case 'Ignore':
					return model;
				case 'GotSession':
					var session = message.a;
					return _Utils_update(
						model,
						{session: session});
				case 'GotScroll':
					var isPinchGesture = message.a.isPinchGesture;
					var deltaX = message.a.deltaX;
					var deltaY = message.a.deltaY;
					return isPinchGesture ? A2(
						author$project$Pages$Interior$withZoom,
						(100 - A3(elm$core$Basics$clamp, -50, 50, deltaY)) / 100,
						model) : _Utils_update(
						model,
						{
							viewportOffset: {x: model.viewportOffset.x + deltaX, y: model.viewportOffset.y + deltaY}
						});
				case 'GotMouseDown':
					var position = message.a;
					return A2(
						withLastMouseDownPosition,
						position,
						function () {
							var _n1 = _Utils_Tuple3(model.dragAndDropState, model.currentMouseDownLocation, model.uiMode);
							if (((_n1.a.$ === 'NotDragging') && (_n1.b.$ === 'UnknownMouseDownLocation')) && (_n1.c.$ === 'BuildingWalls')) {
								var _n2 = _n1.a;
								var _n3 = _n1.b;
								return withHideDrawer(
									_Utils_update(
										model,
										{dragAndDropState: author$project$Pages$Interior$DrawingWall}));
							} else {
								return model;
							}
						}());
				case 'GotMouseMove':
					var position = message.a;
					return A2(
						withMouseMovePosition,
						position,
						function () {
							var _n4 = _Utils_Tuple2(
								model.dragAndDropState,
								pointerHasMoved(position));
							_n4$2:
							while (true) {
								if (_n4.b) {
									switch (_n4.a.$) {
										case 'GrabbedInDrawer':
											var item = _n4.a.a;
											return withHideDrawer(
												_Utils_update(
													model,
													{
														dragAndDropState: A3(
															author$project$Pages$Interior$DraggingOrTapping,
															author$project$Pages$Interior$TakenOutOfDrawer,
															item,
															author$project$Architecture$Item$translation(item))
													}));
										case 'DraggingOrTapping':
											var _n5 = _n4.a;
											var grabContext = _n5.a;
											var item = _n5.b;
											var originalPosition = _n5.c;
											return _Utils_update(
												model,
												{
													dragAndDropState: A3(
														author$project$Pages$Interior$DraggingOrTapping,
														grabContext,
														A3(author$project$Pages$Interior$draggedItem, model, originalPosition, item),
														originalPosition)
												});
										default:
											break _n4$2;
									}
								} else {
									break _n4$2;
								}
							}
							return model;
						}());
				case 'GotMouseUp':
					var position = message.a;
					return withDroppedItem(
						function () {
							var _n6 = A5(
								author$project$Pages$Interior$MouseUpData,
								model.uiMode,
								model.dragAndDropState,
								pointerHasMoved(position),
								itemOnPlanHasBeenClicked,
								model.lastMouseDownPosition);
							_n6$3:
							while (true) {
								if (_n6.c) {
									if (((_n6.a.$ === 'BuildingWalls') && (_n6.b.$ === 'DrawingWall')) && (_n6.e.$ === 'Just')) {
										var wallType = _n6.a.a;
										var _n7 = _n6.b;
										var startPosition = _n6.e.a;
										return A2(
											withUpdatedSession,
											function (session) {
												return _Utils_update(
													session,
													{
														placedItems: A2(
															elm$core$List$cons,
															A4(author$project$Architecture$Item$drawWall, model, wallType, startPosition, position),
															session.placedItems)
													});
											},
											withIncrementedNextItem(
												withOpenDrawer(model)));
									} else {
										break _n6$3;
									}
								} else {
									if ((_n6.a.$ === 'BuildingWalls') && (_n6.b.$ === 'DrawingWall')) {
										var _n8 = _n6.b;
										return withOpenDrawer(model);
									} else {
										if (_n6.d) {
											return withContextMenu(model);
										} else {
											break _n6$3;
										}
									}
								}
							}
							return withDrop(model);
						}());
				case 'GotMouseDownWithinDrawer':
					return _Utils_update(
						model,
						{currentMouseDownLocation: author$project$Pages$Interior$WithinDrawer});
				case 'GrabOrStartTap':
					var item = message.a;
					return A2(
						withoutDroppedItem,
						author$project$Architecture$Item$id(item),
						withoutContextMenu(
							_Utils_update(
								model,
								{
									currentMouseDownLocation: author$project$Pages$Interior$WithinItem,
									dragAndDropState: A3(
										author$project$Pages$Interior$DraggingOrTapping,
										author$project$Pages$Interior$GrabbedFromPlan,
										item,
										author$project$Architecture$Item$translation(item))
								})));
				case 'GrabInDrawer':
					var itemOnPlan = message.a;
					return withIncrementedNextItem(
						withoutContextMenu(
							_Utils_update(
								model,
								{
									dragAndDropState: author$project$Pages$Interior$GrabbedInDrawer(
										A2(author$project$Architecture$Item$takeEquipmentFromDrawer, model, itemOnPlan))
								})));
				case 'CancelGrabInDrawer':
					return _Utils_update(
						model,
						{dragAndDropState: author$project$Pages$Interior$NotDragging});
				case 'DeleteItem':
					var itemId = message.a;
					return A2(withoutDroppedItem, itemId, model);
				case 'Animate':
					var animationMessage = message.a;
					return _Utils_update(
						model,
						{
							contextMenuAnimationState: A2(mdgriffith$elm_style_animation$Animation$update, animationMessage, model.contextMenuAnimationState),
							contextMenuOptionAnimationState: A2(mdgriffith$elm_style_animation$Animation$update, animationMessage, model.contextMenuOptionAnimationState),
							drawerAnimationState: A2(mdgriffith$elm_style_animation$Animation$update, animationMessage, model.drawerAnimationState)
						});
				case 'OpenDrawer':
					var drawerContent = message.a;
					return withoutContextMenu(
						withOpenDrawer(
							function () {
								if (drawerContent.$ === 'BuildWalls') {
									return _Utils_update(
										model,
										{
											latestDrawerContent: drawerContent,
											uiMode: author$project$Pages$Interior$BuildingWalls(author$project$Architecture$Wall$DividingWall)
										});
								} else {
									return _Utils_update(
										model,
										{latestDrawerContent: drawerContent});
								}
							}()));
				case 'FinishBuilding':
					return withoutTransientUi(model);
				case 'FinishBurstAnimation':
					var burstKey = message.a;
					return _Utils_update(
						model,
						{
							comfortIndicatorBurstAnimations: A2(
								elm$core$List$filter,
								function (key) {
									return !_Utils_eq(key, burstKey);
								},
								model.comfortIndicatorBurstAnimations)
						});
				case 'UpdateItem':
					var item = message.a;
					var itemMessage = message.b;
					return A3(withUpdatedItem, item, itemMessage, model);
				case 'SetLevel':
					var level = message.a;
					return _Utils_update(
						model,
						{level: level});
				case 'ToggleHasWindowSills':
					return _Utils_update(
						model,
						{hasWindowSills: !model.hasWindowSills});
				default:
					var wallType = message.a;
					return _Utils_update(
						model,
						{
							uiMode: author$project$Pages$Interior$BuildingWalls(wallType)
						});
			}
		}();
		var newModel = ((!_Utils_eq(
			author$project$Pages$Interior$items(newModelWithoutComfortIssue),
			author$project$Pages$Interior$items(model))) || (!_Utils_eq(newModelWithoutComfortIssue.level, model.level))) ? _Utils_update(
			newModelWithoutComfortIssue,
			{
				comfortIssueCache: author$project$Pages$Interior$comfortIssue(newModelWithoutComfortIssue)
			}) : newModelWithoutComfortIssue;
		var gotNewComfortIssues = !_Utils_eq(newModel.comfortIssueCache, model.comfortIssueCache);
		return gotNewComfortIssues ? withComfortIndicatorBurst(newModel) : _Utils_Tuple2(newModel, elm$core$Platform$Cmd$none);
	});
var author$project$Architecture$Layout$placeDefaultItems = F2(
	function (positionedSegment, _n0) {
		var currentItems = _n0.a;
		var nextItemId = _n0.b;
		return _Utils_Tuple2(currentItems, nextItemId);
	});
var author$project$Architecture$Layout$BackSide = function (a) {
	return {$: 'BackSide', a: a};
};
var author$project$Architecture$Layout$Core = function (a) {
	return {$: 'Core', a: a};
};
var author$project$Architecture$Layout$FrontSide = function (a) {
	return {$: 'FrontSide', a: a};
};
var author$project$Architecture$Layout$North = function (a) {
	return {$: 'North', a: a};
};
var author$project$Architecture$Layout$BackSide$backSideSegment = F2(
	function (length, name) {
		return {
			geometry: {imageSource: 'layout/BackSide/' + (name + '.png'), length: length, width: 80}
		};
	});
var author$project$Architecture$Layout$BackSide$compactWithWorkArea = A2(author$project$Architecture$Layout$BackSide$backSideSegment, 4, 'compactWithWorkArea');
var author$project$Architecture$Layout$BackSide$compact = A2(author$project$Architecture$Layout$BackSide$backSideSegment, 2, 'compact');
var author$project$Architecture$Layout$BackSide$default = false ? author$project$Architecture$Layout$BackSide$compact : A2(author$project$Architecture$Layout$BackSide$backSideSegment, 0, '');
var author$project$Architecture$Layout$BackSide$generous = A2(author$project$Architecture$Layout$BackSide$backSideSegment, 4, 'generous');
var author$project$Architecture$Layout$BackSide$generousWithWorkArea = A2(author$project$Architecture$Layout$BackSide$backSideSegment, 6, 'generousWithWorkArea');
var elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _n0 = A2(elm$core$Elm$JsArray$initializeFromList, elm$core$Array$branchFactor, list);
			var jsArray = _n0.a;
			var remainingItems = _n0.b;
			if (_Utils_cmp(
				elm$core$Elm$JsArray$length(jsArray),
				elm$core$Array$branchFactor) < 0) {
				return A2(
					elm$core$Array$builderToArray,
					true,
					{nodeList: nodeList, nodeListSize: nodeListSize, tail: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					elm$core$List$cons,
					elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return elm$core$Array$empty;
	} else {
		return A3(elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var author$project$Architecture$Layout$BackSide$byOrderOfAppearance = elm$core$Array$fromList(
	_List_fromArray(
		[author$project$Architecture$Layout$BackSide$default, author$project$Architecture$Layout$BackSide$compactWithWorkArea, author$project$Architecture$Layout$BackSide$generous, author$project$Architecture$Layout$BackSide$generousWithWorkArea]));
var elm$core$Array$bitMask = 4294967295 >>> (32 - elm$core$Array$shiftStep);
var elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var elm$core$Array$getHelp = F3(
	function (shift, index, tree) {
		getHelp:
		while (true) {
			var pos = elm$core$Array$bitMask & (index >>> shift);
			var _n0 = A2(elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (_n0.$ === 'SubTree') {
				var subTree = _n0.a;
				var $temp$shift = shift - elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _n0.a;
				return A2(elm$core$Elm$JsArray$unsafeGet, elm$core$Array$bitMask & index, values);
			}
		}
	});
var elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var elm$core$Array$get = F2(
	function (index, _n0) {
		var len = _n0.a;
		var startShift = _n0.b;
		var tree = _n0.c;
		var tail = _n0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			elm$core$Array$tailIndex(len)) > -1) ? elm$core$Maybe$Just(
			A2(elm$core$Elm$JsArray$unsafeGet, elm$core$Array$bitMask & index, tail)) : elm$core$Maybe$Just(
			A3(elm$core$Array$getHelp, startShift, index, tree)));
	});
var author$project$Architecture$Layout$backSide = function (model) {
	return A2(
		elm$core$Maybe$withDefault,
		author$project$Architecture$Layout$BackSide$default,
		A2(elm$core$Array$get, model.backSideIndex, author$project$Architecture$Layout$BackSide$byOrderOfAppearance));
};
var author$project$Architecture$Layout$North$northSegment = function (_n0) {
	var width = _n0.width;
	var name = _n0.name;
	var hasServiceArea = _n0.hasServiceArea;
	var isVoid = _n0.isVoid;
	return {
		geometry: {imageSource: 'layout/North/' + (name + '.png'), length: 3, width: width},
		hasServiceArea: hasServiceArea,
		isVoid: isVoid
	};
};
var author$project$Architecture$Layout$North$void = author$project$Architecture$Layout$North$northSegment(
	{hasServiceArea: false, isVoid: true, name: 'void', width: 0});
var author$project$Architecture$Layout$North$default = false ? author$project$Architecture$Layout$North$void : author$project$Architecture$Layout$North$northSegment(
	{hasServiceArea: false, isVoid: true, name: '', width: 0});
var author$project$Architecture$Layout$North$parkingSpace = author$project$Architecture$Layout$North$northSegment(
	{hasServiceArea: false, isVoid: false, name: 'parkingSpace', width: 40});
var author$project$Architecture$Layout$North$parkingSpaceAndServiceArea = author$project$Architecture$Layout$North$northSegment(
	{hasServiceArea: true, isVoid: false, name: 'parkingSpaceAndServiceArea', width: 55});
var author$project$Architecture$Layout$North$twoParkingSpaces = author$project$Architecture$Layout$North$northSegment(
	{hasServiceArea: false, isVoid: false, name: 'twoParkingSpaces', width: 65});
var author$project$Architecture$Layout$North$workArea = author$project$Architecture$Layout$North$northSegment(
	{hasServiceArea: false, isVoid: false, name: 'workArea', width: 55});
var author$project$Architecture$Layout$North$byOrderOfAppearance = elm$core$Array$fromList(
	_List_fromArray(
		[author$project$Architecture$Layout$North$default, author$project$Architecture$Layout$North$parkingSpace, author$project$Architecture$Layout$North$parkingSpaceAndServiceArea, author$project$Architecture$Layout$North$twoParkingSpaces, author$project$Architecture$Layout$North$workArea]));
var elm$core$Array$length = function (_n0) {
	var len = _n0.a;
	return len;
};
var author$project$Utilities$findStartingFromIndex = F3(
	function (startIndex, predicate, array) {
		var listPredicate = function (currentIndex) {
			return A2(
				elm$core$Maybe$withDefault,
				false,
				A2(
					elm$core$Maybe$map,
					predicate,
					A2(elm$core$Array$get, currentIndex, array)));
		};
		var indices = _Utils_ap(
			A2(
				elm$core$List$range,
				startIndex,
				elm$core$Array$length(array) - 1),
			A2(elm$core$List$range, 0, startIndex - 1));
		return A2(
			elm$core$Maybe$andThen,
			function (index) {
				return A2(elm$core$Array$get, index, array);
			},
			A2(elm_community$list_extra$List$Extra$find, listPredicate, indices));
	});
var author$project$Architecture$Layout$north = function (model) {
	var fitsIntoNorthWall = function (northSegment) {
		return northSegment.isVoid || (author$project$Architecture$Layout$backSide(model).geometry.length > 2);
	};
	return A2(
		elm$core$Maybe$withDefault,
		author$project$Architecture$Layout$North$default,
		A3(author$project$Utilities$findStartingFromIndex, model.northIndex, fitsIntoNorthWall, author$project$Architecture$Layout$North$byOrderOfAppearance));
};
var author$project$Architecture$Layout$Core$Perpendicular = {$: 'Perpendicular'};
var author$project$Architecture$Layout$Core$coreSegment = function (_n0) {
	var length = _n0.length;
	var name = _n0.name;
	var hasServiceArea = _n0.hasServiceArea;
	var stairsDirection = _n0.stairsDirection;
	return {
		geometry: {imageSource: 'layout/Core/' + (name + '.png'), length: length, width: 80},
		hasServiceArea: hasServiceArea,
		stairsDirection: stairsDirection
	};
};
var author$project$Architecture$Layout$Core$perpendicularStairsAndServiceArea = author$project$Architecture$Layout$Core$coreSegment(
	{hasServiceArea: true, length: 3, name: 'perpendicularStairsAndServiceArea', stairsDirection: author$project$Architecture$Layout$Core$Perpendicular});
var author$project$Architecture$Layout$Core$default = false ? author$project$Architecture$Layout$Core$perpendicularStairsAndServiceArea : author$project$Architecture$Layout$Core$coreSegment(
	{hasServiceArea: true, length: 0, name: '', stairsDirection: author$project$Architecture$Layout$Core$Perpendicular});
var author$project$Architecture$Layout$Core$Parallel = {$: 'Parallel'};
var author$project$Architecture$Layout$Core$parallelStairs = author$project$Architecture$Layout$Core$coreSegment(
	{hasServiceArea: false, length: 3, name: 'parallelStairs', stairsDirection: author$project$Architecture$Layout$Core$Parallel});
var author$project$Architecture$Layout$Core$perpendicularStairs = author$project$Architecture$Layout$Core$coreSegment(
	{hasServiceArea: false, length: 2, name: 'perpendicularStairs', stairsDirection: author$project$Architecture$Layout$Core$Perpendicular});
var author$project$Architecture$Layout$Core$byOrderOfAppearance = elm$core$Array$fromList(
	_List_fromArray(
		[author$project$Architecture$Layout$Core$default, author$project$Architecture$Layout$Core$perpendicularStairs, author$project$Architecture$Layout$Core$parallelStairs]));
var author$project$Architecture$Layout$core = function (model) {
	var worksWithTopFloor = function (coreSegment) {
		var _n0 = coreSegment.stairsDirection;
		if (_n0.$ === 'Perpendicular') {
			return author$project$Architecture$Layout$north(model).isVoid;
		} else {
			return !author$project$Architecture$Layout$north(model).isVoid;
		}
	};
	return A2(
		elm$core$Maybe$withDefault,
		author$project$Architecture$Layout$Core$default,
		A3(author$project$Utilities$findStartingFromIndex, model.coreIndex, worksWithTopFloor, author$project$Architecture$Layout$Core$byOrderOfAppearance));
};
var author$project$Architecture$Layout$FrontSide$frontSideSegment = function (_n0) {
	var length = _n0.length;
	var name = _n0.name;
	var hasServiceArea = _n0.hasServiceArea;
	return {
		geometry: {imageSource: 'layout/FrontSide/' + (name + '.png'), length: length, width: 80},
		hasServiceArea: hasServiceArea
	};
};
var author$project$Architecture$Layout$FrontSide$serviceArea = author$project$Architecture$Layout$FrontSide$frontSideSegment(
	{hasServiceArea: true, length: 1, name: 'serviceArea'});
var author$project$Architecture$Layout$FrontSide$default = false ? author$project$Architecture$Layout$FrontSide$serviceArea : author$project$Architecture$Layout$FrontSide$frontSideSegment(
	{hasServiceArea: true, length: 0, name: ''});
var author$project$Architecture$Layout$FrontSide$parkingSpace = author$project$Architecture$Layout$FrontSide$frontSideSegment(
	{hasServiceArea: true, length: 3, name: 'parkingSpace'});
var author$project$Architecture$Layout$FrontSide$twoParkingSpaces = author$project$Architecture$Layout$FrontSide$frontSideSegment(
	{hasServiceArea: true, length: 3, name: 'twoParkingSpaces'});
var author$project$Architecture$Layout$FrontSide$void = author$project$Architecture$Layout$FrontSide$frontSideSegment(
	{hasServiceArea: false, length: 0, name: 'void'});
var author$project$Architecture$Layout$FrontSide$workArea = author$project$Architecture$Layout$FrontSide$frontSideSegment(
	{hasServiceArea: true, length: 2, name: 'workArea'});
var author$project$Architecture$Layout$FrontSide$byOrderOfAppearance = elm$core$Array$fromList(
	_List_fromArray(
		[author$project$Architecture$Layout$FrontSide$default, author$project$Architecture$Layout$FrontSide$void, author$project$Architecture$Layout$FrontSide$twoParkingSpaces, author$project$Architecture$Layout$FrontSide$workArea, author$project$Architecture$Layout$FrontSide$parkingSpace]));
var author$project$Architecture$Layout$frontSide = function (model) {
	var providesEnoughServiceArea = function (frontSideSegment) {
		return author$project$Architecture$Layout$core(model).hasServiceArea || (author$project$Architecture$Layout$north(model).hasServiceArea || frontSideSegment.hasServiceArea);
	};
	return A2(
		elm$core$Maybe$withDefault,
		author$project$Architecture$Layout$FrontSide$default,
		A3(author$project$Utilities$findStartingFromIndex, model.frontSideIndex, providesEnoughServiceArea, author$project$Architecture$Layout$FrontSide$byOrderOfAppearance));
};
var author$project$Architecture$Layout$segmentGeometry = function (segment) {
	switch (segment.$) {
		case 'Core':
			var coreSegment = segment.a;
			return coreSegment.geometry;
		case 'BackSide':
			var backSideSegment = segment.a;
			return backSideSegment.geometry;
		case 'FrontSide':
			var frontSideSegment = segment.a;
			return frontSideSegment.geometry;
		default:
			var northSegment = segment.a;
			return northSegment.geometry;
	}
};
var author$project$Grid$LongitudinalBoundary$east = function (_n0) {
	var data = _n0.a;
	return data.east;
};
var author$project$Grid$LongitudinalBoundary$LongitudinalBoundary = function (a) {
	return {$: 'LongitudinalBoundary', a: a};
};
var author$project$Grid$LongitudinalBoundary$longitudinalBoundary = F2(
	function (extreme1, extreme2) {
		return author$project$Grid$LongitudinalBoundary$LongitudinalBoundary(
			{
				east: A2(elm$core$Basics$max, extreme1, extreme2),
				west: A2(elm$core$Basics$min, extreme1, extreme2)
			});
	});
var author$project$Grid$LongitudinalBoundary$west = function (_n0) {
	var data = _n0.a;
	return data.west;
};
var author$project$Grid$Units$moduleLength = 22;
var author$project$Grid$Units$fromModuleLengths = function (moduleLengths) {
	return moduleLengths * author$project$Grid$Units$moduleLength;
};
var author$project$Architecture$Layout$positionSegment = F2(
	function (segment, layout) {
		var segmentLength = author$project$Grid$Units$fromModuleLengths(
			author$project$Architecture$Layout$segmentGeometry(segment).length);
		var westExtreme = function () {
			if (segment.$ === 'BackSide') {
				var geometry = segment.a.geometry;
				return A2(
					elm$core$Basics$min,
					author$project$Grid$LongitudinalBoundary$west(layout.boundary),
					-segmentLength);
			} else {
				return author$project$Grid$LongitudinalBoundary$west(layout.boundary);
			}
		}();
		var eastExtreme = function () {
			switch (segment.$) {
				case 'Core':
					var geometry = segment.a.geometry;
					return A2(
						elm$core$Basics$max,
						author$project$Grid$LongitudinalBoundary$east(layout.boundary),
						segmentLength);
				case 'FrontSide':
					var geometry = segment.a.geometry;
					return author$project$Grid$LongitudinalBoundary$east(layout.boundary) + segmentLength;
				default:
					return author$project$Grid$LongitudinalBoundary$east(layout.boundary);
			}
		}();
		var translation = function () {
			switch (segment.$) {
				case 'FrontSide':
					return A2(author$project$Grid$Vector$gridVector, eastExtreme - segmentLength, 0);
				case 'BackSide':
					return A2(author$project$Grid$Vector$gridVector, -segmentLength, 0);
				case 'North':
					var geometry = segment.a.geometry;
					return A2(author$project$Grid$Vector$gridVector, (-segmentLength) + author$project$Grid$Units$moduleLength, -geometry.width);
				default:
					return A2(author$project$Grid$Vector$gridVector, 0, 0);
			}
		}();
		var positionedSegment = {
			geometry: author$project$Architecture$Layout$segmentGeometry(segment),
			segment: segment,
			translation: translation
		};
		return {
			boundary: A2(author$project$Grid$LongitudinalBoundary$longitudinalBoundary, westExtreme, eastExtreme),
			segments: A2(elm$core$List$cons, positionedSegment, layout.segments)
		};
	});
var author$project$Architecture$Layout$positioned = function (layout) {
	return A2(
		author$project$Architecture$Layout$positionSegment,
		author$project$Architecture$Layout$North(
			author$project$Architecture$Layout$north(layout)),
		A2(
			author$project$Architecture$Layout$positionSegment,
			author$project$Architecture$Layout$FrontSide(
				author$project$Architecture$Layout$frontSide(layout)),
			A2(
				author$project$Architecture$Layout$positionSegment,
				author$project$Architecture$Layout$BackSide(
					author$project$Architecture$Layout$backSide(layout)),
				A2(
					author$project$Architecture$Layout$positionSegment,
					author$project$Architecture$Layout$Core(
						author$project$Architecture$Layout$core(layout)),
					{
						boundary: A2(author$project$Grid$LongitudinalBoundary$longitudinalBoundary, 0, 0),
						segments: _List_Nil
					}))));
};
var author$project$Architecture$Layout$withDefaultItems = function (session) {
	var _n0 = A3(
		elm$core$List$foldl,
		author$project$Architecture$Layout$placeDefaultItems,
		_Utils_Tuple2(_List_Nil, 0),
		author$project$Architecture$Layout$positioned(session.layout).segments);
	var placedItems = _n0.a;
	var nextItemId = _n0.b;
	return _Utils_update(
		session,
		{nextItemId: nextItemId, placedItems: placedItems});
};
var author$project$Pages$Layout$update = F2(
	function (message, session) {
		var _n0 = session;
		var layout = _n0.layout;
		var toggle = F2(
			function (getIndex, segments) {
				return A2(
					elm$core$Basics$modBy,
					elm$core$Array$length(segments),
					getIndex(layout) + 1);
			});
		var newLayout = function () {
			switch (message.$) {
				case 'ToggleBackSide':
					return _Utils_update(
						layout,
						{
							backSideIndex: A2(
								toggle,
								function ($) {
									return $.backSideIndex;
								},
								author$project$Architecture$Layout$BackSide$byOrderOfAppearance)
						});
				case 'ToggleCore':
					return _Utils_update(
						layout,
						{
							coreIndex: A2(
								toggle,
								function ($) {
									return $.coreIndex;
								},
								author$project$Architecture$Layout$Core$byOrderOfAppearance)
						});
				case 'ToggleFrontSide':
					return _Utils_update(
						layout,
						{
							frontSideIndex: A2(
								toggle,
								function ($) {
									return $.frontSideIndex;
								},
								author$project$Architecture$Layout$FrontSide$byOrderOfAppearance)
						});
				default:
					return _Utils_update(
						layout,
						{
							northIndex: A2(
								toggle,
								function ($) {
									return $.northIndex;
								},
								author$project$Architecture$Layout$North$byOrderOfAppearance)
						});
			}
		}();
		return author$project$Architecture$Layout$withDefaultItems(
			_Utils_update(
				session,
				{layout: newLayout}));
	});
var author$project$Session$navigationKey = function (session) {
	return session.navigationKey;
};
var author$project$Architecture$Item$getWall = function (item) {
	var _n0 = author$project$Architecture$Item$itemType(item);
	if (_n0.$ === 'WallItem') {
		var wall = _n0.a;
		return elm$core$Maybe$Just(wall);
	} else {
		return elm$core$Maybe$Nothing;
	}
};
var ianmackenzie$elm_iso_10303$StepFile$Types$NullAttribute = {$: 'NullAttribute'};
var ianmackenzie$elm_iso_10303$Iso10303$null = ianmackenzie$elm_iso_10303$StepFile$Types$NullAttribute;
var author$project$Ifc$Types$optional = F2(
	function (toAttribute, maybeValue) {
		return A2(
			elm$core$Maybe$withDefault,
			ianmackenzie$elm_iso_10303$Iso10303$null,
			A2(elm$core$Maybe$map, toAttribute, maybeValue));
	});
var elm$core$String$toUpper = _String_toUpper;
var ianmackenzie$elm_iso_10303$StepFile$Types$TypeName = function (a) {
	return {$: 'TypeName', a: a};
};
var ianmackenzie$elm_iso_10303$StepFile$Format$typeName = function (value) {
	return ianmackenzie$elm_iso_10303$StepFile$Types$TypeName(
		elm$core$String$toUpper(value));
};
var ianmackenzie$elm_iso_10303$StepFile$Types$Entity = F2(
	function (a, b) {
		return {$: 'Entity', a: a, b: b};
	});
var ianmackenzie$elm_iso_10303$Iso10303$entity = F2(
	function (givenTypeName, givenAttributes) {
		return A2(
			ianmackenzie$elm_iso_10303$StepFile$Types$Entity,
			ianmackenzie$elm_iso_10303$StepFile$Format$typeName(givenTypeName),
			givenAttributes);
	});
var ianmackenzie$elm_iso_10303$StepFile$Types$ReferenceTo = function (a) {
	return {$: 'ReferenceTo', a: a};
};
var ianmackenzie$elm_iso_10303$Iso10303$referenceTo = function (entity_) {
	return ianmackenzie$elm_iso_10303$StepFile$Types$ReferenceTo(entity_);
};
var author$project$Ifc$Entity$ifcAxis2Placement3D = function (_n0) {
	var location = _n0.location;
	var axis = _n0.axis;
	var refDirection = _n0.refDirection;
	return A2(
		ianmackenzie$elm_iso_10303$Iso10303$entity,
		'IfcAxis2Placement3D',
		_List_fromArray(
			[
				ianmackenzie$elm_iso_10303$Iso10303$referenceTo(location),
				A2(author$project$Ifc$Types$optional, ianmackenzie$elm_iso_10303$Iso10303$referenceTo, axis),
				A2(author$project$Ifc$Types$optional, ianmackenzie$elm_iso_10303$Iso10303$referenceTo, refDirection)
			]));
};
var author$project$Ifc$Guid$HalfNibble = F2(
	function (a, b) {
		return {$: 'HalfNibble', a: a, b: b};
	});
var author$project$Ifc$Guid$base64Characters = elm$core$Array$fromList(
	_List_fromArray(
		[
			_Utils_chr('0'),
			_Utils_chr('1'),
			_Utils_chr('2'),
			_Utils_chr('3'),
			_Utils_chr('4'),
			_Utils_chr('5'),
			_Utils_chr('6'),
			_Utils_chr('7'),
			_Utils_chr('8'),
			_Utils_chr('9'),
			_Utils_chr('A'),
			_Utils_chr('B'),
			_Utils_chr('C'),
			_Utils_chr('D'),
			_Utils_chr('E'),
			_Utils_chr('F'),
			_Utils_chr('G'),
			_Utils_chr('H'),
			_Utils_chr('I'),
			_Utils_chr('J'),
			_Utils_chr('K'),
			_Utils_chr('L'),
			_Utils_chr('M'),
			_Utils_chr('N'),
			_Utils_chr('O'),
			_Utils_chr('P'),
			_Utils_chr('Q'),
			_Utils_chr('R'),
			_Utils_chr('S'),
			_Utils_chr('T'),
			_Utils_chr('U'),
			_Utils_chr('V'),
			_Utils_chr('W'),
			_Utils_chr('X'),
			_Utils_chr('Y'),
			_Utils_chr('Z'),
			_Utils_chr('a'),
			_Utils_chr('b'),
			_Utils_chr('c'),
			_Utils_chr('d'),
			_Utils_chr('e'),
			_Utils_chr('f'),
			_Utils_chr('g'),
			_Utils_chr('h'),
			_Utils_chr('i'),
			_Utils_chr('j'),
			_Utils_chr('k'),
			_Utils_chr('l'),
			_Utils_chr('m'),
			_Utils_chr('n'),
			_Utils_chr('o'),
			_Utils_chr('p'),
			_Utils_chr('q'),
			_Utils_chr('r'),
			_Utils_chr('s'),
			_Utils_chr('t'),
			_Utils_chr('u'),
			_Utils_chr('v'),
			_Utils_chr('w'),
			_Utils_chr('x'),
			_Utils_chr('y'),
			_Utils_chr('z'),
			_Utils_chr('_'),
			_Utils_chr('$')
		]));
var author$project$Ifc$Guid$binaryComponent = F2(
	function (multiplier, bit) {
		return bit ? multiplier : 0;
	});
var author$project$Ifc$Guid$base64Digit = F3(
	function (_n0, _n1, _n2) {
		var bit1 = _n0.a;
		var bit2 = _n0.b;
		var bit3 = _n1.a;
		var bit4 = _n1.b;
		var bit5 = _n2.a;
		var bit6 = _n2.b;
		var number = ((((A2(author$project$Ifc$Guid$binaryComponent, 32, bit1) + A2(author$project$Ifc$Guid$binaryComponent, 16, bit2)) + A2(author$project$Ifc$Guid$binaryComponent, 8, bit3)) + A2(author$project$Ifc$Guid$binaryComponent, 4, bit4)) + A2(author$project$Ifc$Guid$binaryComponent, 2, bit5)) + A2(author$project$Ifc$Guid$binaryComponent, 1, bit6);
		return A2(
			elm$core$Maybe$withDefault,
			_Utils_chr('?'),
			A2(elm$core$Array$get, number, author$project$Ifc$Guid$base64Characters));
	});
var author$project$Ifc$Guid$constantHalfNibble25 = A2(author$project$Ifc$Guid$HalfNibble, false, true);
var author$project$Ifc$Guid$constantHalfNibble26 = A2(author$project$Ifc$Guid$HalfNibble, false, false);
var author$project$Ifc$Guid$constantHalfNibble33 = A2(author$project$Ifc$Guid$HalfNibble, true, false);
var elm$core$String$fromList = _String_fromList;
var author$project$Ifc$Guid$toString = function (_n0) {
	var halfNibble1 = _n0.a;
	var halfNibble2 = _n0.b;
	var halfNibble3 = _n0.c;
	var halfNibble4 = _n0.d;
	var halfNibble5 = _n0.e;
	var halfNibble6 = _n0.f;
	var halfNibble7 = _n0.g;
	var halfNibble8 = _n0.h;
	var halfNibble9 = _n0.i;
	var halfNibble10 = _n0.j;
	var halfNibble11 = _n0.k;
	var halfNibble12 = _n0.l;
	var halfNibble13 = _n0.m;
	var halfNibble14 = _n0.n;
	var halfNibble15 = _n0.o;
	var halfNibble16 = _n0.p;
	var halfNibble17 = _n0.q;
	var halfNibble18 = _n0.r;
	var halfNibble19 = _n0.s;
	var halfNibble20 = _n0.t;
	var halfNibble21 = _n0.u;
	var halfNibble22 = _n0.v;
	var halfNibble23 = _n0.w;
	var halfNibble24 = _n0.x;
	var halfNibble27 = _n0.y;
	var halfNibble28 = _n0.z;
	var halfNibble29 = _n0.A;
	var halfNibble30 = _n0.B;
	var halfNibble31 = _n0.C;
	var halfNibble32 = _n0.D;
	var halfNibble34 = _n0.E;
	var halfNibble35 = _n0.F;
	var halfNibble36 = _n0.G;
	var halfNibble37 = _n0.H;
	var halfNibble38 = _n0.I;
	var halfNibble39 = _n0.J;
	var halfNibble40 = _n0.K;
	var halfNibble41 = _n0.L;
	var halfNibble42 = _n0.M;
	var halfNibble43 = _n0.N;
	var halfNibble44 = _n0.O;
	var halfNibble45 = _n0.P;
	var halfNibble46 = _n0.Q;
	var halfNibble47 = _n0.R;
	var halfNibble48 = _n0.S;
	var halfNibble49 = _n0.T;
	var halfNibble50 = _n0.U;
	var halfNibble51 = _n0.V;
	var halfNibble52 = _n0.W;
	var halfNibble53 = _n0.X;
	var halfNibble54 = _n0.Y;
	var halfNibble55 = _n0.Z;
	var halfNibble56 = _n0._;
	var halfNibble57 = _n0.aa;
	var halfNibble58 = _n0.ab;
	var halfNibble59 = _n0.ac;
	var halfNibble60 = _n0.ad;
	var halfNibble61 = _n0.ae;
	var halfNibble62 = _n0.af;
	var halfNibble63 = _n0.ag;
	var halfNibble64 = _n0.ah;
	return elm$core$String$fromList(
		A2(
			elm$core$List$cons,
			A3(author$project$Ifc$Guid$base64Digit, halfNibble1, halfNibble2, halfNibble3),
			A2(
				elm$core$List$cons,
				A3(author$project$Ifc$Guid$base64Digit, halfNibble4, halfNibble5, halfNibble6),
				A2(
					elm$core$List$cons,
					A3(author$project$Ifc$Guid$base64Digit, halfNibble7, halfNibble8, halfNibble9),
					A2(
						elm$core$List$cons,
						A3(author$project$Ifc$Guid$base64Digit, halfNibble10, halfNibble11, halfNibble12),
						A2(
							elm$core$List$cons,
							A3(author$project$Ifc$Guid$base64Digit, halfNibble13, halfNibble14, halfNibble15),
							A2(
								elm$core$List$cons,
								A3(author$project$Ifc$Guid$base64Digit, halfNibble16, halfNibble17, halfNibble18),
								A2(
									elm$core$List$cons,
									A3(author$project$Ifc$Guid$base64Digit, halfNibble19, halfNibble20, halfNibble21),
									A2(
										elm$core$List$cons,
										A3(author$project$Ifc$Guid$base64Digit, halfNibble22, halfNibble23, halfNibble24),
										A2(
											elm$core$List$cons,
											A3(author$project$Ifc$Guid$base64Digit, author$project$Ifc$Guid$constantHalfNibble25, author$project$Ifc$Guid$constantHalfNibble26, halfNibble27),
											A2(
												elm$core$List$cons,
												A3(author$project$Ifc$Guid$base64Digit, halfNibble28, halfNibble29, halfNibble30),
												A2(
													elm$core$List$cons,
													A3(author$project$Ifc$Guid$base64Digit, halfNibble31, halfNibble32, author$project$Ifc$Guid$constantHalfNibble33),
													A2(
														elm$core$List$cons,
														A3(author$project$Ifc$Guid$base64Digit, halfNibble34, halfNibble35, halfNibble36),
														A2(
															elm$core$List$cons,
															A3(author$project$Ifc$Guid$base64Digit, halfNibble37, halfNibble38, halfNibble39),
															A2(
																elm$core$List$cons,
																A3(author$project$Ifc$Guid$base64Digit, halfNibble40, halfNibble41, halfNibble42),
																A2(
																	elm$core$List$cons,
																	A3(author$project$Ifc$Guid$base64Digit, halfNibble43, halfNibble44, halfNibble45),
																	A2(
																		elm$core$List$cons,
																		A3(author$project$Ifc$Guid$base64Digit, halfNibble46, halfNibble47, halfNibble48),
																		A2(
																			elm$core$List$cons,
																			A3(author$project$Ifc$Guid$base64Digit, halfNibble49, halfNibble50, halfNibble51),
																			A2(
																				elm$core$List$cons,
																				A3(author$project$Ifc$Guid$base64Digit, halfNibble52, halfNibble53, halfNibble54),
																				A2(
																					elm$core$List$cons,
																					A3(author$project$Ifc$Guid$base64Digit, halfNibble55, halfNibble56, halfNibble57),
																					A2(
																						elm$core$List$cons,
																						A3(author$project$Ifc$Guid$base64Digit, halfNibble58, halfNibble59, halfNibble60),
																						A2(
																							elm$core$List$cons,
																							A3(author$project$Ifc$Guid$base64Digit, halfNibble61, halfNibble62, halfNibble63),
																							A2(
																								elm$core$List$cons,
																								A3(
																									author$project$Ifc$Guid$base64Digit,
																									halfNibble64,
																									A2(author$project$Ifc$Guid$HalfNibble, false, false),
																									A2(author$project$Ifc$Guid$HalfNibble, false, false)),
																								_List_Nil)))))))))))))))))))))));
};
var elm_community$string_extra$String$Extra$ellipsisWith = F3(
	function (howLong, append, string) {
		return (_Utils_cmp(
			elm$core$String$length(string),
			howLong) < 1) ? string : _Utils_ap(
			A2(
				elm$core$String$left,
				howLong - elm$core$String$length(append),
				string),
			append);
	});
var ianmackenzie$elm_iso_10303$StepFile$Types$StringAttribute = function (a) {
	return {$: 'StringAttribute', a: a};
};
var ianmackenzie$elm_iso_10303$Iso10303$string = function (value) {
	return ianmackenzie$elm_iso_10303$StepFile$Types$StringAttribute(value);
};
var author$project$Ifc$Types$label = function (value) {
	return ianmackenzie$elm_iso_10303$Iso10303$string(
		A3(elm_community$string_extra$String$Extra$ellipsisWith, 255, '…', value));
};
var author$project$Ifc$Entity$ifcRootEntity = F4(
	function (entityName, _n0, attributes, guid) {
		var ownerHistory = _n0.ownerHistory;
		var name = _n0.name;
		var description = _n0.description;
		return A2(
			ianmackenzie$elm_iso_10303$Iso10303$entity,
			entityName,
			A2(
				elm$core$List$cons,
				ianmackenzie$elm_iso_10303$Iso10303$string(
					author$project$Ifc$Guid$toString(guid)),
				A2(
					elm$core$List$cons,
					A2(author$project$Ifc$Types$optional, ianmackenzie$elm_iso_10303$Iso10303$referenceTo, ownerHistory),
					A2(
						elm$core$List$cons,
						A2(author$project$Ifc$Types$optional, author$project$Ifc$Types$label, name),
						A2(
							elm$core$List$cons,
							A2(author$project$Ifc$Types$optional, ianmackenzie$elm_iso_10303$Iso10303$string, description),
							attributes)))));
	});
var ianmackenzie$elm_iso_10303$StepFile$Types$FloatAttribute = function (a) {
	return {$: 'FloatAttribute', a: a};
};
var ianmackenzie$elm_iso_10303$Iso10303$float = function (value) {
	return ianmackenzie$elm_iso_10303$StepFile$Types$FloatAttribute(value);
};
var author$project$Ifc$Entity$ifcBuilding = function (attributes) {
	return A3(
		author$project$Ifc$Entity$ifcRootEntity,
		'IfcBuilding',
		attributes,
		_List_fromArray(
			[
				A2(author$project$Ifc$Types$optional, author$project$Ifc$Types$label, attributes.objectType),
				A2(author$project$Ifc$Types$optional, ianmackenzie$elm_iso_10303$Iso10303$referenceTo, attributes.objectPlacement),
				A2(author$project$Ifc$Types$optional, ianmackenzie$elm_iso_10303$Iso10303$referenceTo, attributes.representation),
				A2(author$project$Ifc$Types$optional, author$project$Ifc$Types$label, attributes.longName),
				A2(author$project$Ifc$Types$optional, ianmackenzie$elm_iso_10303$Iso10303$referenceTo, attributes.compositionType),
				A2(author$project$Ifc$Types$optional, ianmackenzie$elm_iso_10303$Iso10303$float, attributes.elevationOfRefHeight),
				A2(author$project$Ifc$Types$optional, ianmackenzie$elm_iso_10303$Iso10303$float, attributes.elevationOfTerrain),
				A2(author$project$Ifc$Types$optional, ianmackenzie$elm_iso_10303$Iso10303$referenceTo, attributes.buildingAddress)
			]));
};
var ianmackenzie$elm_iso_10303$StepFile$Types$AttributeList = function (a) {
	return {$: 'AttributeList', a: a};
};
var ianmackenzie$elm_iso_10303$Iso10303$list = F2(
	function (toAttribute, values) {
		return ianmackenzie$elm_iso_10303$StepFile$Types$AttributeList(
			A2(elm$core$List$map, toAttribute, values));
	});
var author$project$Ifc$Entity$ifcCartesianPoint = function (_n0) {
	var coordinates = _n0.coordinates;
	return A2(
		ianmackenzie$elm_iso_10303$Iso10303$entity,
		'IfcCartesianPoint',
		_List_fromArray(
			[
				A2(ianmackenzie$elm_iso_10303$Iso10303$list, ianmackenzie$elm_iso_10303$Iso10303$float, coordinates)
			]));
};
var author$project$Ifc$Entity$ifcDirection = function (_n0) {
	var directionRatios = _n0.directionRatios;
	return A2(
		ianmackenzie$elm_iso_10303$Iso10303$entity,
		'IfcDirection',
		_List_fromArray(
			[
				A2(ianmackenzie$elm_iso_10303$Iso10303$list, ianmackenzie$elm_iso_10303$Iso10303$float, directionRatios)
			]));
};
var author$project$Ifc$Entity$ifcExtrudedAreaSolid = function (_n0) {
	var sweptArea = _n0.sweptArea;
	var position = _n0.position;
	var extrudedDirection = _n0.extrudedDirection;
	var depth = _n0.depth;
	return A2(
		ianmackenzie$elm_iso_10303$Iso10303$entity,
		'IfcExtrudedAreaSolid',
		_List_fromArray(
			[
				ianmackenzie$elm_iso_10303$Iso10303$referenceTo(sweptArea),
				A2(author$project$Ifc$Types$optional, ianmackenzie$elm_iso_10303$Iso10303$referenceTo, position),
				ianmackenzie$elm_iso_10303$Iso10303$referenceTo(extrudedDirection),
				ianmackenzie$elm_iso_10303$Iso10303$float(depth)
			]));
};
var ianmackenzie$elm_iso_10303$StepFile$Types$IntAttribute = function (a) {
	return {$: 'IntAttribute', a: a};
};
var ianmackenzie$elm_iso_10303$Iso10303$int = function (value) {
	return ianmackenzie$elm_iso_10303$StepFile$Types$IntAttribute(value);
};
var author$project$Ifc$Entity$ifcGeometricRepresentationContext = function (_n0) {
	var contextIdentifier = _n0.contextIdentifier;
	var contextType = _n0.contextType;
	var coordinateSpaceDimension = _n0.coordinateSpaceDimension;
	var precision = _n0.precision;
	var worldCoordinateSystem = _n0.worldCoordinateSystem;
	var trueNorth = _n0.trueNorth;
	return A2(
		ianmackenzie$elm_iso_10303$Iso10303$entity,
		'IfcGeometricRepresentationContext',
		_List_fromArray(
			[
				A2(author$project$Ifc$Types$optional, author$project$Ifc$Types$label, contextIdentifier),
				A2(author$project$Ifc$Types$optional, author$project$Ifc$Types$label, contextType),
				ianmackenzie$elm_iso_10303$Iso10303$int(coordinateSpaceDimension),
				A2(author$project$Ifc$Types$optional, ianmackenzie$elm_iso_10303$Iso10303$referenceTo, precision),
				ianmackenzie$elm_iso_10303$Iso10303$referenceTo(worldCoordinateSystem),
				A2(author$project$Ifc$Types$optional, ianmackenzie$elm_iso_10303$Iso10303$referenceTo, trueNorth)
			]));
};
var author$project$Ifc$Entity$ifcLocalPlacement = function (_n0) {
	var placementRelTo = _n0.placementRelTo;
	var relativePlacement = _n0.relativePlacement;
	return A2(
		ianmackenzie$elm_iso_10303$Iso10303$entity,
		'ifcLocalPlacement',
		_List_fromArray(
			[
				A2(author$project$Ifc$Types$optional, ianmackenzie$elm_iso_10303$Iso10303$referenceTo, placementRelTo),
				ianmackenzie$elm_iso_10303$Iso10303$referenceTo(relativePlacement)
			]));
};
var author$project$Ifc$Entity$ifcProductDefinitionShape = function (_n0) {
	var name = _n0.name;
	var description = _n0.description;
	var representations = _n0.representations;
	return A2(
		ianmackenzie$elm_iso_10303$Iso10303$entity,
		'IfcProductDefinitionShape',
		_List_fromArray(
			[
				A2(author$project$Ifc$Types$optional, author$project$Ifc$Types$label, name),
				A2(author$project$Ifc$Types$optional, ianmackenzie$elm_iso_10303$Iso10303$string, description),
				A2(ianmackenzie$elm_iso_10303$Iso10303$list, ianmackenzie$elm_iso_10303$Iso10303$referenceTo, representations)
			]));
};
var author$project$Ifc$Entity$ifcProject = function (attributes) {
	return A3(
		author$project$Ifc$Entity$ifcRootEntity,
		'IfcProject',
		attributes,
		_List_fromArray(
			[
				A2(author$project$Ifc$Types$optional, author$project$Ifc$Types$label, attributes.objectType),
				A2(author$project$Ifc$Types$optional, author$project$Ifc$Types$label, attributes.longName),
				A2(author$project$Ifc$Types$optional, author$project$Ifc$Types$label, attributes.phase),
				A2(
				author$project$Ifc$Types$optional,
				ianmackenzie$elm_iso_10303$Iso10303$list(ianmackenzie$elm_iso_10303$Iso10303$referenceTo),
				attributes.representationContexts),
				A2(author$project$Ifc$Types$optional, ianmackenzie$elm_iso_10303$Iso10303$referenceTo, attributes.unitsInContext)
			]));
};
var elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			elm$core$String$join,
			after,
			A2(elm$core$String$split, before, string));
	});
var ianmackenzie$elm_iso_10303$StepFile$Types$EnumName = function (a) {
	return {$: 'EnumName', a: a};
};
var ianmackenzie$elm_iso_10303$StepFile$Format$enumName = function (value) {
	return ianmackenzie$elm_iso_10303$StepFile$Types$EnumName(
		A3(
			elm$core$String$replace,
			'.',
			'',
			elm$core$String$toUpper(value)));
};
var ianmackenzie$elm_iso_10303$StepFile$Types$EnumAttribute = function (a) {
	return {$: 'EnumAttribute', a: a};
};
var ianmackenzie$elm_iso_10303$Iso10303$enum = function (value) {
	return ianmackenzie$elm_iso_10303$StepFile$Types$EnumAttribute(
		ianmackenzie$elm_iso_10303$StepFile$Format$enumName(value));
};
var author$project$Ifc$Entity$ifcRectangleProfileDef = function (_n0) {
	var profileType = _n0.profileType;
	var profileName = _n0.profileName;
	var position = _n0.position;
	var xDim = _n0.xDim;
	var yDim = _n0.yDim;
	return A2(
		ianmackenzie$elm_iso_10303$Iso10303$entity,
		'IfcRectangleProfileDef',
		_List_fromArray(
			[
				ianmackenzie$elm_iso_10303$Iso10303$enum(profileType),
				A2(author$project$Ifc$Types$optional, ianmackenzie$elm_iso_10303$Iso10303$string, profileName),
				A2(author$project$Ifc$Types$optional, ianmackenzie$elm_iso_10303$Iso10303$referenceTo, position),
				ianmackenzie$elm_iso_10303$Iso10303$float(xDim),
				ianmackenzie$elm_iso_10303$Iso10303$float(yDim)
			]));
};
var author$project$Ifc$Entity$ifcRelAggregates = function (attributes) {
	return A3(
		author$project$Ifc$Entity$ifcRootEntity,
		'ifcRelAggregates',
		attributes,
		_List_fromArray(
			[
				ianmackenzie$elm_iso_10303$Iso10303$referenceTo(attributes.relatingObject),
				A2(ianmackenzie$elm_iso_10303$Iso10303$list, ianmackenzie$elm_iso_10303$Iso10303$referenceTo, attributes.relatedObjects)
			]));
};
var author$project$Ifc$Entity$ifcRelContainedInSpatialStructure = function (attributes) {
	return A3(
		author$project$Ifc$Entity$ifcRootEntity,
		'IfcRelContainedInSpatialStructure',
		attributes,
		_List_fromArray(
			[
				A2(ianmackenzie$elm_iso_10303$Iso10303$list, ianmackenzie$elm_iso_10303$Iso10303$referenceTo, attributes.relatedElements),
				ianmackenzie$elm_iso_10303$Iso10303$referenceTo(attributes.relatingStructure)
			]));
};
var author$project$Ifc$Entity$ifcShapeRepresentation = function (_n0) {
	var contextOfItems = _n0.contextOfItems;
	var representationIdentifier = _n0.representationIdentifier;
	var representationType = _n0.representationType;
	var items = _n0.items;
	return A2(
		ianmackenzie$elm_iso_10303$Iso10303$entity,
		'IfcShapeRepresentation',
		_List_fromArray(
			[
				ianmackenzie$elm_iso_10303$Iso10303$referenceTo(contextOfItems),
				A2(author$project$Ifc$Types$optional, author$project$Ifc$Types$label, representationIdentifier),
				A2(author$project$Ifc$Types$optional, author$project$Ifc$Types$label, representationType),
				A2(ianmackenzie$elm_iso_10303$Iso10303$list, ianmackenzie$elm_iso_10303$Iso10303$referenceTo, items)
			]));
};
var ianmackenzie$elm_iso_10303$StepFile$Types$DefaultAttribute = {$: 'DefaultAttribute'};
var ianmackenzie$elm_iso_10303$Iso10303$default = ianmackenzie$elm_iso_10303$StepFile$Types$DefaultAttribute;
var author$project$Ifc$Entity$ifcSiUnit = function (_n0) {
	var unitType = _n0.unitType;
	var prefix = _n0.prefix;
	var name = _n0.name;
	return A2(
		ianmackenzie$elm_iso_10303$Iso10303$entity,
		'IfcSIUnit',
		_List_fromArray(
			[
				ianmackenzie$elm_iso_10303$Iso10303$default,
				ianmackenzie$elm_iso_10303$Iso10303$enum(unitType),
				A2(author$project$Ifc$Types$optional, ianmackenzie$elm_iso_10303$Iso10303$enum, prefix),
				ianmackenzie$elm_iso_10303$Iso10303$enum(name)
			]));
};
var author$project$Ifc$Entity$ifcUnitAssignment = function (_n0) {
	var units = _n0.units;
	return A2(
		ianmackenzie$elm_iso_10303$Iso10303$entity,
		'IfcUnitAssignment',
		_List_fromArray(
			[
				A2(ianmackenzie$elm_iso_10303$Iso10303$list, ianmackenzie$elm_iso_10303$Iso10303$referenceTo, units)
			]));
};
var author$project$Ifc$Entity$ifcWall = function (attributes) {
	return A3(
		author$project$Ifc$Entity$ifcRootEntity,
		'IfcWall',
		attributes,
		_List_fromArray(
			[
				A2(author$project$Ifc$Types$optional, author$project$Ifc$Types$label, attributes.objectType),
				A2(author$project$Ifc$Types$optional, ianmackenzie$elm_iso_10303$Iso10303$referenceTo, attributes.objectPlacement),
				A2(author$project$Ifc$Types$optional, ianmackenzie$elm_iso_10303$Iso10303$referenceTo, attributes.representation),
				A2(author$project$Ifc$Types$optional, author$project$Ifc$Types$label, attributes.tag),
				A2(author$project$Ifc$Types$optional, ianmackenzie$elm_iso_10303$Iso10303$enum, attributes.predefinedType)
			]));
};
var author$project$Ifc$Utils$renderedWithSeed = function (_n0) {
	var connections = _n0.a;
	var seed = _n0.b;
	return connections(seed);
};
var author$project$Ifc$Guid$Guid = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return function (m) {
													return function (n) {
														return function (o) {
															return function (p) {
																return function (q) {
																	return function (r) {
																		return function (s) {
																			return function (t) {
																				return function (u) {
																					return function (v) {
																						return function (w) {
																							return function (x) {
																								return function (y) {
																									return function (z) {
																										return function (A) {
																											return function (B) {
																												return function (C) {
																													return function (D) {
																														return function (E) {
																															return function (F) {
																																return function (G) {
																																	return function (H) {
																																		return function (I) {
																																			return function (J) {
																																				return function (K) {
																																					return function (L) {
																																						return function (M) {
																																							return function (N) {
																																								return function (O) {
																																									return function (P) {
																																										return function (Q) {
																																											return function (R) {
																																												return function (S) {
																																													return function (T) {
																																														return function (U) {
																																															return function (V) {
																																																return function (W) {
																																																	return function (X) {
																																																		return function (Y) {
																																																			return function (Z) {
																																																				return function (_) {
																																																					return function (aa) {
																																																						return function (ab) {
																																																							return function (ac) {
																																																								return function (ad) {
																																																									return function (ae) {
																																																										return function (af) {
																																																											return function (ag) {
																																																												return function (ah) {
																																																													return {$: 'Guid', a: a, b: b, c: c, d: d, e: e, f: f, g: g, h: h, i: i, j: j, k: k, l: l, m: m, n: n, o: o, p: p, q: q, r: r, s: s, t: t, u: u, v: v, w: w, x: x, y: y, z: z, A: A, B: B, C: C, D: D, E: E, F: F, G: G, H: H, I: I, J: J, K: K, L: L, M: M, N: N, O: O, P: P, Q: Q, R: R, S: S, T: T, U: U, V: V, W: W, X: X, Y: Y, Z: Z, _: _, aa: aa, ab: ab, ac: ac, ad: ad, ae: ae, af: af, ag: ag, ah: ah};
																																																												};
																																																											};
																																																										};
																																																									};
																																																								};
																																																							};
																																																						};
																																																					};
																																																				};
																																																			};
																																																		};
																																																	};
																																																};
																																															};
																																														};
																																													};
																																												};
																																											};
																																										};
																																									};
																																								};
																																							};
																																						};
																																					};
																																				};
																																			};
																																		};
																																	};
																																};
																															};
																														};
																													};
																												};
																											};
																										};
																									};
																								};
																							};
																						};
																					};
																				};
																			};
																		};
																	};
																};
															};
														};
													};
												};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var elm$random$Random$map2 = F3(
	function (func, _n0, _n1) {
		var genA = _n0.a;
		var genB = _n1.a;
		return elm$random$Random$Generator(
			function (seed0) {
				var _n2 = genA(seed0);
				var a = _n2.a;
				var seed1 = _n2.b;
				var _n3 = genB(seed1);
				var b = _n3.a;
				var seed2 = _n3.b;
				return _Utils_Tuple2(
					A2(func, a, b),
					seed2);
			});
	});
var elm$random$Random$addOne = function (value) {
	return _Utils_Tuple2(1, value);
};
var elm$core$List$sum = function (numbers) {
	return A3(elm$core$List$foldl, elm$core$Basics$add, 0, numbers);
};
var elm$random$Random$getByWeight = F3(
	function (_n0, others, countdown) {
		getByWeight:
		while (true) {
			var weight = _n0.a;
			var value = _n0.b;
			if (!others.b) {
				return value;
			} else {
				var second = others.a;
				var otherOthers = others.b;
				if (_Utils_cmp(
					countdown,
					elm$core$Basics$abs(weight)) < 1) {
					return value;
				} else {
					var $temp$_n0 = second,
						$temp$others = otherOthers,
						$temp$countdown = countdown - elm$core$Basics$abs(weight);
					_n0 = $temp$_n0;
					others = $temp$others;
					countdown = $temp$countdown;
					continue getByWeight;
				}
			}
		}
	});
var elm$random$Random$map = F2(
	function (func, _n0) {
		var genA = _n0.a;
		return elm$random$Random$Generator(
			function (seed0) {
				var _n1 = genA(seed0);
				var a = _n1.a;
				var seed1 = _n1.b;
				return _Utils_Tuple2(
					func(a),
					seed1);
			});
	});
var elm$random$Random$weighted = F2(
	function (first, others) {
		var normalize = function (_n0) {
			var weight = _n0.a;
			return elm$core$Basics$abs(weight);
		};
		var total = normalize(first) + elm$core$List$sum(
			A2(elm$core$List$map, normalize, others));
		return A2(
			elm$random$Random$map,
			A2(elm$random$Random$getByWeight, first, others),
			A2(elm$random$Random$float, 0, total));
	});
var elm$random$Random$uniform = F2(
	function (value, valueList) {
		return A2(
			elm$random$Random$weighted,
			elm$random$Random$addOne(value),
			A2(elm$core$List$map, elm$random$Random$addOne, valueList));
	});
var elm_community$random_extra$Random$Extra$bool = A2(
	elm$random$Random$uniform,
	true,
	_List_fromArray(
		[false]));
var author$project$Ifc$Guid$halfNibble = A3(elm$random$Random$map2, author$project$Ifc$Guid$HalfNibble, elm_community$random_extra$Random$Extra$bool, elm_community$random_extra$Random$Extra$bool);
var elm$random$Random$constant = function (value) {
	return elm$random$Random$Generator(
		function (seed) {
			return _Utils_Tuple2(value, seed);
		});
};
var elm_community$random_extra$Random$Extra$andMap = elm$random$Random$map2(elm$core$Basics$apR);
var author$project$Ifc$Guid$randomGuid = A2(
	elm_community$random_extra$Random$Extra$andMap,
	author$project$Ifc$Guid$halfNibble,
	A2(
		elm_community$random_extra$Random$Extra$andMap,
		author$project$Ifc$Guid$halfNibble,
		A2(
			elm_community$random_extra$Random$Extra$andMap,
			author$project$Ifc$Guid$halfNibble,
			A2(
				elm_community$random_extra$Random$Extra$andMap,
				author$project$Ifc$Guid$halfNibble,
				A2(
					elm_community$random_extra$Random$Extra$andMap,
					author$project$Ifc$Guid$halfNibble,
					A2(
						elm_community$random_extra$Random$Extra$andMap,
						author$project$Ifc$Guid$halfNibble,
						A2(
							elm_community$random_extra$Random$Extra$andMap,
							author$project$Ifc$Guid$halfNibble,
							A2(
								elm_community$random_extra$Random$Extra$andMap,
								author$project$Ifc$Guid$halfNibble,
								A2(
									elm_community$random_extra$Random$Extra$andMap,
									author$project$Ifc$Guid$halfNibble,
									A2(
										elm_community$random_extra$Random$Extra$andMap,
										author$project$Ifc$Guid$halfNibble,
										A2(
											elm_community$random_extra$Random$Extra$andMap,
											author$project$Ifc$Guid$halfNibble,
											A2(
												elm_community$random_extra$Random$Extra$andMap,
												author$project$Ifc$Guid$halfNibble,
												A2(
													elm_community$random_extra$Random$Extra$andMap,
													author$project$Ifc$Guid$halfNibble,
													A2(
														elm_community$random_extra$Random$Extra$andMap,
														author$project$Ifc$Guid$halfNibble,
														A2(
															elm_community$random_extra$Random$Extra$andMap,
															author$project$Ifc$Guid$halfNibble,
															A2(
																elm_community$random_extra$Random$Extra$andMap,
																author$project$Ifc$Guid$halfNibble,
																A2(
																	elm_community$random_extra$Random$Extra$andMap,
																	author$project$Ifc$Guid$halfNibble,
																	A2(
																		elm_community$random_extra$Random$Extra$andMap,
																		author$project$Ifc$Guid$halfNibble,
																		A2(
																			elm_community$random_extra$Random$Extra$andMap,
																			author$project$Ifc$Guid$halfNibble,
																			A2(
																				elm_community$random_extra$Random$Extra$andMap,
																				author$project$Ifc$Guid$halfNibble,
																				A2(
																					elm_community$random_extra$Random$Extra$andMap,
																					author$project$Ifc$Guid$halfNibble,
																					A2(
																						elm_community$random_extra$Random$Extra$andMap,
																						author$project$Ifc$Guid$halfNibble,
																						A2(
																							elm_community$random_extra$Random$Extra$andMap,
																							author$project$Ifc$Guid$halfNibble,
																							A2(
																								elm_community$random_extra$Random$Extra$andMap,
																								author$project$Ifc$Guid$halfNibble,
																								A2(
																									elm_community$random_extra$Random$Extra$andMap,
																									author$project$Ifc$Guid$halfNibble,
																									A2(
																										elm_community$random_extra$Random$Extra$andMap,
																										author$project$Ifc$Guid$halfNibble,
																										A2(
																											elm_community$random_extra$Random$Extra$andMap,
																											author$project$Ifc$Guid$halfNibble,
																											A2(
																												elm_community$random_extra$Random$Extra$andMap,
																												author$project$Ifc$Guid$halfNibble,
																												A2(
																													elm_community$random_extra$Random$Extra$andMap,
																													author$project$Ifc$Guid$halfNibble,
																													A2(
																														elm_community$random_extra$Random$Extra$andMap,
																														author$project$Ifc$Guid$halfNibble,
																														A2(
																															elm_community$random_extra$Random$Extra$andMap,
																															author$project$Ifc$Guid$halfNibble,
																															A2(
																																elm_community$random_extra$Random$Extra$andMap,
																																author$project$Ifc$Guid$halfNibble,
																																A2(
																																	elm_community$random_extra$Random$Extra$andMap,
																																	author$project$Ifc$Guid$halfNibble,
																																	A2(
																																		elm_community$random_extra$Random$Extra$andMap,
																																		author$project$Ifc$Guid$halfNibble,
																																		A2(
																																			elm_community$random_extra$Random$Extra$andMap,
																																			author$project$Ifc$Guid$halfNibble,
																																			A2(
																																				elm_community$random_extra$Random$Extra$andMap,
																																				author$project$Ifc$Guid$halfNibble,
																																				A2(
																																					elm_community$random_extra$Random$Extra$andMap,
																																					author$project$Ifc$Guid$halfNibble,
																																					A2(
																																						elm_community$random_extra$Random$Extra$andMap,
																																						author$project$Ifc$Guid$halfNibble,
																																						A2(
																																							elm_community$random_extra$Random$Extra$andMap,
																																							author$project$Ifc$Guid$halfNibble,
																																							A2(
																																								elm_community$random_extra$Random$Extra$andMap,
																																								author$project$Ifc$Guid$halfNibble,
																																								A2(
																																									elm_community$random_extra$Random$Extra$andMap,
																																									author$project$Ifc$Guid$halfNibble,
																																									A2(
																																										elm_community$random_extra$Random$Extra$andMap,
																																										author$project$Ifc$Guid$halfNibble,
																																										A2(
																																											elm_community$random_extra$Random$Extra$andMap,
																																											author$project$Ifc$Guid$halfNibble,
																																											A2(
																																												elm_community$random_extra$Random$Extra$andMap,
																																												author$project$Ifc$Guid$halfNibble,
																																												A2(
																																													elm_community$random_extra$Random$Extra$andMap,
																																													author$project$Ifc$Guid$halfNibble,
																																													A2(
																																														elm_community$random_extra$Random$Extra$andMap,
																																														author$project$Ifc$Guid$halfNibble,
																																														A2(
																																															elm_community$random_extra$Random$Extra$andMap,
																																															author$project$Ifc$Guid$halfNibble,
																																															A2(
																																																elm_community$random_extra$Random$Extra$andMap,
																																																author$project$Ifc$Guid$halfNibble,
																																																A2(
																																																	elm_community$random_extra$Random$Extra$andMap,
																																																	author$project$Ifc$Guid$halfNibble,
																																																	A2(
																																																		elm_community$random_extra$Random$Extra$andMap,
																																																		author$project$Ifc$Guid$halfNibble,
																																																		A2(
																																																			elm_community$random_extra$Random$Extra$andMap,
																																																			author$project$Ifc$Guid$halfNibble,
																																																			A2(
																																																				elm_community$random_extra$Random$Extra$andMap,
																																																				author$project$Ifc$Guid$halfNibble,
																																																				A2(
																																																					elm_community$random_extra$Random$Extra$andMap,
																																																					author$project$Ifc$Guid$halfNibble,
																																																					A2(
																																																						elm_community$random_extra$Random$Extra$andMap,
																																																						author$project$Ifc$Guid$halfNibble,
																																																						A2(
																																																							elm_community$random_extra$Random$Extra$andMap,
																																																							author$project$Ifc$Guid$halfNibble,
																																																							A2(
																																																								elm_community$random_extra$Random$Extra$andMap,
																																																								author$project$Ifc$Guid$halfNibble,
																																																								A2(
																																																									elm_community$random_extra$Random$Extra$andMap,
																																																									author$project$Ifc$Guid$halfNibble,
																																																									A2(
																																																										elm_community$random_extra$Random$Extra$andMap,
																																																										author$project$Ifc$Guid$halfNibble,
																																																										A2(
																																																											elm_community$random_extra$Random$Extra$andMap,
																																																											author$project$Ifc$Guid$halfNibble,
																																																											A2(
																																																												elm_community$random_extra$Random$Extra$andMap,
																																																												author$project$Ifc$Guid$halfNibble,
																																																												A2(
																																																													elm_community$random_extra$Random$Extra$andMap,
																																																													author$project$Ifc$Guid$halfNibble,
																																																													elm$random$Random$constant(author$project$Ifc$Guid$Guid))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
var author$project$Ifc$Utils$withConnection = F3(
	function (entityFactory, attributes, _n0) {
		var entities = _n0.a;
		var seed = _n0.b;
		var _n1 = A2(elm$random$Random$step, author$project$Ifc$Guid$randomGuid, seed);
		var guid = _n1.a;
		var newSeed = _n1.b;
		return _Utils_Tuple2(
			A2(
				elm$core$List$cons,
				A2(entityFactory, attributes, guid),
				entities),
			newSeed);
	});
var author$project$Ifc$Utils$withInitialSeed = F2(
	function (seed, connections) {
		return _Utils_Tuple2(connections, seed);
	});
var author$project$Ifc$Utils$withUniqueEntities = F2(
	function (uniqueEntities, _n0) {
		var connections = _n0.a;
		var seed = _n0.b;
		var renderUniqueEntity = F2(
			function (uniqueEntity, _n3) {
				var currentEntities = _n3.a;
				var currentSeed = _n3.b;
				var _n2 = A2(elm$random$Random$step, author$project$Ifc$Guid$randomGuid, currentSeed);
				var guid = _n2.a;
				var nextSeed = _n2.b;
				return _Utils_Tuple2(
					A2(
						elm$core$List$cons,
						uniqueEntity(guid),
						currentEntities),
					nextSeed);
			});
		var _n1 = A3(
			elm$core$List$foldl,
			renderUniqueEntity,
			_Utils_Tuple2(_List_Nil, seed),
			uniqueEntities);
		var entities = _n1.a;
		var newSeed = _n1.b;
		return _Utils_Tuple2(
			connections(entities),
			newSeed);
	});
var author$project$Ifc$Utils$withUniqueEntity = F2(
	function (uniqueEntity, _n0) {
		var connections = _n0.a;
		var seed = _n0.b;
		var _n1 = A2(elm$random$Random$step, author$project$Ifc$Guid$randomGuid, seed);
		var guid = _n1.a;
		var newSeed = _n1.b;
		return _Utils_Tuple2(
			connections(
				uniqueEntity(guid)),
			newSeed);
	});
var ianmackenzie$elm_geometry$Rectangle2d$centerPoint = function (rectangle) {
	return ianmackenzie$elm_geometry$Frame2d$originPoint(
		ianmackenzie$elm_geometry$Rectangle2d$axes(rectangle));
};
var ianmackenzie$elm_iso_10303$StepFile$Entities$EntityMap = F2(
	function (a, b) {
		return {$: 'EntityMap', a: a, b: b};
	});
var elm$core$Tuple$mapFirst = F2(
	function (func, _n0) {
		var x = _n0.a;
		var y = _n0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var ianmackenzie$elm_iso_10303$StepFile$Entities$update = F3(
	function (entity, entityString, entityMap) {
		var nextId = entityMap.a;
		var idMap = entityMap.b;
		var _n0 = A2(elm$core$Dict$get, entityString, idMap);
		if (_n0.$ === 'Just') {
			var _n1 = _n0.a;
			var id = _n1.a;
			return _Utils_Tuple2(id, entityMap);
		} else {
			return _Utils_Tuple2(
				nextId,
				A2(
					ianmackenzie$elm_iso_10303$StepFile$Entities$EntityMap,
					nextId + 1,
					A3(
						elm$core$Dict$insert,
						entityString,
						_Utils_Tuple2(nextId, entity),
						idMap)));
		}
	});
var ianmackenzie$elm_iso_10303$StepFile$Types$AttributeValue = function (a) {
	return {$: 'AttributeValue', a: a};
};
var ianmackenzie$elm_iso_10303$StepFile$Format$attributeValue = function (value) {
	return ianmackenzie$elm_iso_10303$StepFile$Types$AttributeValue(value);
};
var ianmackenzie$elm_iso_10303$StepFile$Format$binaryAttribute = function (value) {
	return ianmackenzie$elm_iso_10303$StepFile$Format$attributeValue('\"' + (value + '\"'));
};
var ianmackenzie$elm_iso_10303$StepFile$Format$boolAttribute = function (bool) {
	return bool ? ianmackenzie$elm_iso_10303$StepFile$Format$attributeValue('.T.') : ianmackenzie$elm_iso_10303$StepFile$Format$attributeValue('.F.');
};
var ianmackenzie$elm_iso_10303$StepFile$Format$defaultAttribute = ianmackenzie$elm_iso_10303$StepFile$Format$attributeValue('*');
var ianmackenzie$elm_iso_10303$StepFile$Format$entity = F2(
	function (_n0, attributeValues) {
		var rawTypeName = _n0.a;
		var rawAttributeValues = A2(
			elm$core$List$map,
			function (_n1) {
				var rawAttributeValue = _n1.a;
				return rawAttributeValue;
			},
			attributeValues);
		return rawTypeName + ('(' + (A2(elm$core$String$join, ',', rawAttributeValues) + ')'));
	});
var ianmackenzie$elm_iso_10303$StepFile$Format$enumAttribute = function (_n0) {
	var rawEnumName = _n0.a;
	return ianmackenzie$elm_iso_10303$StepFile$Format$attributeValue('.' + (rawEnumName + '.'));
};
var ianmackenzie$elm_iso_10303$StepFile$Format$floatAttribute = function (value) {
	var floatString = elm$core$String$fromFloat(value);
	return ianmackenzie$elm_iso_10303$StepFile$Format$attributeValue(
		A2(elm$core$String$contains, '.', floatString) ? floatString : (floatString + '.'));
};
var ianmackenzie$elm_iso_10303$StepFile$Format$intAttribute = function (value) {
	return ianmackenzie$elm_iso_10303$StepFile$Format$attributeValue(
		elm$core$String$fromInt(value));
};
var ianmackenzie$elm_iso_10303$StepFile$Format$listAttribute = function (attributeValues) {
	var rawAttributeValues = A2(
		elm$core$List$map,
		function (_n0) {
			var rawAttributeValue = _n0.a;
			return rawAttributeValue;
		},
		attributeValues);
	return ianmackenzie$elm_iso_10303$StepFile$Format$attributeValue(
		'(' + (A2(elm$core$String$join, ',', rawAttributeValues) + ')'));
};
var ianmackenzie$elm_iso_10303$StepFile$Format$nullAttribute = ianmackenzie$elm_iso_10303$StepFile$Format$attributeValue('$');
var ianmackenzie$elm_iso_10303$StepFile$Format$id = function (value) {
	return '#' + elm$core$String$fromInt(value);
};
var ianmackenzie$elm_iso_10303$StepFile$Format$referenceTo = function (value) {
	return ianmackenzie$elm_iso_10303$StepFile$Format$attributeValue(
		ianmackenzie$elm_iso_10303$StepFile$Format$id(value));
};
var elm$core$String$foldr = _String_foldr;
var elm$core$String$toList = function (string) {
	return A3(elm$core$String$foldr, elm$core$List$cons, _List_Nil, string);
};
var elm$core$String$cons = _String_cons;
var elm$core$String$fromChar = function (_char) {
	return A2(elm$core$String$cons, _char, '');
};
var elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var elm$core$Char$fromCode = _Char_fromCode;
var ianmackenzie$elm_iso_10303$StepFile$Format$hexCharacterAtIndex = F2(
	function (index, value) {
		var hexDigit = 15 & (value >> (index * 4));
		return ((hexDigit >= 0) && (hexDigit <= 9)) ? elm$core$String$fromChar(
			elm$core$Char$fromCode(
				elm$core$Char$toCode(
					_Utils_chr('0')) + hexDigit)) : (((hexDigit >= 0) && (hexDigit <= 15)) ? elm$core$String$fromChar(
			elm$core$Char$fromCode(
				elm$core$Char$toCode(
					_Utils_chr('A')) + (hexDigit - 10))) : '');
	});
var ianmackenzie$elm_iso_10303$StepFile$Format$hexEncode = F2(
	function (size, value) {
		var characters = A2(
			elm$core$List$map,
			function (i) {
				return A2(ianmackenzie$elm_iso_10303$StepFile$Format$hexCharacterAtIndex, size - i, value);
			},
			A2(elm$core$List$range, 1, size));
		return elm$core$String$concat(characters);
	});
var ianmackenzie$elm_iso_10303$StepFile$Format$encodedCharacter = function (character) {
	if (_Utils_eq(
		character,
		_Utils_chr('\''))) {
		return '\'\'';
	} else {
		if (_Utils_eq(
			character,
			_Utils_chr('\\'))) {
			return '\\';
		} else {
			var codePoint = elm$core$Char$toCode(character);
			return ((codePoint >= 0) && (codePoint <= 31)) ? ('\\X\\' + A2(ianmackenzie$elm_iso_10303$StepFile$Format$hexEncode, 2, codePoint)) : (((codePoint >= 32) && (codePoint <= 126)) ? elm$core$String$fromChar(character) : (((codePoint >= 127) && (codePoint <= 255)) ? ('\\X\\' + A2(ianmackenzie$elm_iso_10303$StepFile$Format$hexEncode, 2, codePoint)) : (((codePoint >= 256) && (codePoint <= 65535)) ? ('\\X2\\' + (A2(ianmackenzie$elm_iso_10303$StepFile$Format$hexEncode, 4, codePoint) + '\\X0\\')) : (((codePoint >= 65536) && (codePoint <= 1114111)) ? ('\\X4\\' + (A2(ianmackenzie$elm_iso_10303$StepFile$Format$hexEncode, 8, codePoint) + '\\X0\\')) : ''))));
		}
	}
};
var ianmackenzie$elm_iso_10303$StepFile$Format$stringAttribute = function (value) {
	var encoded = elm$core$String$concat(
		A2(
			elm$core$List$map,
			ianmackenzie$elm_iso_10303$StepFile$Format$encodedCharacter,
			elm$core$String$toList(value)));
	return ianmackenzie$elm_iso_10303$StepFile$Format$attributeValue('\'' + (encoded + '\''));
};
var ianmackenzie$elm_iso_10303$StepFile$Format$typedAttribute = F2(
	function (_n0, _n1) {
		var rawTypeName = _n0.a;
		var rawAttributeValue = _n1.a;
		return ianmackenzie$elm_iso_10303$StepFile$Format$attributeValue(rawTypeName + ('(' + (rawAttributeValue + ')')));
	});
var ianmackenzie$elm_iso_10303$StepFile$Entities$addAttribute = F2(
	function (attribute, entityMap) {
		switch (attribute.$) {
			case 'DefaultAttribute':
				return _Utils_Tuple2(ianmackenzie$elm_iso_10303$StepFile$Format$defaultAttribute, entityMap);
			case 'NullAttribute':
				return _Utils_Tuple2(ianmackenzie$elm_iso_10303$StepFile$Format$nullAttribute, entityMap);
			case 'BoolAttribute':
				var bool = attribute.a;
				return _Utils_Tuple2(
					ianmackenzie$elm_iso_10303$StepFile$Format$boolAttribute(bool),
					entityMap);
			case 'IntAttribute':
				var _int = attribute.a;
				return _Utils_Tuple2(
					ianmackenzie$elm_iso_10303$StepFile$Format$intAttribute(_int),
					entityMap);
			case 'FloatAttribute':
				var _float = attribute.a;
				return _Utils_Tuple2(
					ianmackenzie$elm_iso_10303$StepFile$Format$floatAttribute(_float),
					entityMap);
			case 'StringAttribute':
				var string = attribute.a;
				return _Utils_Tuple2(
					ianmackenzie$elm_iso_10303$StepFile$Format$stringAttribute(string),
					entityMap);
			case 'BinaryAttribute':
				var string = attribute.a;
				return _Utils_Tuple2(
					ianmackenzie$elm_iso_10303$StepFile$Format$binaryAttribute(string),
					entityMap);
			case 'EnumAttribute':
				var enumName = attribute.a;
				return _Utils_Tuple2(
					ianmackenzie$elm_iso_10303$StepFile$Format$enumAttribute(enumName),
					entityMap);
			case 'ReferenceTo':
				var entity = attribute.a;
				var _n4 = A2(ianmackenzie$elm_iso_10303$StepFile$Entities$addEntity, entity, entityMap);
				var entityId = _n4.a;
				var updatedMap = _n4.b;
				return _Utils_Tuple2(
					ianmackenzie$elm_iso_10303$StepFile$Format$referenceTo(entityId),
					updatedMap);
			case 'TypedAttribute':
				var typeName = attribute.a;
				var typedAttribute = attribute.b;
				var _n5 = A2(ianmackenzie$elm_iso_10303$StepFile$Entities$addAttribute, typedAttribute, entityMap);
				var attributeValue = _n5.a;
				var updatedMap = _n5.b;
				return _Utils_Tuple2(
					A2(ianmackenzie$elm_iso_10303$StepFile$Format$typedAttribute, typeName, attributeValue),
					updatedMap);
			default:
				var attributes = attribute.a;
				var _n6 = A2(ianmackenzie$elm_iso_10303$StepFile$Entities$addAttributes, attributes, entityMap);
				var attributeValues = _n6.a;
				var mapWithAttributes = _n6.b;
				return _Utils_Tuple2(
					ianmackenzie$elm_iso_10303$StepFile$Format$listAttribute(attributeValues),
					mapWithAttributes);
		}
	});
var ianmackenzie$elm_iso_10303$StepFile$Entities$addAttributes = F2(
	function (attributes, entityMap) {
		return A2(
			elm$core$Tuple$mapFirst,
			elm$core$List$reverse,
			A3(
				elm$core$List$foldl,
				F2(
					function (attribute, _n1) {
						var accumulatedAttributeValues = _n1.a;
						var accumulatedMap = _n1.b;
						var _n2 = A2(ianmackenzie$elm_iso_10303$StepFile$Entities$addAttribute, attribute, accumulatedMap);
						var attributeValue = _n2.a;
						var mapWithAttribute = _n2.b;
						return _Utils_Tuple2(
							A2(elm$core$List$cons, attributeValue, accumulatedAttributeValues),
							mapWithAttribute);
					}),
				_Utils_Tuple2(_List_Nil, entityMap),
				attributes));
	});
var ianmackenzie$elm_iso_10303$StepFile$Entities$addEntity = F2(
	function (entity, entityMap) {
		var typeName = entity.a;
		var attributes = entity.b;
		var _n0 = A2(ianmackenzie$elm_iso_10303$StepFile$Entities$addAttributes, attributes, entityMap);
		var attributeValues = _n0.a;
		var mapWithAttributes = _n0.b;
		var entityString = A2(ianmackenzie$elm_iso_10303$StepFile$Format$entity, typeName, attributeValues);
		return A3(ianmackenzie$elm_iso_10303$StepFile$Entities$update, entity, entityString, mapWithAttributes);
	});
var ianmackenzie$elm_iso_10303$StepFile$Entities$buildMap = function (entities) {
	return A3(
		elm$core$List$foldl,
		F2(
			function (entity, accumulatedMap) {
				return A2(ianmackenzie$elm_iso_10303$StepFile$Entities$addEntity, entity, accumulatedMap).b;
			}),
		A2(ianmackenzie$elm_iso_10303$StepFile$Entities$EntityMap, 1, elm$core$Dict$empty),
		entities);
};
var ianmackenzie$elm_iso_10303$StepFile$Entities$compile = function (entities) {
	var _n0 = ianmackenzie$elm_iso_10303$StepFile$Entities$buildMap(entities);
	var idMap = _n0.b;
	return A2(
		elm$core$List$sortBy,
		function (_n3) {
			var id = _n3.a;
			var entity = _n3.b;
			var string = _n3.c;
			return id;
		},
		A2(
			elm$core$List$map,
			function (_n1) {
				var string = _n1.a;
				var _n2 = _n1.b;
				var id = _n2.a;
				var entity = _n2.b;
				return _Utils_Tuple3(id, entity, string);
			},
			elm$core$Dict$toList(idMap)));
};
var ianmackenzie$elm_iso_10303$Iso10303$headerString = function (header) {
	var fileSchemaEntity = A2(
		ianmackenzie$elm_iso_10303$Iso10303$entity,
		'FILE_SCHEMA',
		_List_fromArray(
			[
				A2(ianmackenzie$elm_iso_10303$Iso10303$list, ianmackenzie$elm_iso_10303$Iso10303$string, header.schemaIdentifiers)
			]));
	var fileNameEntity = A2(
		ianmackenzie$elm_iso_10303$Iso10303$entity,
		'FILE_NAME',
		_List_fromArray(
			[
				ianmackenzie$elm_iso_10303$Iso10303$string(header.fileName),
				ianmackenzie$elm_iso_10303$Iso10303$string(header.timeStamp),
				A2(ianmackenzie$elm_iso_10303$Iso10303$list, ianmackenzie$elm_iso_10303$Iso10303$string, header.author),
				A2(ianmackenzie$elm_iso_10303$Iso10303$list, ianmackenzie$elm_iso_10303$Iso10303$string, header.organization),
				ianmackenzie$elm_iso_10303$Iso10303$string(header.preprocessorVersion),
				ianmackenzie$elm_iso_10303$Iso10303$string(header.originatingSystem),
				ianmackenzie$elm_iso_10303$Iso10303$string(header.authorization)
			]));
	var fileDescriptionEntity = A2(
		ianmackenzie$elm_iso_10303$Iso10303$entity,
		'FILE_DESCRIPTION',
		_List_fromArray(
			[
				A2(ianmackenzie$elm_iso_10303$Iso10303$list, ianmackenzie$elm_iso_10303$Iso10303$string, header.fileDescription),
				ianmackenzie$elm_iso_10303$Iso10303$string('2;1')
			]));
	var headerEntities = _List_fromArray(
		[fileDescriptionEntity, fileNameEntity, fileSchemaEntity]);
	return A2(
		elm$core$String$join,
		'\n',
		A2(
			elm$core$List$map,
			function (_n0) {
				var id = _n0.a;
				var entity_ = _n0.b;
				var entityString = _n0.c;
				return entityString + ';';
			},
			ianmackenzie$elm_iso_10303$StepFile$Entities$compile(headerEntities)));
};
var ianmackenzie$elm_iso_10303$Iso10303$file = F2(
	function (header, entities) {
		var toKeyValuePair = function (_n1) {
			var id = _n1.a;
			var entity_ = _n1.b;
			var entityString = _n1.c;
			return _Utils_Tuple2(id, entity_);
		};
		var toEntityLine = function (_n0) {
			var id = _n0.a;
			var entity_ = _n0.b;
			var entityString = _n0.c;
			return ianmackenzie$elm_iso_10303$StepFile$Format$id(id) + ('=' + (entityString + ';'));
		};
		var compiledEntities = ianmackenzie$elm_iso_10303$StepFile$Entities$compile(entities);
		var entitiesString = A2(
			elm$core$String$join,
			'\n',
			A2(elm$core$List$map, toEntityLine, compiledEntities));
		var indexedEntities = elm$core$Dict$fromList(
			A2(elm$core$List$map, toKeyValuePair, compiledEntities));
		return A2(
			elm$core$String$join,
			'\n',
			_List_fromArray(
				[
					'ISO-10303-21;',
					'HEADER;',
					ianmackenzie$elm_iso_10303$Iso10303$headerString(header),
					'ENDSEC;',
					'DATA;',
					entitiesString,
					'ENDSEC;',
					'END-ISO-10303-21;\n'
				]));
	});
var elm$time$Time$flooredDiv = F2(
	function (numerator, denominator) {
		return elm$core$Basics$floor(numerator / denominator);
	});
var elm$time$Time$toAdjustedMinutesHelp = F3(
	function (defaultOffset, posixMinutes, eras) {
		toAdjustedMinutesHelp:
		while (true) {
			if (!eras.b) {
				return posixMinutes + defaultOffset;
			} else {
				var era = eras.a;
				var olderEras = eras.b;
				if (_Utils_cmp(era.start, posixMinutes) < 0) {
					return posixMinutes + era.offset;
				} else {
					var $temp$defaultOffset = defaultOffset,
						$temp$posixMinutes = posixMinutes,
						$temp$eras = olderEras;
					defaultOffset = $temp$defaultOffset;
					posixMinutes = $temp$posixMinutes;
					eras = $temp$eras;
					continue toAdjustedMinutesHelp;
				}
			}
		}
	});
var elm$time$Time$toAdjustedMinutes = F2(
	function (_n0, time) {
		var defaultOffset = _n0.a;
		var eras = _n0.b;
		return A3(
			elm$time$Time$toAdjustedMinutesHelp,
			defaultOffset,
			A2(
				elm$time$Time$flooredDiv,
				elm$time$Time$posixToMillis(time),
				60000),
			eras);
	});
var elm$time$Time$toCivil = function (minutes) {
	var rawDay = A2(elm$time$Time$flooredDiv, minutes, 60 * 24) + 719468;
	var era = (((rawDay >= 0) ? rawDay : (rawDay - 146096)) / 146097) | 0;
	var dayOfEra = rawDay - (era * 146097);
	var yearOfEra = ((((dayOfEra - ((dayOfEra / 1460) | 0)) + ((dayOfEra / 36524) | 0)) - ((dayOfEra / 146096) | 0)) / 365) | 0;
	var dayOfYear = dayOfEra - (((365 * yearOfEra) + ((yearOfEra / 4) | 0)) - ((yearOfEra / 100) | 0));
	var mp = (((5 * dayOfYear) + 2) / 153) | 0;
	var month = mp + ((mp < 10) ? 3 : (-9));
	var year = yearOfEra + (era * 400);
	return {
		day: (dayOfYear - ((((153 * mp) + 2) / 5) | 0)) + 1,
		month: month,
		year: year + ((month <= 2) ? 1 : 0)
	};
};
var elm$time$Time$toDay = F2(
	function (zone, time) {
		return elm$time$Time$toCivil(
			A2(elm$time$Time$toAdjustedMinutes, zone, time)).day;
	});
var elm$time$Time$toHour = F2(
	function (zone, time) {
		return A2(
			elm$core$Basics$modBy,
			24,
			A2(
				elm$time$Time$flooredDiv,
				A2(elm$time$Time$toAdjustedMinutes, zone, time),
				60));
	});
var elm$time$Time$toMillis = F2(
	function (_n0, time) {
		return A2(
			elm$core$Basics$modBy,
			1000,
			elm$time$Time$posixToMillis(time));
	});
var elm$time$Time$toMinute = F2(
	function (zone, time) {
		return A2(
			elm$core$Basics$modBy,
			60,
			A2(elm$time$Time$toAdjustedMinutes, zone, time));
	});
var elm$time$Time$Apr = {$: 'Apr'};
var elm$time$Time$Aug = {$: 'Aug'};
var elm$time$Time$Dec = {$: 'Dec'};
var elm$time$Time$Feb = {$: 'Feb'};
var elm$time$Time$Jan = {$: 'Jan'};
var elm$time$Time$Jul = {$: 'Jul'};
var elm$time$Time$Jun = {$: 'Jun'};
var elm$time$Time$Mar = {$: 'Mar'};
var elm$time$Time$May = {$: 'May'};
var elm$time$Time$Nov = {$: 'Nov'};
var elm$time$Time$Oct = {$: 'Oct'};
var elm$time$Time$Sep = {$: 'Sep'};
var elm$time$Time$toMonth = F2(
	function (zone, time) {
		var _n0 = elm$time$Time$toCivil(
			A2(elm$time$Time$toAdjustedMinutes, zone, time)).month;
		switch (_n0) {
			case 1:
				return elm$time$Time$Jan;
			case 2:
				return elm$time$Time$Feb;
			case 3:
				return elm$time$Time$Mar;
			case 4:
				return elm$time$Time$Apr;
			case 5:
				return elm$time$Time$May;
			case 6:
				return elm$time$Time$Jun;
			case 7:
				return elm$time$Time$Jul;
			case 8:
				return elm$time$Time$Aug;
			case 9:
				return elm$time$Time$Sep;
			case 10:
				return elm$time$Time$Oct;
			case 11:
				return elm$time$Time$Nov;
			default:
				return elm$time$Time$Dec;
		}
	});
var elm$time$Time$toSecond = F2(
	function (_n0, time) {
		return A2(
			elm$core$Basics$modBy,
			60,
			A2(
				elm$time$Time$flooredDiv,
				elm$time$Time$posixToMillis(time),
				1000));
	});
var elm$time$Time$toYear = F2(
	function (zone, time) {
		return elm$time$Time$toCivil(
			A2(elm$time$Time$toAdjustedMinutes, zone, time)).year;
	});
var elm$time$Time$Zone = F2(
	function (a, b) {
		return {$: 'Zone', a: a, b: b};
	});
var elm$time$Time$utc = A2(elm$time$Time$Zone, 0, _List_Nil);
var ringvold$elm_iso8601_date_strings$Iso8601$fromMonth = function (month) {
	switch (month.$) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3(elm$core$String$repeatHelp, n, chunk, '');
	});
var elm$core$String$padLeft = F3(
	function (n, _char, string) {
		return _Utils_ap(
			A2(
				elm$core$String$repeat,
				n - elm$core$String$length(string),
				elm$core$String$fromChar(_char)),
			string);
	});
var ringvold$elm_iso8601_date_strings$Iso8601$toPaddedString = F2(
	function (digits, time) {
		return A3(
			elm$core$String$padLeft,
			digits,
			_Utils_chr('0'),
			elm$core$String$fromInt(time));
	});
var ringvold$elm_iso8601_date_strings$Iso8601$fromTime = function (time) {
	return A2(
		ringvold$elm_iso8601_date_strings$Iso8601$toPaddedString,
		4,
		A2(elm$time$Time$toYear, elm$time$Time$utc, time)) + ('-' + (A2(
		ringvold$elm_iso8601_date_strings$Iso8601$toPaddedString,
		2,
		ringvold$elm_iso8601_date_strings$Iso8601$fromMonth(
			A2(elm$time$Time$toMonth, elm$time$Time$utc, time))) + ('-' + (A2(
		ringvold$elm_iso8601_date_strings$Iso8601$toPaddedString,
		2,
		A2(elm$time$Time$toDay, elm$time$Time$utc, time)) + ('T' + (A2(
		ringvold$elm_iso8601_date_strings$Iso8601$toPaddedString,
		2,
		A2(elm$time$Time$toHour, elm$time$Time$utc, time)) + (':' + (A2(
		ringvold$elm_iso8601_date_strings$Iso8601$toPaddedString,
		2,
		A2(elm$time$Time$toMinute, elm$time$Time$utc, time)) + (':' + (A2(
		ringvold$elm_iso8601_date_strings$Iso8601$toPaddedString,
		2,
		A2(elm$time$Time$toSecond, elm$time$Time$utc, time)) + ('.' + (A2(
		ringvold$elm_iso8601_date_strings$Iso8601$toPaddedString,
		3,
		A2(elm$time$Time$toMillis, elm$time$Time$utc, time)) + 'Z'))))))))))));
};
var author$project$Session$toIfcString = F2(
	function (timestamp, session) {
		var zPositive = author$project$Ifc$Entity$ifcDirection(
			{
				directionRatios: _List_fromArray(
					[0, 0, 1])
			});
		var wallThickness = function (wallType) {
			return author$project$Grid$Units$toMillimeters(
				author$project$Architecture$Wall$wallTypeThickness(wallType));
		};
		var units = author$project$Ifc$Entity$ifcUnitAssignment(
			{
				units: _List_fromArray(
					[
						author$project$Ifc$Entity$ifcSiUnit(
						{
							name: 'METRE',
							prefix: elm$core$Maybe$Just('MILLI'),
							unitType: 'LENGTHUNIT'
						})
					])
			});
		var tomek = 'Tomek Wiszniewski <tomek@spacey.ai>';
		var modelContext = author$project$Ifc$Entity$ifcGeometricRepresentationContext(
			{
				contextIdentifier: elm$core$Maybe$Just('Model'),
				contextType: elm$core$Maybe$Nothing,
				coordinateSpaceDimension: 3,
				precision: elm$core$Maybe$Nothing,
				trueNorth: elm$core$Maybe$Just(
					author$project$Ifc$Entity$ifcDirection(
						{
							directionRatios: _List_fromArray(
								[0.7563, 0.6545, 0])
						})),
				worldCoordinateSystem: author$project$Ifc$Entity$ifcAxis2Placement3D(
					{
						axis: elm$core$Maybe$Nothing,
						location: author$project$Ifc$Entity$ifcCartesianPoint(
							{
								coordinates: _List_fromArray(
									[0, 0, 0])
							}),
						refDirection: elm$core$Maybe$Nothing
					})
			});
		var project = author$project$Ifc$Entity$ifcProject(
			{
				description: elm$core$Maybe$Just('Conversion of a warehouse into a multi-functional space for office work, event hosting and storage'),
				longName: elm$core$Maybe$Nothing,
				name: elm$core$Maybe$Just('RTCK loft'),
				objectType: elm$core$Maybe$Nothing,
				ownerHistory: elm$core$Maybe$Nothing,
				phase: elm$core$Maybe$Nothing,
				representationContexts: elm$core$Maybe$Just(
					_List_fromArray(
						[modelContext])),
				unitsInContext: elm$core$Maybe$Just(units)
			});
		var wallRepresentation = F2(
			function (xDim, yDim) {
				return author$project$Ifc$Entity$ifcProductDefinitionShape(
					{
						description: elm$core$Maybe$Nothing,
						name: elm$core$Maybe$Nothing,
						representations: _List_fromArray(
							[
								author$project$Ifc$Entity$ifcShapeRepresentation(
								{
									contextOfItems: modelContext,
									items: _List_fromArray(
										[
											author$project$Ifc$Entity$ifcExtrudedAreaSolid(
											{
												depth: 3000,
												extrudedDirection: zPositive,
												position: elm$core$Maybe$Nothing,
												sweptArea: author$project$Ifc$Entity$ifcRectangleProfileDef(
													{position: elm$core$Maybe$Nothing, profileName: elm$core$Maybe$Nothing, profileType: 'AREA', xDim: xDim, yDim: yDim})
											})
										]),
									representationIdentifier: elm$core$Maybe$Nothing,
									representationType: elm$core$Maybe$Nothing
								})
							])
					});
			});
		var wall = function (_n6) {
			var x = _n6.x;
			var y = _n6.y;
			var xDimension = _n6.xDimension;
			var yDimension = _n6.yDimension;
			return author$project$Ifc$Entity$ifcWall(
				{
					description: elm$core$Maybe$Nothing,
					name: elm$core$Maybe$Nothing,
					objectPlacement: elm$core$Maybe$Just(
						author$project$Ifc$Entity$ifcLocalPlacement(
							{
								placementRelTo: elm$core$Maybe$Nothing,
								relativePlacement: author$project$Ifc$Entity$ifcAxis2Placement3D(
									{
										axis: elm$core$Maybe$Nothing,
										location: author$project$Ifc$Entity$ifcCartesianPoint(
											{
												coordinates: _List_fromArray(
													[x, y, 0])
											}),
										refDirection: elm$core$Maybe$Nothing
									})
							})),
					objectType: elm$core$Maybe$Nothing,
					ownerHistory: elm$core$Maybe$Nothing,
					predefinedType: elm$core$Maybe$Nothing,
					representation: elm$core$Maybe$Just(
						A2(wallRepresentation, xDimension, yDimension)),
					tag: elm$core$Maybe$Nothing
				});
		};
		var wallFromItem = function (_n5) {
			var direction = _n5.direction;
			var length = _n5.length;
			var x = _n5.x;
			var y = _n5.y;
			var wallType = _n5.wallType;
			var wallLength = author$project$Grid$Units$toMillimeters(length);
			var _n3 = function () {
				if (direction.$ === 'NorthToSouth') {
					return _Utils_Tuple2(
						wallThickness(wallType),
						wallLength);
				} else {
					return _Utils_Tuple2(
						wallLength,
						wallThickness(wallType));
				}
			}();
			var xDimension = _n3.a;
			var yDimension = _n3.b;
			return wall(
				{
					x: author$project$Grid$Units$toMillimeters(x) + (xDimension / 2),
					xDimension: xDimension,
					y: author$project$Grid$Units$toMillimeters(y) + (yDimension / 2),
					yDimension: yDimension
				});
		};
		var itemToWall = function (item) {
			return A2(
				elm$core$Maybe$map,
				function (itemWall) {
					return wallFromItem(
						{
							direction: author$project$Architecture$Wall$direction(itemWall),
							length: author$project$Architecture$Wall$length(itemWall),
							wallType: author$project$Architecture$Wall$wallType(itemWall),
							x: author$project$Grid$Vector$xComponent(
								author$project$Architecture$Item$translation(item)),
							y: author$project$Grid$Vector$yComponent(
								author$project$Architecture$Item$translation(item))
						});
				},
				author$project$Architecture$Item$getWall(item));
		};
		var isoDatetime = ringvold$elm_iso8601_date_strings$Iso8601$fromTime(timestamp);
		var existingItemToWall = function (existingWall) {
			var projection = author$project$Architecture$ExistingWall$projection(existingWall);
			var _n1 = ianmackenzie$elm_geometry$Rectangle2d$dimensions(projection);
			var xDimension = _n1.a;
			var yDimension = _n1.b;
			var _n2 = ianmackenzie$elm_geometry$Point2d$coordinates(
				ianmackenzie$elm_geometry$Rectangle2d$centerPoint(projection));
			var x = _n2.a;
			var y = _n2.b;
			return wall(
				{x: x, xDimension: xDimension, y: y, yDimension: yDimension});
		};
		var walls = _Utils_ap(
			A2(elm$core$List$filterMap, itemToWall, session.placedItems),
			A2(
				elm$core$List$map,
				existingItemToWall,
				A2(elm$core$List$filterMap, author$project$Architecture$ExistingItem$getWall, session.existingItems)));
		var building = author$project$Ifc$Entity$ifcBuilding(
			{buildingAddress: elm$core$Maybe$Nothing, compositionType: elm$core$Maybe$Nothing, description: elm$core$Maybe$Nothing, elevationOfRefHeight: elm$core$Maybe$Nothing, elevationOfTerrain: elm$core$Maybe$Nothing, longName: elm$core$Maybe$Nothing, name: elm$core$Maybe$Nothing, objectPlacement: elm$core$Maybe$Nothing, objectType: elm$core$Maybe$Nothing, ownerHistory: elm$core$Maybe$Nothing, representation: elm$core$Maybe$Nothing});
		var associations = F4(
			function (renderedProject, renderedBuilding, renderedWalls, seed) {
				return A3(
					author$project$Ifc$Utils$withConnection,
					author$project$Ifc$Entity$ifcRelContainedInSpatialStructure,
					{description: elm$core$Maybe$Nothing, name: elm$core$Maybe$Nothing, ownerHistory: elm$core$Maybe$Nothing, relatedElements: renderedWalls, relatingStructure: renderedBuilding},
					A3(
						author$project$Ifc$Utils$withConnection,
						author$project$Ifc$Entity$ifcRelAggregates,
						{
							description: elm$core$Maybe$Nothing,
							name: elm$core$Maybe$Nothing,
							ownerHistory: elm$core$Maybe$Nothing,
							relatedObjects: _List_fromArray(
								[renderedBuilding]),
							relatingObject: renderedProject
						},
						_Utils_Tuple2(
							A2(
								elm$core$List$cons,
								renderedProject,
								A2(elm$core$List$cons, renderedBuilding, renderedWalls)),
							seed)));
			});
		var _n0 = author$project$Ifc$Utils$renderedWithSeed(
			A2(
				author$project$Ifc$Utils$withUniqueEntities,
				walls,
				A2(
					author$project$Ifc$Utils$withUniqueEntity,
					building,
					A2(
						author$project$Ifc$Utils$withUniqueEntity,
						project,
						A2(author$project$Ifc$Utils$withInitialSeed, session.currentSeed, associations)))));
		var entities = _n0.a;
		var newSeed = _n0.b;
		return _Utils_Tuple2(
			_Utils_update(
				session,
				{currentSeed: newSeed}),
			A2(
				ianmackenzie$elm_iso_10303$Iso10303$file,
				{
					author: _List_fromArray(
						[tomek]),
					authorization: tomek,
					fileDescription: _List_fromArray(
						['RTCK loft']),
					fileName: '',
					organization: _List_fromArray(
						['Spacey (https://spacey.ai)']),
					originatingSystem: 'Spacey',
					preprocessorVersion: isoDatetime,
					schemaIdentifiers: _List_fromArray(
						['IFC4']),
					timeStamp: isoDatetime
				},
				entities));
	});
var elm$browser$Browser$Navigation$load = _Browser_load;
var elm$browser$Browser$Navigation$pushUrl = _Browser_pushUrl;
var elm$core$Debug$log = _Debug_log;
var elm$core$Platform$Cmd$map = _Platform_map;
var elm$time$Time$Name = function (a) {
	return {$: 'Name', a: a};
};
var elm$time$Time$Offset = function (a) {
	return {$: 'Offset', a: a};
};
var elm$time$Time$customZone = elm$time$Time$Zone;
var elm$time$Time$now = _Time_now(elm$time$Time$millisToPosix);
var elm$url$Url$addPort = F2(
	function (maybePort, starter) {
		if (maybePort.$ === 'Nothing') {
			return starter;
		} else {
			var port_ = maybePort.a;
			return starter + (':' + elm$core$String$fromInt(port_));
		}
	});
var elm$url$Url$addPrefixed = F3(
	function (prefix, maybeSegment, starter) {
		if (maybeSegment.$ === 'Nothing') {
			return starter;
		} else {
			var segment = maybeSegment.a;
			return _Utils_ap(
				starter,
				_Utils_ap(prefix, segment));
		}
	});
var elm$url$Url$toString = function (url) {
	var http = function () {
		var _n0 = url.protocol;
		if (_n0.$ === 'Http') {
			return 'http://';
		} else {
			return 'https://';
		}
	}();
	return A3(
		elm$url$Url$addPrefixed,
		'#',
		url.fragment,
		A3(
			elm$url$Url$addPrefixed,
			'?',
			url.query,
			_Utils_ap(
				A2(
					elm$url$Url$addPort,
					url.port_,
					_Utils_ap(http, url.host)),
				url.path)));
};
var author$project$Main$update = F2(
	function (message, model) {
		var navigationKey = author$project$Session$navigationKey(
			author$project$Main$toSession(model));
		var _n0 = _Utils_Tuple2(
			message,
			A2(elm$core$Debug$log, 'model', model));
		switch (_n0.a.$) {
			case 'RequestedIfc':
				return _Utils_Tuple2(
					model,
					A2(elm$core$Task$perform, author$project$Main$GotIfcTimestamp, elm$time$Time$now));
			case 'GotIfcTimestamp':
				var timestamp = _n0.a.a;
				var _n1 = A2(
					author$project$Session$toIfcString,
					timestamp,
					author$project$Main$toSession(model));
				var newSession = _n1.a;
				var ifcString = _n1.b;
				return _Utils_Tuple2(
					A2(author$project$Main$updateSession, newSession, model),
					author$project$Main$ifcContentReady(ifcString));
			case 'ChangedUrl':
				var url = _n0.a.a;
				return A2(
					author$project$Main$changeRouteTo,
					author$project$Route$fromUrl(url),
					model);
			case 'ClickedLink':
				var urlRequest = _n0.a.a;
				if (urlRequest.$ === 'Internal') {
					var url = urlRequest.a;
					return _Utils_Tuple2(
						model,
						A2(
							elm$browser$Browser$Navigation$pushUrl,
							navigationKey,
							elm$url$Url$toString(url)));
				} else {
					var href = urlRequest.a;
					return _Utils_Tuple2(
						model,
						elm$browser$Browser$Navigation$load(href));
				}
			case 'GotLayoutMessage':
				if (_n0.b.$ === 'Layout') {
					var layoutMessage = _n0.a.a;
					var session = _n0.b.a;
					return _Utils_Tuple2(
						author$project$Main$Layout(
							A2(author$project$Pages$Layout$update, layoutMessage, session)),
						elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			case 'GotInteriorMessage':
				if (_n0.b.$ === 'Interior') {
					var interiorMessage = _n0.a.a;
					var interiorModel = _n0.b.a;
					var _n3 = A2(author$project$Pages$Interior$update, interiorMessage, interiorModel);
					var newModel = _n3.a;
					var command = _n3.b;
					return _Utils_Tuple2(
						author$project$Main$Interior(newModel),
						A2(elm$core$Platform$Cmd$map, author$project$Main$GotInteriorMessage, command));
				} else {
					return _Utils_Tuple2(model, elm$core$Platform$Cmd$none);
				}
			default:
				var newModel = _n0.a.a;
				return _Utils_Tuple2(newModel, elm$core$Platform$Cmd$none);
		}
	});
var author$project$Main$GotLayoutMessage = function (a) {
	return {$: 'GotLayoutMessage', a: a};
};
var author$project$Architecture$Door$doorType = function (_n0) {
	var door = _n0.a;
	return door.doorType;
};
var author$project$Architecture$Equipment$Upstairs = {$: 'Upstairs'};
var author$project$Architecture$Equipment$BuiltInBathtub = {$: 'BuiltInBathtub'};
var author$project$Architecture$Equipment$BuiltInToilet = {$: 'BuiltInToilet'};
var author$project$Architecture$Equipment$Closet = function (a) {
	return {$: 'Closet', a: a};
};
var author$project$Architecture$Equipment$CoffeeTable = {$: 'CoffeeTable'};
var author$project$Architecture$Equipment$DoubleBed = function (a) {
	return {$: 'DoubleBed', a: a};
};
var author$project$Architecture$Equipment$ElShapedKitchenette = function (a) {
	return {$: 'ElShapedKitchenette', a: a};
};
var author$project$Architecture$Equipment$FreestandingBathtub = {$: 'FreestandingBathtub'};
var author$project$Architecture$Equipment$FullHeightCupboard = F3(
	function (a, b, c) {
		return {$: 'FullHeightCupboard', a: a, b: b, c: c};
	});
var author$project$Architecture$Equipment$IslandOnlyKitchen = function (a) {
	return {$: 'IslandOnlyKitchen', a: a};
};
var author$project$Architecture$Equipment$LargeStove = function (a) {
	return {$: 'LargeStove', a: a};
};
var author$project$Architecture$Equipment$LoungeWithTwoPerpendicularSofas = {$: 'LoungeWithTwoPerpendicularSofas'};
var author$project$Architecture$Equipment$Pissoir = {$: 'Pissoir'};
var author$project$Architecture$Equipment$SingleBed = {$: 'SingleBed'};
var author$project$Architecture$Equipment$TableWithSeatsAtHead = {$: 'TableWithSeatsAtHead'};
var author$project$Architecture$Equipment$ToiletWithFullHeightEnclosure = {$: 'ToiletWithFullHeightEnclosure'};
var author$project$Architecture$Equipment$ToiletWithShelfLikeEnclosure = function (a) {
	return {$: 'ToiletWithShelfLikeEnclosure', a: a};
};
var author$project$Architecture$Equipment$Washbasin = {$: 'Washbasin'};
var author$project$Architecture$Equipment$WashbasinCounter = function (a) {
	return {$: 'WashbasinCounter', a: a};
};
var author$project$Architecture$Equipment$allAvailable = function () {
	var place = function (equipmentTypeValue) {
		return A3(
			author$project$Architecture$Equipment$equipment,
			equipmentTypeValue,
			elm$core$Maybe$Nothing,
			A2(author$project$Grid$Vector$gridVector, 0, 0));
	};
	return A2(
		elm$core$List$map,
		place,
		_List_fromArray(
			[
				author$project$Architecture$Equipment$LoungeWithSofaAndTwoArmchairs,
				author$project$Architecture$Equipment$LoungeWithTwoPerpendicularSofas,
				author$project$Architecture$Equipment$LoungeChairWithSideTable,
				author$project$Architecture$Equipment$CoffeeTable,
				author$project$Architecture$Equipment$TableWithoutSeatsAtHead(
				author$project$Architecture$Equipment$DiningTable(
					{length: 20, width: 10})),
				author$project$Architecture$Equipment$TableWithSeatsAtHead,
				author$project$Architecture$Equipment$IslandOnlyKitchen(
				{
					closetWidth: 28,
					counterLength: 30,
					kitchenEquipment: _List_fromArray(
						[
							author$project$Architecture$Equipment$LargeStove(
							_List_fromArray(
								[
									author$project$Utilities$translate(
									author$project$Grid$Vector$toVector2d(
										A2(author$project$Grid$Vector$gridVector, 5, 0)))
								])),
							author$project$Architecture$Equipment$Sink(
							_List_fromArray(
								[
									author$project$Utilities$translate(
									author$project$Grid$Vector$toVector2d(
										A2(author$project$Grid$Vector$gridVector, 17, 0)))
								]))
						])
				}),
				author$project$Architecture$Equipment$Kitchenette(
				{
					counterLength: 30,
					kitchenEquipment: _List_fromArray(
						[
							author$project$Architecture$Equipment$Stove(
							_List_fromArray(
								[
									author$project$Utilities$translate(
									author$project$Grid$Vector$toVector2d(
										A2(author$project$Grid$Vector$gridVector, 5, 0)))
								])),
							author$project$Architecture$Equipment$Sink(
							_List_fromArray(
								[
									author$project$Utilities$translate(
									author$project$Grid$Vector$toVector2d(
										A2(author$project$Grid$Vector$gridVector, 17, 0)))
								]))
						])
				}),
				author$project$Architecture$Equipment$ElShapedKitchenette(
				{
					counterLength: 30,
					kitchenEquipment: _List_fromArray(
						[
							A2(
							author$project$Architecture$Equipment$BuiltInFridge,
							A2(author$project$Grid$Vector$gridVector, 30, 0),
							elm$core$Maybe$Nothing),
							A3(
							author$project$Architecture$Equipment$FullHeightCupboard,
							{width: 2},
							A2(author$project$Grid$Vector$gridVector, 36, 0),
							elm$core$Maybe$Nothing),
							author$project$Architecture$Equipment$Sink(
							_List_fromArray(
								[
									A2(author$project$TypedSvg$Types$Translate, 1830, 0)
								])),
							author$project$Architecture$Equipment$Stove(
							_List_fromArray(
								[
									A2(author$project$TypedSvg$Types$Translate, 700, 0)
								]))
						]),
					sideCounterLength: 14
				}),
				author$project$Architecture$Equipment$DoubleBed(
				{leftTableWidth: 7, rightTableWidth: 7}),
				author$project$Architecture$Equipment$SingleBed,
				author$project$Architecture$Equipment$Shelving(16),
				author$project$Architecture$Equipment$Closet(20),
				A2(
				author$project$Architecture$Equipment$Desk,
				author$project$Architecture$Equipment$NoDeskPanel,
				{
					chairOffsets: _List_fromArray(
						[7]),
					length: 14,
					width: 7
				}),
				author$project$Architecture$Equipment$Pegwall(12),
				author$project$Architecture$Equipment$FreestandingBathtub,
				author$project$Architecture$Equipment$BuiltInBathtub,
				author$project$Architecture$Equipment$Pissoir,
				author$project$Architecture$Equipment$BuiltInToilet,
				author$project$Architecture$Equipment$ToiletWithShelfLikeEnclosure(
				{bowlOffsetFromMiddle: 0, enclosureWidth: 9}),
				author$project$Architecture$Equipment$ToiletWithFullHeightEnclosure,
				author$project$Architecture$Equipment$Washbasin,
				author$project$Architecture$Equipment$WashbasinCounter(
				{
					basinOffsets: _List_fromArray(
						[2, 2]),
					remainingSpace: 2
				}),
				A2(
				author$project$Architecture$Equipment$Curtain,
				{lengthAcrossRoom: 30, lengthOverWindow: 10},
				author$project$Architecture$Equipment$DrawnAcrossRoom)
			]));
}();
var author$project$Architecture$ExistingItem$getSlab = function (existingItem) {
	if (existingItem.$ === 'ExistingSlab') {
		var existingSlab = existingItem.a;
		return elm$core$Maybe$Just(existingSlab);
	} else {
		return elm$core$Maybe$Nothing;
	}
};
var author$project$Architecture$ExistingSlab$scaleId = 'Architecture.ExistingSlab.scaleId';
var author$project$Architecture$ExistingSlab$terraceId = 'Architecture.ExistingSlab.terraceId';
var author$project$Styles$SvgStyle$activeFloorArea = author$project$Styles$SvgStyle$className('activeFloorArea');
var author$project$Styles$SvgStyle$terrace = author$project$Styles$SvgStyle$className('terrace');
var elm$svg$Svg$Attributes$fill = _VirtualDom_attribute('fill');
var ianmackenzie$elm_geometry$Geometry$Types$Polygon2d = function (a) {
	return {$: 'Polygon2d', a: a};
};
var ianmackenzie$elm_geometry$Triangle2d$vertices = function (_n0) {
	var vertices_ = _n0.a;
	return vertices_;
};
var ianmackenzie$elm_geometry$Vector2d$crossProduct = F2(
	function (firstVector, secondVector) {
		var _n0 = ianmackenzie$elm_geometry$Vector2d$components(secondVector);
		var x2 = _n0.a;
		var y2 = _n0.b;
		var _n1 = ianmackenzie$elm_geometry$Vector2d$components(firstVector);
		var x1 = _n1.a;
		var y1 = _n1.b;
		return (x1 * y2) - (y1 * x2);
	});
var ianmackenzie$elm_geometry$Triangle2d$counterclockwiseArea = function (triangle) {
	var _n0 = ianmackenzie$elm_geometry$Triangle2d$vertices(triangle);
	var p1 = _n0.a;
	var p2 = _n0.b;
	var p3 = _n0.c;
	var firstVector = A2(ianmackenzie$elm_geometry$Vector2d$from, p1, p2);
	var secondVector = A2(ianmackenzie$elm_geometry$Vector2d$from, p1, p3);
	return 0.5 * A2(ianmackenzie$elm_geometry$Vector2d$crossProduct, firstVector, secondVector);
};
var ianmackenzie$elm_geometry$Geometry$Types$Triangle2d = function (a) {
	return {$: 'Triangle2d', a: a};
};
var ianmackenzie$elm_geometry$Triangle2d$fromVertices = ianmackenzie$elm_geometry$Geometry$Types$Triangle2d;
var ianmackenzie$elm_geometry$Polygon2d$counterclockwiseArea = function (vertices_) {
	if (!vertices_.b) {
		return 0;
	} else {
		if (!vertices_.b.b) {
			var single = vertices_.a;
			return 0;
		} else {
			if (!vertices_.b.b.b) {
				var first = vertices_.a;
				var _n1 = vertices_.b;
				var second = _n1.a;
				return 0;
			} else {
				var first = vertices_.a;
				var _n2 = vertices_.b;
				var second = _n2.a;
				var rest = _n2.b;
				var segmentArea = F2(
					function (start, end) {
						return ianmackenzie$elm_geometry$Triangle2d$counterclockwiseArea(
							ianmackenzie$elm_geometry$Triangle2d$fromVertices(
								_Utils_Tuple3(first, start, end)));
					});
				var segmentAreas = A3(
					elm$core$List$map2,
					segmentArea,
					A2(elm$core$List$cons, second, rest),
					rest);
				return elm$core$List$sum(segmentAreas);
			}
		}
	}
};
var ianmackenzie$elm_geometry$Polygon2d$makeOuterLoop = function (vertices_) {
	return (ianmackenzie$elm_geometry$Polygon2d$counterclockwiseArea(vertices_) >= 0) ? vertices_ : elm$core$List$reverse(vertices_);
};
var ianmackenzie$elm_geometry$Polygon2d$singleLoop = function (vertices_) {
	return ianmackenzie$elm_geometry$Geometry$Types$Polygon2d(
		{
			innerLoops: _List_Nil,
			outerLoop: ianmackenzie$elm_geometry$Polygon2d$makeOuterLoop(vertices_)
		});
};
var ianmackenzie$elm_geometry$Rectangle2d$toPolygon = function (rectangle) {
	var _n0 = ianmackenzie$elm_geometry$Rectangle2d$vertices(rectangle);
	var bottomLeft = _n0.bottomLeft;
	var bottomRight = _n0.bottomRight;
	var topRight = _n0.topRight;
	var topLeft = _n0.topLeft;
	return ianmackenzie$elm_geometry$Polygon2d$singleLoop(
		_List_fromArray(
			[bottomLeft, bottomRight, topRight, topLeft]));
};
var elm$svg$Svg$path = elm$svg$Svg$trustedNode('path');
var ianmackenzie$elm_geometry$Polygon2d$innerLoops = function (_n0) {
	var polygon = _n0.a;
	return polygon.innerLoops;
};
var ianmackenzie$elm_geometry$Polygon2d$outerLoop = function (_n0) {
	var polygon = _n0.a;
	return polygon.outerLoop;
};
var ianmackenzie$elm_geometry_svg$Geometry$Svg$polygon2d = F2(
	function (attributes, polygon) {
		var loops = A2(
			elm$core$List$cons,
			ianmackenzie$elm_geometry$Polygon2d$outerLoop(polygon),
			ianmackenzie$elm_geometry$Polygon2d$innerLoops(polygon));
		var loopString = function (loop) {
			if (!loop.b) {
				return '';
			} else {
				var coordinateStrings = A2(
					elm$core$List$map,
					function (point) {
						var _n1 = ianmackenzie$elm_geometry$Point2d$coordinates(point);
						var x = _n1.a;
						var y = _n1.b;
						var xString = elm$core$String$fromFloat(x);
						var yString = elm$core$String$fromFloat(y);
						return xString + (' ' + yString);
					},
					loop);
				return 'M ' + (A2(elm$core$String$join, ' L ', coordinateStrings) + ' Z');
			}
		};
		var pathAttribute = elm$svg$Svg$Attributes$d(
			A2(
				elm$core$String$join,
				' ',
				A2(elm$core$List$map, loopString, loops)));
		return A2(
			elm$svg$Svg$path,
			A2(elm$core$List$cons, pathAttribute, attributes),
			_List_Nil);
	});
var author$project$Architecture$ExistingSlab$slabPlanView = function (_n0) {
	var southWestCorner = _n0.a.southWestCorner;
	var northEastCorner = _n0.a.northEastCorner;
	var slabType = _n0.a.slabType;
	var attributes = function () {
		if (slabType.$ === 'ActiveFloorArea') {
			return _List_fromArray(
				[
					author$project$TypedSvg$Attributes$class(
					_List_fromArray(
						[author$project$Styles$SvgStyle$activeFloorArea])),
					elm$svg$Svg$Attributes$fill('url(#' + (author$project$Architecture$ExistingSlab$scaleId + ')'))
				]);
		} else {
			return _List_fromArray(
				[
					author$project$TypedSvg$Attributes$class(
					_List_fromArray(
						[author$project$Styles$SvgStyle$terrace])),
					elm$svg$Svg$Attributes$fill('url(#' + (author$project$Architecture$ExistingSlab$terraceId + ')'))
				]);
		}
	}();
	return A2(
		ianmackenzie$elm_geometry_svg$Geometry$Svg$polygon2d,
		attributes,
		ianmackenzie$elm_geometry$Rectangle2d$toPolygon(
			A2(ianmackenzie$elm_geometry$Rectangle2d$from, southWestCorner, northEastCorner)));
};
var author$project$Architecture$ExistingSlab$slabTypeStackOrder = function (_n0) {
	var slabType = _n0.a.slabType;
	if (slabType.$ === 'Terrace') {
		return 1;
	} else {
		return 2;
	}
};
var author$project$Color$black = A4(author$project$Color$RGBA, 0, 0, 0, 1);
var author$project$Styles$Color$lighterGrey = A3(author$project$Color$rgb, 230, 230, 230);
var author$project$TypedSvg$pattern = author$project$TypedSvg$Core$node('pattern');
var author$project$TypedSvg$TypesToStrings$coordinateSystemToString = function (coordinateSystem) {
	if (coordinateSystem.$ === 'CoordinateSystemUserSpaceOnUse') {
		return 'userSpaceOnUse';
	} else {
		return 'objectBoundingBox';
	}
};
var author$project$TypedSvg$Attributes$patternUnits = function (coordinateSystem) {
	return A2(
		author$project$TypedSvg$Core$attribute,
		'patternUnits',
		author$project$TypedSvg$TypesToStrings$coordinateSystemToString(coordinateSystem));
};
var author$project$TypedSvg$Attributes$stroke = function (value) {
	return A2(
		author$project$TypedSvg$Core$attribute,
		'stroke',
		author$project$Color$Convert$colorToCssRgba(value));
};
var author$project$TypedSvg$Types$CoordinateSystemUserSpaceOnUse = {$: 'CoordinateSystemUserSpaceOnUse'};
var elm$svg$Svg$Attributes$id = _VirtualDom_attribute('id');
var author$project$Architecture$ExistingSlab$planView = function (existingSlabs) {
	var terraceJoint = F2(
		function (_n0, _n1) {
			var fromX = _n0.a;
			var fromY = _n0.b;
			var toX = _n1.a;
			var toY = _n1.b;
			return A2(
				author$project$TypedSvg$line,
				_List_fromArray(
					[
						author$project$TypedSvg$Attributes$InPx$x1(fromX),
						author$project$TypedSvg$Attributes$InPx$y1(fromY),
						author$project$TypedSvg$Attributes$InPx$x2(toX),
						author$project$TypedSvg$Attributes$InPx$y2(toY),
						author$project$TypedSvg$Attributes$InPx$strokeWidth(10),
						author$project$TypedSvg$Attributes$stroke(author$project$Styles$Color$lighterGrey)
					]),
				_List_Nil);
		});
	var slabViews = A2(
		elm$core$List$map,
		author$project$Architecture$ExistingSlab$slabPlanView,
		A2(elm$core$List$sortBy, author$project$Architecture$ExistingSlab$slabTypeStackOrder, existingSlabs));
	var dot = F3(
		function (dotOpacity, y, x) {
			return A2(
				author$project$TypedSvg$circle,
				_List_fromArray(
					[
						author$project$TypedSvg$Attributes$InPx$cx(x),
						author$project$TypedSvg$Attributes$InPx$cy(y),
						author$project$TypedSvg$Attributes$InPx$r(20),
						author$project$TypedSvg$Attributes$opacity(
						author$project$TypedSvg$Types$Opacity(dotOpacity)),
						author$project$TypedSvg$Attributes$fill(
						author$project$TypedSvg$Types$Fill(author$project$Color$black))
					]),
				_List_Nil);
		});
	var majorDot = dot(0.4);
	var minorDot = dot(5.0e-2);
	return {
		backgroundMarkup: A2(author$project$TypedSvg$g, _List_Nil, slabViews),
		defs: _List_fromArray(
			[
				A2(
				author$project$TypedSvg$pattern,
				_List_fromArray(
					[
						author$project$TypedSvg$Attributes$InPx$width(1000),
						author$project$TypedSvg$Attributes$InPx$height(1000),
						elm$svg$Svg$Attributes$id(author$project$Architecture$ExistingSlab$scaleId),
						author$project$TypedSvg$Attributes$patternUnits(author$project$TypedSvg$Types$CoordinateSystemUserSpaceOnUse)
					]),
				_Utils_ap(
					_List_fromArray(
						[
							A2(majorDot, 0, 0),
							A2(majorDot, 1000, 0),
							A2(majorDot, 0, 1000),
							A2(majorDot, 1000, 1000)
						]),
					_Utils_ap(
						A2(
							elm$core$List$map,
							minorDot(0),
							_List_fromArray(
								[200, 400, 600, 800])),
						_Utils_ap(
							A2(
								elm$core$List$map,
								minorDot(200),
								_List_fromArray(
									[0, 200, 400, 600, 800, 1000])),
							_Utils_ap(
								A2(
									elm$core$List$map,
									minorDot(400),
									_List_fromArray(
										[0, 200, 400, 600, 800, 1000])),
								_Utils_ap(
									A2(
										elm$core$List$map,
										minorDot(600),
										_List_fromArray(
											[0, 200, 400, 600, 800, 1000])),
									_Utils_ap(
										A2(
											elm$core$List$map,
											minorDot(800),
											_List_fromArray(
												[0, 200, 400, 600, 800, 1000])),
										A2(
											elm$core$List$map,
											minorDot(1000),
											_List_fromArray(
												[200, 400, 600, 800]))))))))),
				A2(
				author$project$TypedSvg$pattern,
				_List_fromArray(
					[
						author$project$TypedSvg$Attributes$InPx$width(100),
						author$project$TypedSvg$Attributes$InPx$height(100),
						elm$svg$Svg$Attributes$id(author$project$Architecture$ExistingSlab$terraceId),
						author$project$TypedSvg$Attributes$patternUnits(author$project$TypedSvg$Types$CoordinateSystemUserSpaceOnUse)
					]),
				_List_fromArray(
					[
						A2(
						terraceJoint,
						_Utils_Tuple2(0, 0),
						_Utils_Tuple2(0, 100)),
						A2(
						terraceJoint,
						_Utils_Tuple2(0, 0),
						_Utils_Tuple2(100, 0))
					]))
			])
	};
};
var mgold$elm_nonempty_list$List$Nonempty$cons = F2(
	function (y, _n0) {
		var x = _n0.a;
		var xs = _n0.b;
		return A2(
			mgold$elm_nonempty_list$List$Nonempty$Nonempty,
			y,
			A2(elm$core$List$cons, x, xs));
	});
var mgold$elm_nonempty_list$List$Nonempty$head = function (_n0) {
	var x = _n0.a;
	var xs = _n0.b;
	return x;
};
var mgold$elm_nonempty_list$List$Nonempty$replaceHead = F2(
	function (y, _n0) {
		var x = _n0.a;
		var xs = _n0.b;
		return A2(mgold$elm_nonempty_list$List$Nonempty$Nonempty, y, xs);
	});
var author$project$Architecture$ExistingWall$addSegment = F2(
	function (opening, remainingSegments) {
		var _n0 = mgold$elm_nonempty_list$List$Nonempty$head(remainingSegments);
		var startOffset = _n0.startOffset;
		var endOffset = _n0.endOffset;
		return A2(
			mgold$elm_nonempty_list$List$Nonempty$cons,
			{endOffset: endOffset, startOffset: opening.offset + opening.width},
			A2(
				mgold$elm_nonempty_list$List$Nonempty$replaceHead,
				{endOffset: opening.offset, startOffset: startOffset},
				remainingSegments));
	});
var author$project$Architecture$ExistingWall$length = function (_n0) {
	var properties = _n0.a;
	return properties.length;
};
var author$project$Svg$Path$pathToString = function (path) {
	return A2(
		author$project$Svg$Path$instructionsToString,
		elm$core$Maybe$Nothing,
		A3(elm$core$List$foldr, author$project$Svg$Path$subPathToInstructions, _List_Nil, path));
};
var author$project$TypedSvg$TypesToStrings$strokeLinecapToString = function (linecap) {
	switch (linecap.$) {
		case 'StrokeLinecapButt':
			return 'butt';
		case 'StrokeLinecapRound':
			return 'round';
		case 'StrokeLinecapSquare':
			return 'square';
		default:
			return 'inherit';
	}
};
var author$project$TypedSvg$Attributes$strokeLinecap = A2(
	elm$core$Basics$composeL,
	author$project$TypedSvg$Core$attribute('stroke-linecap'),
	author$project$TypedSvg$TypesToStrings$strokeLinecapToString);
var author$project$TypedSvg$Types$StrokeLinecapSquare = {$: 'StrokeLinecapSquare'};
var author$project$Architecture$Door$renderDoorSymbol = F2(
	function (attributes, door) {
		return A2(
			author$project$TypedSvg$g,
			attributes,
			_List_fromArray(
				[
					A2(
					author$project$TypedSvg$line,
					_List_fromArray(
						[
							author$project$TypedSvg$Attributes$InPx$x1(0),
							author$project$TypedSvg$Attributes$InPx$y1(door.wallThickness),
							author$project$TypedSvg$Attributes$InPx$x2(0),
							author$project$TypedSvg$Attributes$InPx$y2((-door.clearance) + door.inset),
							author$project$TypedSvg$Attributes$strokeLinecap(author$project$TypedSvg$Types$StrokeLinecapSquare),
							author$project$TypedSvg$Attributes$stroke(door.panelColor)
						]),
					_List_Nil),
					A2(
					author$project$TypedSvg$path,
					_List_fromArray(
						[
							author$project$TypedSvg$Attributes$d(
							author$project$Svg$Path$pathToString(
								elm$core$List$singleton(
									A3(
										author$project$Svg$Path$subpath,
										author$project$Svg$Path$startAt(
											_Utils_Tuple2(0, door.wallThickness)),
										author$project$Svg$Path$closed,
										_List_fromArray(
											[
												author$project$Svg$Path$lineTo(
												_Utils_Tuple2(0, (-door.clearance) + door.inset)),
												A4(
												author$project$Svg$Path$arcTo,
												_Utils_Tuple2(door.clearance, door.clearance),
												0,
												_Utils_Tuple2(author$project$Svg$Path$smallestArc, author$project$Svg$Path$clockwise),
												_Utils_Tuple2(door.clearance, door.inset)),
												author$project$Svg$Path$lineTo(
												_Utils_Tuple2(door.clearance, door.wallThickness))
											]))))),
							author$project$TypedSvg$Attributes$class(
							_List_fromArray(
								[author$project$Styles$SvgStyle$doorPanel]))
						]),
					_List_Nil)
				]));
	});
var author$project$Styles$SvgStyle$existingDoor = author$project$Styles$SvgStyle$className('existingDoor');
var author$project$TypedSvg$Types$Scale = F2(
	function (a, b) {
		return {$: 'Scale', a: a, b: b};
	});
var author$project$Utilities$flipHorizontally = A2(author$project$TypedSvg$Types$Scale, -1, 1);
var author$project$Utilities$flipVertically = A2(author$project$TypedSvg$Types$Scale, 1, -1);
var author$project$Architecture$ExistingWall$viewExistingDoor = F3(
	function (panelColor, wall, door) {
		var rotation = function () {
			var _n9 = wall.direction;
			switch (_n9.$) {
				case 'East':
					return _List_Nil;
				case 'North':
					return _List_fromArray(
						[
							A3(author$project$TypedSvg$Types$Rotate, 90, 0, 0)
						]);
				case 'West':
					return _List_fromArray(
						[
							A3(author$project$TypedSvg$Types$Rotate, 180, 0, 0)
						]);
				default:
					return _List_fromArray(
						[
							A3(author$project$TypedSvg$Types$Rotate, 270, 0, 0)
						]);
			}
		}();
		var mirrorVertically = _List_fromArray(
			[
				author$project$Utilities$flipVertically,
				author$project$Utilities$translate(
				ianmackenzie$elm_geometry$Vector2d$fromComponents(
					_Utils_Tuple2(0, -wall.thickness)))
			]);
		var mirrorHorizontally = _List_fromArray(
			[
				author$project$Utilities$flipHorizontally,
				author$project$Utilities$translate(
				ianmackenzie$elm_geometry$Vector2d$fromComponents(
					_Utils_Tuple2(-door.clearance, 0)))
			]);
		var flip = function () {
			var _n0 = _Utils_Tuple2(door.orientation, door.openSide);
			if (_n0.a.$ === 'HingesOnRight') {
				if (_n0.b.$ === 'ToExterior') {
					var _n1 = _n0.a;
					var _n2 = _n0.b;
					return mirrorVertically;
				} else {
					var _n5 = _n0.a;
					var _n6 = _n0.b;
					return mirrorHorizontally;
				}
			} else {
				if (_n0.b.$ === 'ToExterior') {
					var _n3 = _n0.a;
					var _n4 = _n0.b;
					return _Utils_ap(mirrorVertically, mirrorHorizontally);
				} else {
					var _n7 = _n0.a;
					var _n8 = _n0.b;
					return _List_Nil;
				}
			}
		}();
		return A2(
			author$project$Architecture$Door$renderDoorSymbol,
			_List_fromArray(
				[
					author$project$TypedSvg$Attributes$class(
					_List_fromArray(
						[author$project$Styles$SvgStyle$existingDoor])),
					author$project$TypedSvg$Attributes$transform(
					_Utils_ap(
						_List_fromArray(
							[
								author$project$Utilities$translate(
								A2(ianmackenzie$elm_geometry$Vector2d$from, ianmackenzie$elm_geometry$Point2d$origin, wall.origin))
							]),
						_Utils_ap(
							rotation,
							_Utils_ap(
								_List_fromArray(
									[
										author$project$Utilities$translate(
										ianmackenzie$elm_geometry$Vector2d$fromComponents(
											_Utils_Tuple2(door.offset + door.openingToClearance, 0)))
									]),
								flip))))
				]),
			{clearance: door.clearance, inset: door.inset, panelColor: panelColor, wallThickness: wall.thickness});
	});
var author$project$Architecture$ExistingWall$renderExistingDoor = F2(
	function (_n0, _n1) {
		var wall = _n0.a;
		var door = _n1.a;
		return A3(author$project$Architecture$ExistingWall$viewExistingDoor, author$project$Styles$SvgStyle$itemStrokeColor, wall, door);
	});
var author$project$Architecture$ExistingWall$renderSegment = F3(
	function (classes, _n0, segment) {
		var properties = _n0.a;
		var segmentPolygon = ianmackenzie$elm_geometry$Rectangle2d$toPolygon(
			A2(author$project$Architecture$ExistingWall$wallSegmentProjection, properties, segment));
		return A2(
			ianmackenzie$elm_geometry_svg$Geometry$Svg$polygon2d,
			_List_fromArray(
				[
					author$project$TypedSvg$Attributes$class(classes)
				]),
			segmentPolygon);
	});
var author$project$Architecture$ExistingWall$ToInterior = {$: 'ToInterior'};
var author$project$Architecture$ExistingWall$frenchDoorFrameWidth = 80;
var author$project$Architecture$ExistingWall$windowInset = 100;
var author$project$Architecture$ExistingWall$windowThickness = 100;
var author$project$Styles$Color$almostWhite = A3(author$project$Color$rgb, 248, 248, 248);
var author$project$Styles$Style$appBackground = author$project$Styles$Color$almostWhite;
var author$project$Styles$Color$lightGrey = A3(author$project$Color$rgb, 200, 200, 200);
var author$project$Styles$SvgStyle$windowColor = author$project$Styles$Color$lightGrey;
var author$project$Architecture$ExistingWall$renderFrenchDoor = F3(
	function (_n0, _n1, door) {
		var wall = _n0.a;
		var window = _n1.a;
		var voidWidth = door.segmentWidth - (2 * author$project$Architecture$ExistingWall$frenchDoorFrameWidth);
		var voidOffset = door.offset + author$project$Architecture$ExistingWall$frenchDoorFrameWidth;
		var innerInset = (wall.thickness - author$project$Architecture$ExistingWall$windowInset) - author$project$Architecture$ExistingWall$windowThickness;
		var _n2 = function () {
			var _n3 = wall.direction;
			switch (_n3.$) {
				case 'East':
					return _Utils_Tuple3(
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(window.offset, innerInset)),
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(voidOffset, 0)),
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(voidWidth, author$project$Architecture$ExistingWall$windowThickness)));
				case 'South':
					return _Utils_Tuple3(
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(innerInset, -window.offset)),
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(0, -voidOffset)),
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(author$project$Architecture$ExistingWall$windowThickness, -voidWidth)));
				case 'West':
					return _Utils_Tuple3(
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(-window.offset, -innerInset)),
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(-voidOffset, 0)),
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(-voidWidth, -author$project$Architecture$ExistingWall$windowThickness)));
				default:
					return _Utils_Tuple3(
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(-innerInset, window.offset)),
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(0, voidOffset)),
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(-author$project$Architecture$ExistingWall$windowThickness, voidWidth)));
			}
		}();
		var originTranslation = _n2.a;
		var voidTranslation = _n2.b;
		var voidDiagonal = _n2.c;
		var windowOrigin = A2(ianmackenzie$elm_geometry$Point2d$translateBy, originTranslation, wall.origin);
		var openingStartPoint = A2(ianmackenzie$elm_geometry$Point2d$translateBy, voidTranslation, windowOrigin);
		var doorVoidFootprint = ianmackenzie$elm_geometry$Rectangle2d$toPolygon(
			A2(
				ianmackenzie$elm_geometry$Rectangle2d$from,
				openingStartPoint,
				A2(ianmackenzie$elm_geometry$Point2d$translateBy, voidDiagonal, openingStartPoint)));
		return _List_fromArray(
			[
				A2(
				ianmackenzie$elm_geometry_svg$Geometry$Svg$polygon2d,
				_List_fromArray(
					[
						author$project$TypedSvg$Attributes$fill(
						author$project$TypedSvg$Types$Fill(author$project$Styles$Style$appBackground)),
						author$project$TypedSvg$Attributes$stroke(author$project$Styles$Style$appBackground),
						author$project$TypedSvg$Attributes$InPx$strokeWidth(author$project$Styles$SvgStyle$strokeWidthOnPlan)
					]),
				doorVoidFootprint),
				A3(
				author$project$Architecture$ExistingWall$viewExistingDoor,
				author$project$Styles$SvgStyle$windowColor,
				{direction: wall.direction, origin: windowOrigin, thickness: author$project$Architecture$ExistingWall$windowThickness},
				{clearance: door.segmentWidth - (2 * author$project$Architecture$ExistingWall$frenchDoorFrameWidth), inset: 0, offset: door.offset, openSide: author$project$Architecture$ExistingWall$ToInterior, openingToClearance: author$project$Architecture$ExistingWall$frenchDoorFrameWidth, orientation: door.orientation})
			]);
	});
var author$project$Architecture$ExistingWall$windowProjection = F2(
	function (properties, _n0) {
		var offset = _n0.a.offset;
		var width = _n0.a.width;
		var windowInnerSurfaceOffset = (properties.thickness - author$project$Architecture$ExistingWall$windowInset) - author$project$Architecture$ExistingWall$windowThickness;
		var _n1 = function () {
			var _n2 = properties.direction;
			switch (_n2.$) {
				case 'East':
					return _Utils_Tuple2(
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(offset, windowInnerSurfaceOffset)),
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(width, author$project$Architecture$ExistingWall$windowThickness)));
				case 'West':
					return _Utils_Tuple2(
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(-offset, -windowInnerSurfaceOffset)),
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(-width, -author$project$Architecture$ExistingWall$windowThickness)));
				case 'South':
					return _Utils_Tuple2(
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(windowInnerSurfaceOffset, -offset)),
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(author$project$Architecture$ExistingWall$windowThickness, -width)));
				default:
					return _Utils_Tuple2(
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(-windowInnerSurfaceOffset, offset)),
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(-author$project$Architecture$ExistingWall$windowThickness, width)));
			}
		}();
		var offsetVector = _n1.a;
		var diagonal = _n1.b;
		var startPoint = A2(ianmackenzie$elm_geometry$Point2d$translateBy, offsetVector, properties.origin);
		var endPoint = A2(ianmackenzie$elm_geometry$Point2d$translateBy, diagonal, startPoint);
		return A2(ianmackenzie$elm_geometry$Rectangle2d$from, startPoint, endPoint);
	});
var author$project$Styles$SvgStyle$existingWindow = author$project$Styles$SvgStyle$className('existingWindow');
var author$project$Architecture$ExistingWall$renderWindow = F2(
	function (existingWall, existingWindow) {
		var _n0 = existingWindow;
		var window = _n0.a;
		var typeSpecificMarkup = function () {
			var _n2 = window.windowType;
			if (_n2.$ === 'RegularWindow') {
				return _List_Nil;
			} else {
				var doors = _n2.a;
				return elm$core$List$concat(
					A2(
						elm$core$List$map,
						A2(author$project$Architecture$ExistingWall$renderFrenchDoor, existingWall, existingWindow),
						doors));
			}
		}();
		var _n1 = existingWall;
		var wall = _n1.a;
		var windowPolygon = ianmackenzie$elm_geometry$Rectangle2d$toPolygon(
			A2(author$project$Architecture$ExistingWall$windowProjection, wall, existingWindow));
		return A2(
			elm$core$List$cons,
			A2(
				ianmackenzie$elm_geometry_svg$Geometry$Svg$polygon2d,
				_List_fromArray(
					[
						author$project$TypedSvg$Attributes$class(
						_List_fromArray(
							[author$project$Styles$SvgStyle$existingWindow]))
					]),
				windowPolygon),
			typeSpecificMarkup);
	});
var author$project$Styles$SvgStyle$existingWall = author$project$Styles$SvgStyle$className('existingWall');
var author$project$Architecture$ExistingWall$renderWindowSill = F2(
	function (existingWall, _n0) {
		var window = _n0.a;
		var _n1 = window.windowType;
		if (_n1.$ === 'RegularWindow') {
			return elm$core$Maybe$Just(
				A3(
					author$project$Architecture$ExistingWall$renderSegment,
					_List_fromArray(
						[author$project$Styles$SvgStyle$existingWall]),
					existingWall,
					{endOffset: window.offset + window.width, startOffset: window.offset}));
		} else {
			return elm$core$Maybe$Nothing;
		}
	});
var author$project$Architecture$ExistingWall$voids = function (_n0) {
	var properties = _n0.a;
	var windowToVoid = function (_n2) {
		var offset = _n2.a.offset;
		var width = _n2.a.width;
		return {offset: offset, width: width};
	};
	var doorToVoid = function (_n1) {
		var offset = _n1.a.offset;
		var clearance = _n1.a.clearance;
		var openingToClearance = _n1.a.openingToClearance;
		return {offset: (offset - (author$project$Styles$SvgStyle$strokeWidthOnPlan / 2)) + openingToClearance, width: clearance + author$project$Styles$SvgStyle$strokeWidthOnPlan};
	};
	return A2(
		elm$core$List$sortBy,
		function ($) {
			return $.offset;
		},
		_Utils_ap(
			A2(elm$core$List$map, windowToVoid, properties.windows),
			A2(elm$core$List$map, doorToVoid, properties.doors)));
};
var author$project$Styles$SvgStyle$cut = author$project$Styles$SvgStyle$className('cut');
var mgold$elm_nonempty_list$List$Nonempty$fromElement = function (x) {
	return A2(mgold$elm_nonempty_list$List$Nonempty$Nonempty, x, _List_Nil);
};
var mgold$elm_nonempty_list$List$Nonempty$toList = function (_n0) {
	var x = _n0.a;
	var xs = _n0.b;
	return A2(elm$core$List$cons, x, xs);
};
var author$project$Architecture$ExistingWall$wallPlanView = function (existingWall) {
	var segments = A3(
		elm$core$List$foldl,
		author$project$Architecture$ExistingWall$addSegment,
		mgold$elm_nonempty_list$List$Nonempty$fromElement(
			{
				endOffset: author$project$Architecture$ExistingWall$length(existingWall),
				startOffset: 0
			}),
		author$project$Architecture$ExistingWall$voids(existingWall));
	var renderWallSegment = A2(
		author$project$Architecture$ExistingWall$renderSegment,
		_List_fromArray(
			[author$project$Styles$SvgStyle$existingWall, author$project$Styles$SvgStyle$cut]),
		existingWall);
	var _n0 = existingWall;
	var windows = _n0.a.windows;
	var doors = _n0.a.doors;
	return {
		backgroundMarkup: A2(
			author$project$TypedSvg$g,
			_List_Nil,
			A2(
				elm$core$List$filterMap,
				author$project$Architecture$ExistingWall$renderWindowSill(existingWall),
				windows)),
		foregroundMarkup: A2(
			author$project$TypedSvg$g,
			_List_Nil,
			_Utils_ap(
				elm$core$List$concat(
					A2(
						elm$core$List$map,
						author$project$Architecture$ExistingWall$renderWindow(existingWall),
						windows)),
				_Utils_ap(
					A2(
						elm$core$List$map,
						author$project$Architecture$ExistingWall$renderExistingDoor(existingWall),
						doors),
					A2(
						elm$core$List$map,
						renderWallSegment,
						mgold$elm_nonempty_list$List$Nonempty$toList(segments)))))
	};
};
var author$project$Architecture$ExistingWall$planView = function (existingWalls) {
	var wallViews = A2(elm$core$List$map, author$project$Architecture$ExistingWall$wallPlanView, existingWalls);
	return {
		backgroundMarkup: A2(
			author$project$TypedSvg$g,
			_List_Nil,
			A2(
				elm$core$List$map,
				function ($) {
					return $.backgroundMarkup;
				},
				wallViews)),
		foregroundMarkup: A2(
			author$project$TypedSvg$g,
			_List_Nil,
			A2(
				elm$core$List$map,
				function ($) {
					return $.foregroundMarkup;
				},
				wallViews))
	};
};
var author$project$Architecture$ExistingItem$planView = function (existingItems) {
	var wallsView = author$project$Architecture$ExistingWall$planView(
		A2(elm$core$List$filterMap, author$project$Architecture$ExistingItem$getWall, existingItems));
	var slabsView = author$project$Architecture$ExistingSlab$planView(
		A2(elm$core$List$filterMap, author$project$Architecture$ExistingItem$getSlab, existingItems));
	return {
		backgroundMarkup: A2(
			author$project$TypedSvg$g,
			_List_Nil,
			_List_fromArray(
				[slabsView.backgroundMarkup, wallsView.backgroundMarkup])),
		defs: slabsView.defs,
		foregroundMarkup: wallsView.foregroundMarkup
	};
};
var author$project$Architecture$Equipment$name = function (_n0) {
	var data = _n0.a;
	return author$project$Architecture$Equipment$rawProperties(data.equipmentType).name;
};
var author$project$Architecture$Item$name = function (item) {
	var _n0 = author$project$Architecture$Item$itemType(item);
	if (_n0.$ === 'EquipmentItem') {
		var equipment = _n0.a;
		return author$project$Architecture$Equipment$name(equipment);
	} else {
		return 'wall';
	}
};
var author$project$Architecture$Wall$doors = function (_n0) {
	var wallProperties = _n0.a;
	return elm$core$Dict$values(wallProperties.doors);
};
var author$project$Grid$Units$toMeters = function (units) {
	return author$project$Grid$Units$toMillimeters(units) / 1000;
};
var author$project$Pages$Interior$BuildWalls = {$: 'BuildWalls'};
var author$project$Pages$Interior$CancelGrabInDrawer = {$: 'CancelGrabInDrawer'};
var author$project$Pages$Interior$ChangeWallType = function (a) {
	return {$: 'ChangeWallType', a: a};
};
var author$project$Pages$Interior$Cost = {$: 'Cost'};
var author$project$Pages$Interior$DeleteItem = function (a) {
	return {$: 'DeleteItem', a: a};
};
var author$project$Pages$Interior$FinishBuilding = {$: 'FinishBuilding'};
var author$project$Pages$Interior$GotMouseDownWithinDrawer = {$: 'GotMouseDownWithinDrawer'};
var author$project$Pages$Interior$GotScroll = function (a) {
	return {$: 'GotScroll', a: a};
};
var author$project$Pages$Interior$Ignore = {$: 'Ignore'};
var author$project$Pages$Interior$ItemsViewData = F4(
	function (a, b, c, d) {
		return {$: 'ItemsViewData', a: a, b: b, c: c, d: d};
	});
var author$project$Pages$Interior$OpenDrawer = function (a) {
	return {$: 'OpenDrawer', a: a};
};
var author$project$Pages$Interior$SetLevel = function (a) {
	return {$: 'SetLevel', a: a};
};
var author$project$Pages$Interior$ToggleHasWindowSills = {$: 'ToggleHasWindowSills'};
var author$project$Pages$Interior$UpdateItem = F2(
	function (a, b) {
		return {$: 'UpdateItem', a: a, b: b};
	});
var author$project$Pages$Interior$addEquipment = 'equipment';
var author$project$Pages$Interior$buildWalls = 'add walls';
var author$project$Pages$Interior$comfort = 'comfort';
var author$project$Pages$Interior$Comfort = {$: 'Comfort'};
var author$project$Pages$Interior$Burst$optimalSize = 48;
var author$project$Styles$Style$Unstyled = {$: 'Unstyled'};
var elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute('viewBox');
var author$project$Utilities$iconViewBox = function (size) {
	return elm$svg$Svg$Attributes$viewBox(
		A2(
			elm$core$String$join,
			' ',
			_List_fromArray(
				[
					'0',
					'0',
					elm$core$String$fromFloat(size),
					elm$core$String$fromFloat(size)
				])));
};
var elm$svg$Svg$node = elm$virtual_dom$VirtualDom$nodeNS('http://www.w3.org/2000/svg');
var elm$svg$Svg$svg = elm$svg$Svg$trustedNode('svg');
var elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var elm$svg$Svg$text = elm$virtual_dom$VirtualDom$text;
var elm$svg$Svg$Attributes$opacity = _VirtualDom_attribute('opacity');
var elm$svg$Svg$Attributes$stroke = _VirtualDom_attribute('stroke');
var elm$svg$Svg$Attributes$strokeWidth = _VirtualDom_attribute('stroke-width');
var elm$svg$Svg$Attributes$style = _VirtualDom_attribute('style');
var elm$svg$Svg$Attributes$transform = _VirtualDom_attribute('transform');
var elm$svg$Svg$Attributes$type_ = _VirtualDom_attribute('type');
var elm$svg$Svg$Attributes$xlinkHref = function (value) {
	return A3(
		_VirtualDom_attributeNS,
		'http://www.w3.org/1999/xlink',
		'xlink:href',
		_VirtualDom_noJavaScriptUri(value));
};
var mdgriffith$style_elements$Element$Internal$Model$Element = function (a) {
	return {$: 'Element', a: a};
};
var mdgriffith$style_elements$Element$el = F3(
	function (style, attrs, child) {
		return mdgriffith$style_elements$Element$Internal$Model$Element(
			{
				absolutelyPositioned: elm$core$Maybe$Nothing,
				attrs: attrs,
				child: child,
				node: 'div',
				style: elm$core$Maybe$Just(style)
			});
	});
var mdgriffith$style_elements$Element$Internal$Model$Raw = function (a) {
	return {$: 'Raw', a: a};
};
var mdgriffith$style_elements$Element$html = mdgriffith$style_elements$Element$Internal$Model$Raw;
var mdgriffith$style_elements$Style$Internal$Model$Fill = function (a) {
	return {$: 'Fill', a: a};
};
var mdgriffith$style_elements$Element$Attributes$fill = mdgriffith$style_elements$Style$Internal$Model$Fill(1);
var mdgriffith$style_elements$Element$Internal$Model$Height = function (a) {
	return {$: 'Height', a: a};
};
var mdgriffith$style_elements$Element$Attributes$height = mdgriffith$style_elements$Element$Internal$Model$Height;
var mdgriffith$style_elements$Element$Internal$Model$Width = function (a) {
	return {$: 'Width', a: a};
};
var mdgriffith$style_elements$Element$Attributes$width = mdgriffith$style_elements$Element$Internal$Model$Width;
var author$project$Pages$Interior$Burst$view = F2(
	function (uniqueKey, size) {
		var burstId = 'burst-' + uniqueKey;
		var burstRay = function (rotate) {
			return A3(
				elm$svg$Svg$node,
				'use',
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$transform('rotate(' + (rotate + ')')),
						elm$svg$Svg$Attributes$xlinkHref('#' + burstId)
					]),
				_List_Nil);
		};
		return A3(
			mdgriffith$style_elements$Element$el,
			author$project$Styles$Style$Unstyled,
			_List_fromArray(
				[
					mdgriffith$style_elements$Element$Attributes$width(mdgriffith$style_elements$Element$Attributes$fill),
					mdgriffith$style_elements$Element$Attributes$height(mdgriffith$style_elements$Element$Attributes$fill)
				]),
			mdgriffith$style_elements$Element$html(
				A2(
					elm$svg$Svg$svg,
					_List_fromArray(
						[
							author$project$Utilities$iconViewBox(author$project$Pages$Interior$Burst$optimalSize),
							elm$svg$Svg$Attributes$width(
							elm$core$String$fromFloat(size)),
							elm$svg$Svg$Attributes$height(
							elm$core$String$fromFloat(size)),
							elm$svg$Svg$Attributes$style('display: block')
						]),
					_List_fromArray(
						[
							A3(
							elm$svg$Svg$node,
							'style',
							_List_fromArray(
								[
									elm$svg$Svg$Attributes$type_('text/css')
								]),
							_List_fromArray(
								[
									elm$svg$Svg$text(
									(('@keyframes ' + (burstId + '{')) + (('0% {' + ('opacity: 1;' + ('stroke-dasharray: 0, 8, 6, 9999999;' + '}'))) + (('100% {' + ('opacity: 0.4;' + ('stroke-dasharray: 0, 24, 0, 9999999;' + '}'))) + '}'))) + (('#' + (burstId + '{')) + (('animation: ' + ((burstId + ' ') + ((elm$core$String$fromFloat(author$project$Pages$Interior$Burst$duration) + 'ms ') + ('cubic-bezier(.15, .7, .15, 1) ' + 'forwards;')))) + '}')))
								])),
							A2(
							elm$svg$Svg$path,
							_List_fromArray(
								[
									elm$svg$Svg$Attributes$d('M24 24V0'),
									elm$svg$Svg$Attributes$fill('none'),
									elm$svg$Svg$Attributes$id(burstId),
									elm$svg$Svg$Attributes$opacity('0'),
									elm$svg$Svg$Attributes$stroke('currentColor'),
									elm$svg$Svg$Attributes$strokeWidth('2')
								]),
							_List_Nil),
							burstRay('-180 24 24'),
							burstRay('90 24 24'),
							burstRay('-90 24 24'),
							burstRay('120 24 24'),
							burstRay('-60 24 24'),
							burstRay('150 24 24'),
							burstRay('-30 24 24'),
							burstRay('60 24 24'),
							burstRay('-120 24 24'),
							burstRay('30 24 24'),
							burstRay('-150 24 24')
						]))));
	});
var elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 'MayStopPropagation', a: a};
};
var elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			elm$virtual_dom$VirtualDom$on,
			event,
			elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var mdgriffith$style_elements$Element$Internal$Model$Event = function (a) {
	return {$: 'Event', a: a};
};
var mdgriffith$style_elements$Element$Events$stopPropagationOn = F2(
	function (ev, decode) {
		return mdgriffith$style_elements$Element$Internal$Model$Event(
			A2(elm$html$Html$Events$stopPropagationOn, ev, decode));
	});
var author$project$Utilities$onWithoutPropagation = F2(
	function (eventName, message) {
		return A2(
			mdgriffith$style_elements$Element$Events$stopPropagationOn,
			eventName,
			elm$json$Json$Decode$succeed(
				_Utils_Tuple2(message, true)));
	});
var author$project$Utilities$onClickWithoutPropagation = author$project$Utilities$onWithoutPropagation('click');
var author$project$Utilities$onMouseUpWithoutPropagation = author$project$Utilities$onWithoutPropagation('mouseup');
var author$project$Views$Dashboard$dashboardButtonIconSize = 48;
var author$project$Styles$Style$DashboardButton = function (a) {
	return {$: 'DashboardButton', a: a};
};
var mdgriffith$style_elements$Element$Internal$Model$Layout = function (a) {
	return {$: 'Layout', a: a};
};
var mdgriffith$style_elements$Element$Internal$Model$Normal = function (a) {
	return {$: 'Normal', a: a};
};
var mdgriffith$style_elements$Style$Internal$Model$Down = {$: 'Down'};
var mdgriffith$style_elements$Style$Internal$Model$FlexLayout = F2(
	function (a, b) {
		return {$: 'FlexLayout', a: a, b: b};
	});
var mdgriffith$style_elements$Element$column = F3(
	function (style, attrs, children) {
		return mdgriffith$style_elements$Element$Internal$Model$Layout(
			{
				absolutelyPositioned: elm$core$Maybe$Nothing,
				attrs: attrs,
				children: mdgriffith$style_elements$Element$Internal$Model$Normal(children),
				layout: A2(mdgriffith$style_elements$Style$Internal$Model$FlexLayout, mdgriffith$style_elements$Style$Internal$Model$Down, _List_Nil),
				node: 'div',
				style: elm$core$Maybe$Just(style)
			});
	});
var mdgriffith$style_elements$Element$Internal$Model$NoDecoration = {$: 'NoDecoration'};
var mdgriffith$style_elements$Element$Internal$Model$Text = F2(
	function (a, b) {
		return {$: 'Text', a: a, b: b};
	});
var mdgriffith$style_elements$Element$text = mdgriffith$style_elements$Element$Internal$Model$Text(
	{decoration: mdgriffith$style_elements$Element$Internal$Model$NoDecoration, inline: false});
var mdgriffith$style_elements$Element$Internal$Model$Nearby = function (a) {
	return {$: 'Nearby', a: a};
};
var mdgriffith$style_elements$Element$Internal$Model$PositionFrame = function (a) {
	return {$: 'PositionFrame', a: a};
};
var mdgriffith$style_elements$Element$Internal$Model$Within = {$: 'Within'};
var mdgriffith$style_elements$Element$Internal$Model$Empty = {$: 'Empty'};
var mdgriffith$style_elements$Element$Internal$Model$Spacer = function (a) {
	return {$: 'Spacer', a: a};
};
var mdgriffith$style_elements$Element$Internal$Modify$addAttr = F2(
	function (prop, el) {
		switch (el.$) {
			case 'Empty':
				return mdgriffith$style_elements$Element$Internal$Model$Empty;
			case 'Raw':
				var h = el.a;
				return mdgriffith$style_elements$Element$Internal$Model$Raw(h);
			case 'Spacer':
				var x = el.a;
				return mdgriffith$style_elements$Element$Internal$Model$Spacer(x);
			case 'Layout':
				var elm = el.a;
				return mdgriffith$style_elements$Element$Internal$Model$Layout(
					_Utils_update(
						elm,
						{
							attrs: A2(elm$core$List$cons, prop, elm.attrs)
						}));
			case 'Element':
				var elm = el.a;
				return mdgriffith$style_elements$Element$Internal$Model$Element(
					_Utils_update(
						elm,
						{
							attrs: A2(elm$core$List$cons, prop, elm.attrs)
						}));
			default:
				var dec = el.a;
				var content = el.b;
				return mdgriffith$style_elements$Element$Internal$Model$Element(
					{
						absolutelyPositioned: elm$core$Maybe$Nothing,
						attrs: _List_fromArray(
							[prop]),
						child: A2(mdgriffith$style_elements$Element$Internal$Model$Text, dec, content),
						node: 'div',
						style: elm$core$Maybe$Nothing
					});
		}
	});
var mdgriffith$style_elements$Element$Internal$Modify$addChild = F2(
	function (parent, el) {
		switch (parent.$) {
			case 'Empty':
				return mdgriffith$style_elements$Element$Internal$Model$Element(
					{
						absolutelyPositioned: elm$core$Maybe$Just(
							_List_fromArray(
								[el])),
						attrs: _List_Nil,
						child: mdgriffith$style_elements$Element$Internal$Model$Empty,
						node: 'div',
						style: elm$core$Maybe$Nothing
					});
			case 'Spacer':
				var x = parent.a;
				return mdgriffith$style_elements$Element$Internal$Model$Spacer(x);
			case 'Raw':
				var h = parent.a;
				return mdgriffith$style_elements$Element$Internal$Model$Raw(h);
			case 'Layout':
				var elm = parent.a;
				var absolutelyPositioned = elm.absolutelyPositioned;
				if (absolutelyPositioned.$ === 'Nothing') {
					return mdgriffith$style_elements$Element$Internal$Model$Layout(
						_Utils_update(
							elm,
							{
								absolutelyPositioned: elm$core$Maybe$Just(
									_List_fromArray(
										[el]))
							}));
				} else {
					var others = absolutelyPositioned.a;
					return mdgriffith$style_elements$Element$Internal$Model$Layout(
						_Utils_update(
							elm,
							{
								absolutelyPositioned: elm$core$Maybe$Just(
									A2(elm$core$List$cons, el, others))
							}));
				}
			case 'Element':
				var elm = parent.a;
				var absolutelyPositioned = elm.absolutelyPositioned;
				if (absolutelyPositioned.$ === 'Nothing') {
					return mdgriffith$style_elements$Element$Internal$Model$Element(
						_Utils_update(
							elm,
							{
								absolutelyPositioned: elm$core$Maybe$Just(
									_List_fromArray(
										[el]))
							}));
				} else {
					var others = absolutelyPositioned.a;
					return mdgriffith$style_elements$Element$Internal$Model$Element(
						_Utils_update(
							elm,
							{
								absolutelyPositioned: elm$core$Maybe$Just(
									A2(elm$core$List$cons, el, others))
							}));
				}
			default:
				var dec = parent.a;
				var content = parent.b;
				return mdgriffith$style_elements$Element$Internal$Model$Element(
					{
						absolutelyPositioned: elm$core$Maybe$Just(
							_List_fromArray(
								[el])),
						attrs: _List_Nil,
						child: A2(mdgriffith$style_elements$Element$Internal$Model$Text, dec, content),
						node: 'div',
						style: elm$core$Maybe$Nothing
					});
		}
	});
var mdgriffith$style_elements$Element$Internal$Modify$wrapHtml = function (el) {
	if (el.$ === 'Raw') {
		var h = el.a;
		return mdgriffith$style_elements$Element$Internal$Model$Element(
			{
				absolutelyPositioned: elm$core$Maybe$Nothing,
				attrs: _List_Nil,
				child: mdgriffith$style_elements$Element$Internal$Model$Raw(h),
				node: 'div',
				style: elm$core$Maybe$Nothing
			});
	} else {
		var x = el;
		return x;
	}
};
var mdgriffith$style_elements$Element$within = F2(
	function (nearbys, parent) {
		var position = F2(
			function (elem, p) {
				return A2(
					mdgriffith$style_elements$Element$Internal$Modify$addChild,
					p,
					A2(
						mdgriffith$style_elements$Element$Internal$Modify$addAttr,
						mdgriffith$style_elements$Element$Internal$Model$PositionFrame(
							mdgriffith$style_elements$Element$Internal$Model$Nearby(mdgriffith$style_elements$Element$Internal$Model$Within)),
						mdgriffith$style_elements$Element$Internal$Modify$wrapHtml(elem)));
			});
		return A3(elm$core$List$foldr, position, parent, nearbys);
	});
var mdgriffith$style_elements$Element$Internal$Model$Center = {$: 'Center'};
var mdgriffith$style_elements$Element$Internal$Model$HAlign = function (a) {
	return {$: 'HAlign', a: a};
};
var mdgriffith$style_elements$Element$Attributes$center = mdgriffith$style_elements$Element$Internal$Model$HAlign(mdgriffith$style_elements$Element$Internal$Model$Center);
var mdgriffith$style_elements$Style$Internal$Model$Px = function (a) {
	return {$: 'Px', a: a};
};
var mdgriffith$style_elements$Element$Attributes$px = mdgriffith$style_elements$Style$Internal$Model$Px;
var mdgriffith$style_elements$Element$Internal$Model$Spacing = F2(
	function (a, b) {
		return {$: 'Spacing', a: a, b: b};
	});
var mdgriffith$style_elements$Element$Attributes$spacing = function (x) {
	return A2(mdgriffith$style_elements$Element$Internal$Model$Spacing, x, x);
};
var author$project$Views$Dashboard$dashboardButtonWithOptions = F4(
	function (_n0, attributes, content, label) {
		var buttonType = _n0.buttonType;
		var overlay = _n0.overlay;
		return A3(
			mdgriffith$style_elements$Element$column,
			author$project$Styles$Style$DashboardButton(buttonType),
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$style_elements$Element$Attributes$center,
						mdgriffith$style_elements$Element$Attributes$spacing(8)
					]),
				attributes),
			_List_fromArray(
				[
					A2(
					mdgriffith$style_elements$Element$within,
					overlay,
					A3(
						mdgriffith$style_elements$Element$el,
						author$project$Styles$Style$Unstyled,
						_List_fromArray(
							[
								mdgriffith$style_elements$Element$Attributes$width(
								mdgriffith$style_elements$Element$Attributes$px(author$project$Views$Dashboard$dashboardButtonIconSize)),
								mdgriffith$style_elements$Element$Attributes$height(
								mdgriffith$style_elements$Element$Attributes$px(author$project$Views$Dashboard$dashboardButtonIconSize))
							]),
						content)),
					mdgriffith$style_elements$Element$text(label)
				]));
	});
var author$project$Views$Dashboard$dashboardIconButtonWithOptions = F4(
	function (options, attributes, icon, label) {
		return A4(
			author$project$Views$Dashboard$dashboardButtonWithOptions,
			options,
			attributes,
			icon(author$project$Views$Dashboard$dashboardButtonIconSize),
			label);
	});
var mdgriffith$style_elements$Element$Internal$Model$Position = F3(
	function (a, b, c) {
		return {$: 'Position', a: a, b: b, c: c};
	});
var mdgriffith$style_elements$Element$Attributes$moveLeft = function (x) {
	return A3(
		mdgriffith$style_elements$Element$Internal$Model$Position,
		elm$core$Maybe$Just(-x),
		elm$core$Maybe$Nothing,
		elm$core$Maybe$Nothing);
};
var mdgriffith$style_elements$Element$Attributes$moveUp = function (y) {
	return A3(
		mdgriffith$style_elements$Element$Internal$Model$Position,
		elm$core$Maybe$Nothing,
		elm$core$Maybe$Just(-y),
		elm$core$Maybe$Nothing);
};
var mdgriffith$style_elements$Element$Internal$Model$Keyed = function (a) {
	return {$: 'Keyed', a: a};
};
var mdgriffith$style_elements$Element$Keyed$column = F3(
	function (style, attrs, children) {
		return mdgriffith$style_elements$Element$Internal$Model$Layout(
			{
				absolutelyPositioned: elm$core$Maybe$Nothing,
				attrs: attrs,
				children: mdgriffith$style_elements$Element$Internal$Model$Keyed(children),
				layout: A2(mdgriffith$style_elements$Style$Internal$Model$FlexLayout, mdgriffith$style_elements$Style$Internal$Model$Down, _List_Nil),
				node: 'div',
				style: elm$core$Maybe$Just(style)
			});
	});
var author$project$Pages$Interior$comfortButton = F2(
	function (_n0, model) {
		var icon = _n0.icon;
		var buttonType = _n0.buttonType;
		var burstSize = 2 * author$project$Pages$Interior$Burst$optimalSize;
		var burstOffset = (burstSize - author$project$Views$Dashboard$dashboardButtonIconSize) / 2;
		var overlay = _List_fromArray(
			[
				A3(
				mdgriffith$style_elements$Element$Keyed$column,
				author$project$Styles$Style$Unstyled,
				_List_fromArray(
					[
						mdgriffith$style_elements$Element$Attributes$width(
						mdgriffith$style_elements$Element$Attributes$px(burstSize)),
						mdgriffith$style_elements$Element$Attributes$height(
						mdgriffith$style_elements$Element$Attributes$px(burstSize)),
						mdgriffith$style_elements$Element$Attributes$moveUp(burstOffset),
						mdgriffith$style_elements$Element$Attributes$moveLeft(burstOffset),
						mdgriffith$style_elements$Element$Attributes$spacing(-burstSize)
					]),
				A2(
					elm$core$List$map,
					function (key) {
						return _Utils_Tuple2(
							key,
							A2(author$project$Pages$Interior$Burst$view, key, burstSize));
					},
					model.comfortIndicatorBurstAnimations))
			]);
		return A4(
			author$project$Views$Dashboard$dashboardIconButtonWithOptions,
			{buttonType: buttonType, overlay: overlay},
			_List_fromArray(
				[
					author$project$Utilities$onClickWithoutPropagation(
					author$project$Pages$Interior$OpenDrawer(author$project$Pages$Interior$Comfort)),
					author$project$Utilities$onMouseUpWithoutPropagation(author$project$Pages$Interior$Ignore)
				]),
			icon,
			author$project$Pages$Interior$comfort);
	});
var author$project$Pages$Interior$cost = 'cost';
var author$project$Architecture$Equipment$markup = function (_n0) {
	var data = _n0.a;
	return author$project$Architecture$Equipment$computedProperties(data.equipmentType).markup;
};
var author$project$Architecture$Equipment$viewBoundary = function (_n0) {
	var data = _n0.a;
	return A2(
		author$project$Grid$Boundary$rotate,
		data.rotation,
		author$project$Architecture$Equipment$computedProperties(data.equipmentType).viewBoundary);
};
var author$project$Pages$Interior$GrabInDrawer = function (a) {
	return {$: 'GrabInDrawer', a: a};
};
var author$project$Styles$SvgStyle$equipment = author$project$Styles$SvgStyle$className('equipment');
var author$project$Styles$SvgStyle$inDrawer = author$project$Styles$SvgStyle$className('inDrawer');
var author$project$Styles$SvgStyle$itemOutline = author$project$Styles$SvgStyle$className('itemOutline');
var author$project$TypedSvg$svg = author$project$TypedSvg$Core$node('svg');
var elm$svg$Svg$Attributes$class = _VirtualDom_attribute('class');
var author$project$Utilities$svgClasses = function (classes) {
	return elm$svg$Svg$Attributes$class(
		A2(elm$core$String$join, ' ', classes));
};
var elm$html$Html$Attributes$height = function (n) {
	return A2(
		_VirtualDom_attribute,
		'height',
		elm$core$String$fromInt(n));
};
var elm$html$Html$Attributes$width = function (n) {
	return A2(
		_VirtualDom_attribute,
		'width',
		elm$core$String$fromInt(n));
};
var elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var elm$svg$Svg$map = elm$virtual_dom$VirtualDom$map;
var elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 'Normal', a: a};
};
var elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			elm$virtual_dom$VirtualDom$on,
			event,
			elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var elm$svg$Svg$Events$onMouseDown = function (msg) {
	return A2(
		elm$html$Html$Events$on,
		'mousedown',
		elm$json$Json$Decode$succeed(msg));
};
var author$project$Pages$Interior$equipmentViewInDrawer = function (equipment) {
	var viewBoundary = author$project$Architecture$Equipment$viewBoundary(equipment);
	var westExtreme = author$project$Grid$Units$toMillimeters(
		author$project$Grid$Boundary$west(viewBoundary));
	var southExtreme = author$project$Grid$Units$toMillimeters(
		author$project$Grid$Boundary$south(viewBoundary));
	var paddingInDrawer = 1;
	var northExtreme = author$project$Grid$Units$toMillimeters(
		author$project$Grid$Boundary$north(viewBoundary));
	var naturalSizePadding = paddingInDrawer / author$project$Grid$Units$defaultPixelsPerMillimeter;
	var naturalHeight = (northExtreme - southExtreme) + (naturalSizePadding * 2);
	var heightInDrawer = (author$project$Grid$Units$defaultPixelsPerMillimeter * naturalHeight) + (2 * paddingInDrawer);
	var eastExtreme = author$project$Grid$Units$toMillimeters(
		author$project$Grid$Boundary$east(viewBoundary));
	var naturalWidth = (eastExtreme - westExtreme) + (naturalSizePadding * 2);
	var widthInDrawer = (author$project$Grid$Units$defaultPixelsPerMillimeter * naturalWidth) + (2 * paddingInDrawer);
	return A3(
		mdgriffith$style_elements$Element$el,
		author$project$Styles$Style$Unstyled,
		_List_fromArray(
			[
				mdgriffith$style_elements$Element$Attributes$width(
				mdgriffith$style_elements$Element$Attributes$px(widthInDrawer)),
				mdgriffith$style_elements$Element$Attributes$height(
				mdgriffith$style_elements$Element$Attributes$px(heightInDrawer))
			]),
		mdgriffith$style_elements$Element$html(
			A2(
				author$project$TypedSvg$svg,
				_List_fromArray(
					[
						elm$html$Html$Attributes$width(
						elm$core$Basics$round(widthInDrawer)),
						elm$html$Html$Attributes$height(
						elm$core$Basics$round(heightInDrawer)),
						author$project$Utilities$svgClasses(
						_List_fromArray(
							[author$project$Styles$SvgStyle$equipment, author$project$Styles$SvgStyle$itemOutline, author$project$Styles$SvgStyle$inDrawer])),
						elm$svg$Svg$Attributes$viewBox(
						A2(
							elm$core$String$join,
							' ',
							A2(
								elm$core$List$map,
								elm$core$String$fromFloat,
								_List_fromArray(
									[westExtreme - naturalSizePadding, (-northExtreme) - naturalSizePadding, naturalWidth, naturalHeight])))),
						elm$svg$Svg$Events$onMouseDown(
						author$project$Pages$Interior$GrabInDrawer(equipment))
					]),
				_List_fromArray(
					[
						A2(
						author$project$TypedSvg$g,
						_List_fromArray(
							[
								author$project$TypedSvg$Attributes$transform(
								_List_fromArray(
									[
										A2(author$project$TypedSvg$Types$Scale, 1, -1)
									]))
							]),
						A2(
							elm$core$List$map,
							elm$svg$Svg$map(
								elm$core$Basics$always(author$project$Pages$Interior$Ignore)),
							author$project$Architecture$Equipment$markup(equipment)))
					]))));
};
var author$project$Pages$Interior$hasGrabbedEquipmentInDrawer = function (model) {
	var _n0 = model.dragAndDropState;
	if (_n0.$ === 'GrabbedInDrawer') {
		return true;
	} else {
		return false;
	}
};
var author$project$Pages$Interior$isDraggingItem = function (model) {
	var _n0 = model.dragAndDropState;
	switch (_n0.$) {
		case 'DraggingOrTapping':
			return true;
		case 'GrabbedInDrawer':
			return true;
		default:
			return false;
	}
};
var author$project$Pages$Interior$isInBuildingWallsMode = function (model) {
	var _n0 = model.uiMode;
	if (_n0.$ === 'BuildingWalls') {
		return true;
	} else {
		return false;
	}
};
var author$project$Architecture$Equipment$view = function (equipmentValue) {
	return A2(
		author$project$TypedSvg$g,
		_List_fromArray(
			[
				author$project$TypedSvg$Attributes$transform(
				author$project$Grid$Rotation$toSvgTransforms(
					author$project$Architecture$Equipment$rotation(equipmentValue)))
			]),
		author$project$Architecture$Equipment$markup(equipmentValue));
};
var author$project$Architecture$Door$clearance = function (_n0) {
	var doorProperties = _n0.a;
	return doorProperties.clearance;
};
var author$project$Architecture$Door$openSide = function (_n0) {
	var door = _n0.a;
	return door.openSide;
};
var author$project$Architecture$Door$orientation = function (_n0) {
	var door = _n0.a;
	return door.orientation;
};
var author$project$Architecture$Wall$viewDoor = F2(
	function (wall, door) {
		var offsetTranslation = _List_fromArray(
			[
				author$project$Utilities$translate(
				author$project$Grid$Vector$toVector2d(
					A2(
						author$project$Grid$Vector$gridVector,
						(author$project$Architecture$Wall$length(wall) - author$project$Architecture$Door$offsetFromEnd(door)) - author$project$Architecture$Door$clearance(door),
						0)))
			]);
		var exactWallThickness = author$project$Grid$Units$toMillimeters(
			author$project$Architecture$Wall$thickness(wall));
		var mirrorVertically = _List_fromArray(
			[
				author$project$Utilities$flipVertically,
				author$project$Utilities$translate(
				ianmackenzie$elm_geometry$Vector2d$fromComponents(
					_Utils_Tuple2(0, -exactWallThickness)))
			]);
		var rotation = function () {
			var _n9 = author$project$Architecture$Wall$direction(wall);
			if (_n9.$ === 'WestToEast') {
				return _List_Nil;
			} else {
				return _List_fromArray(
					[
						author$project$Utilities$translate(
						ianmackenzie$elm_geometry$Vector2d$fromComponents(
							_Utils_Tuple2(exactWallThickness, 0))),
						A3(author$project$TypedSvg$Types$Rotate, 90, 0, 0)
					]);
			}
		}();
		var exactDoorClearance = author$project$Grid$Units$toMillimeters(
			author$project$Architecture$Door$clearance(door));
		var mirrorHorizontally = _List_fromArray(
			[
				author$project$Utilities$flipHorizontally,
				author$project$Utilities$translate(
				ianmackenzie$elm_geometry$Vector2d$fromComponents(
					_Utils_Tuple2(-exactDoorClearance, 0)))
			]);
		var flip = function () {
			var _n0 = _Utils_Tuple2(
				author$project$Architecture$Door$openSide(door),
				author$project$Architecture$Door$orientation(door));
			if (_n0.a.$ === 'SouthOrEast') {
				if (_n0.b.$ === 'HingesOnLeft') {
					var _n1 = _n0.a;
					var _n2 = _n0.b;
					return _List_Nil;
				} else {
					var _n3 = _n0.a;
					var _n4 = _n0.b;
					return mirrorHorizontally;
				}
			} else {
				if (_n0.b.$ === 'HingesOnLeft') {
					var _n5 = _n0.a;
					var _n6 = _n0.b;
					return _Utils_ap(mirrorHorizontally, mirrorVertically);
				} else {
					var _n7 = _n0.a;
					var _n8 = _n0.b;
					return mirrorVertically;
				}
			}
		}();
		return A2(
			author$project$Architecture$Door$renderDoorSymbol,
			_List_fromArray(
				[
					author$project$TypedSvg$Attributes$transform(
					_Utils_ap(
						rotation,
						_Utils_ap(offsetTranslation, flip)))
				]),
			{clearance: exactDoorClearance, inset: 0, panelColor: author$project$Styles$SvgStyle$itemStrokeColor, wallThickness: exactWallThickness});
	});
var author$project$Utilities$onlyIf = F2(
	function (predicate, list) {
		return predicate ? list : _List_Nil;
	});
var author$project$Architecture$Wall$view = function (wall) {
	var wallLength = author$project$Architecture$Wall$length(wall);
	var exactWallThickness = author$project$Grid$Units$toMillimeters(
		author$project$Architecture$Wall$thickness(wall));
	var renderSegment = function (segment) {
		var _n1 = author$project$Architecture$Wall$direction(wall);
		if (_n1.$ === 'WestToEast') {
			return A2(
				author$project$TypedSvg$rect,
				_Utils_ap(
					_List_fromArray(
						[
							author$project$TypedSvg$Attributes$InPx$height(exactWallThickness),
							author$project$TypedSvg$Attributes$InPx$width(
							author$project$Grid$Units$toMillimeters(segment.to - segment.from)),
							author$project$TypedSvg$Attributes$InPx$x(
							author$project$Grid$Units$toMillimeters(segment.from)),
							author$project$TypedSvg$Attributes$InPx$y(0)
						]),
					A2(
						author$project$Utilities$onlyIf,
						_Utils_eq(
							author$project$Architecture$Wall$wallType(wall),
							author$project$Architecture$Wall$GlassPartition),
						_List_fromArray(
							[
								author$project$TypedSvg$Attributes$fill(
								author$project$TypedSvg$Types$Fill(author$project$Styles$Color$lighterGrey)),
								author$project$TypedSvg$Attributes$stroke(author$project$Styles$Color$lighterGrey)
							]))),
				_List_Nil);
		} else {
			return A2(
				author$project$TypedSvg$rect,
				_Utils_ap(
					_List_fromArray(
						[
							author$project$TypedSvg$Attributes$InPx$height(
							author$project$Grid$Units$toMillimeters(segment.to - segment.from)),
							author$project$TypedSvg$Attributes$InPx$width(exactWallThickness),
							author$project$TypedSvg$Attributes$InPx$x(0),
							author$project$TypedSvg$Attributes$InPx$y(
							author$project$Grid$Units$toMillimeters(segment.from))
						]),
					A2(
						author$project$Utilities$onlyIf,
						_Utils_eq(
							author$project$Architecture$Wall$wallType(wall),
							author$project$Architecture$Wall$GlassPartition),
						_List_fromArray(
							[
								author$project$TypedSvg$Attributes$fill(
								author$project$TypedSvg$Types$Fill(author$project$Styles$Color$lighterGrey)),
								author$project$TypedSvg$Attributes$stroke(author$project$Styles$Color$lighterGrey)
							]))),
				_List_Nil);
		}
	};
	var addDoorSegment = F2(
		function (door, remainingSegments) {
			var _n0 = mgold$elm_nonempty_list$List$Nonempty$head(remainingSegments);
			var from = _n0.from;
			var to = _n0.to;
			return A2(
				mgold$elm_nonempty_list$List$Nonempty$cons,
				{
					from: wallLength - author$project$Architecture$Door$offsetFromEnd(door),
					to: to
				},
				A2(
					mgold$elm_nonempty_list$List$Nonempty$replaceHead,
					{
						from: from,
						to: (wallLength - author$project$Architecture$Door$offsetFromEnd(door)) - author$project$Architecture$Door$clearance(door)
					},
					remainingSegments));
		});
	var segments = A3(
		elm$core$List$foldl,
		addDoorSegment,
		mgold$elm_nonempty_list$List$Nonempty$fromElement(
			{from: 0, to: wallLength}),
		elm$core$List$reverse(
			A2(
				elm$core$List$sortBy,
				author$project$Architecture$Door$offsetFromEnd,
				author$project$Architecture$Wall$doors(wall))));
	return _Utils_ap(
		A2(
			elm$core$List$map,
			renderSegment,
			mgold$elm_nonempty_list$List$Nonempty$toList(segments)),
		A2(
			elm$core$List$map,
			author$project$Architecture$Wall$viewDoor(wall),
			author$project$Architecture$Wall$doors(wall)));
};
var author$project$Architecture$Item$view = function (item) {
	var _n0 = author$project$Architecture$Item$itemType(item);
	if (_n0.$ === 'EquipmentItem') {
		var equipment = _n0.a;
		return _List_fromArray(
			[
				author$project$Architecture$Equipment$view(equipment)
			]);
	} else {
		var wall = _n0.a;
		return author$project$Architecture$Wall$view(wall);
	}
};
var author$project$Pages$Interior$GrabOrStartTap = function (a) {
	return {$: 'GrabOrStartTap', a: a};
};
var author$project$Pages$Interior$isDrawingWall = function (model) {
	var _n0 = model.dragAndDropState;
	if (_n0.$ === 'DrawingWall') {
		return true;
	} else {
		return false;
	}
};
var author$project$Styles$SvgStyle$dragged = author$project$Styles$SvgStyle$className('dragged');
var author$project$Styles$SvgStyle$item = author$project$Styles$SvgStyle$className('item');
var author$project$Styles$SvgStyle$placedAndIdle = author$project$Styles$SvgStyle$className('placedAndIdle');
var author$project$Styles$SvgStyle$placedAndIdleAndWithoutError = author$project$Styles$SvgStyle$className('placedAndIdleAndWithoutError');
var elm$html$Html$map = elm$virtual_dom$VirtualDom$map;
var author$project$Pages$Interior$itemView = F4(
	function (model, itemsWithIssue, itemIssueClass, item) {
		var itemTypeClass = function () {
			var _n0 = author$project$Architecture$Item$itemType(item);
			if (_n0.$ === 'EquipmentItem') {
				return author$project$Styles$SvgStyle$equipment;
			} else {
				return author$project$Styles$SvgStyle$wall;
			}
		}();
		var itemIsPlaced = (!author$project$Pages$Interior$isDrawingWall(model)) && (!author$project$Pages$Interior$isDraggingItem(model));
		var itemHasError = A2(elm$core$List$member, item, itemsWithIssue);
		var classes = _Utils_ap(
			_List_fromArray(
				[author$project$Styles$SvgStyle$item, itemTypeClass]),
			_Utils_ap(
				A2(
					author$project$Utilities$onlyIf,
					author$project$Pages$Interior$isDraggingItem(model),
					_List_fromArray(
						[author$project$Styles$SvgStyle$dragged])),
				_Utils_ap(
					A2(
						author$project$Utilities$onlyIf,
						itemIsPlaced && (!itemHasError),
						_List_fromArray(
							[author$project$Styles$SvgStyle$placedAndIdleAndWithoutError])),
					_Utils_ap(
						A2(
							author$project$Utilities$onlyIf,
							itemIsPlaced,
							_List_fromArray(
								[author$project$Styles$SvgStyle$placedAndIdle])),
						A2(
							author$project$Utilities$onlyIf,
							itemHasError,
							_List_fromArray(
								[itemIssueClass]))))));
		return _Utils_Tuple2(
			elm$core$String$fromInt(
				author$project$Architecture$Item$id(item)),
			A2(
				author$project$TypedSvg$g,
				_List_fromArray(
					[
						author$project$Utilities$svgClasses(classes),
						author$project$TypedSvg$Attributes$transform(
						_List_fromArray(
							[
								author$project$Utilities$translate(
								author$project$Grid$Vector$toVector2d(
									author$project$Architecture$Item$translation(item)))
							])),
						elm$svg$Svg$Events$onMouseDown(
						author$project$Pages$Interior$GrabOrStartTap(item))
					]),
				A2(
					elm$core$List$map,
					elm$html$Html$map(
						elm$core$Basics$always(author$project$Pages$Interior$Ignore)),
					author$project$Architecture$Item$view(item))));
	});
var author$project$Pages$Interior$viewBox = function (_n0) {
	var session = _n0.session;
	var pixelsPerMillimeter = _n0.pixelsPerMillimeter;
	var viewportOffset = _n0.viewportOffset;
	var viewBoxWidth = session.viewport.width / pixelsPerMillimeter;
	var viewBoxHeight = session.viewport.height / pixelsPerMillimeter;
	var minY = ((-viewBoxHeight) / 2) + (viewportOffset.y / pixelsPerMillimeter);
	var minX = ((-viewBoxWidth) / 2) + (viewportOffset.x / pixelsPerMillimeter);
	var viewBoxNumbers = _List_fromArray(
		[minX, minY, viewBoxWidth, viewBoxHeight]);
	return A2(
		elm$core$String$join,
		' ',
		A2(elm$core$List$map, elm$core$String$fromFloat, viewBoxNumbers));
};
var author$project$Architecture$Equipment$PulledAway = {$: 'PulledAway'};
var author$project$Architecture$Equipment$SetCurtainStatus = function (a) {
	return {$: 'SetCurtainStatus', a: a};
};
var author$project$Architecture$Equipment$SetNextRotation = {$: 'SetNextRotation'};
var author$project$ContextMenuOption$Option = F3(
	function (icon, clickAction, content) {
		return {clickAction: clickAction, content: content, icon: icon};
	});
var author$project$Views$Icon$optimalSize = 32;
var author$project$Views$Icon$icon = F2(
	function (pathString, size) {
		return mdgriffith$style_elements$Element$html(
			A2(
				elm$svg$Svg$svg,
				_List_fromArray(
					[
						author$project$Utilities$iconViewBox(author$project$Views$Icon$optimalSize),
						elm$svg$Svg$Attributes$width(
						elm$core$String$fromFloat(size)),
						elm$svg$Svg$Attributes$height(
						elm$core$String$fromFloat(size))
					]),
				_List_fromArray(
					[
						A2(
						elm$svg$Svg$path,
						_List_fromArray(
							[
								elm$svg$Svg$Attributes$d(pathString),
								elm$svg$Svg$Attributes$fill('currentColor')
							]),
						_List_Nil)
					])));
	});
var author$project$Views$Icon$clockwiseDownwardArrow = author$project$Views$Icon$icon('M 5 5 L 5 7 C 13.296875 7 20 13.703125 20 22 L 20 23.1875 L 15.71875 18.90625 L 14.28125 20.34375 L 20.28125 26.34375 L 21 27.03125 L 21.71875 26.34375 L 27.71875 20.34375 L 26.28125 18.90625 L 22 23.1875 L 22 22 C 22 12.621094 14.378906 5 5 5 Z');
var author$project$Views$Icon$clockwiseLeftwardArrow = author$project$Views$Icon$icon('M 25 5 C 25 13.296875 18.296875 20 10 20 L 8.8125 20 L 13.09375 15.71875 L 11.65625 14.28125 L 5.65625 20.28125 L 4.96875 21 L 5.65625 21.71875 L 11.65625 27.71875 L 13.09375 26.28125 L 8.8125 22 L 10 22 C 19.378906 22 27 14.378906 27 5 Z');
var author$project$Views$Icon$clockwiseRightwardArrow = author$project$Views$Icon$icon('M 20.34375 4.28125 L 18.90625 5.71875 L 23.1875 10 L 22 10 C 12.621094 10 5 17.621094 5 27 L 7 27 C 7 18.703125 13.703125 12 22 12 L 23.1875 12 L 18.90625 16.28125 L 20.34375 17.71875 L 26.34375 11.71875 L 27.03125 11 L 26.34375 10.28125 Z');
var author$project$Views$Icon$clockwiseUpwardArrow = author$project$Views$Icon$icon('M 11 4.96875 L 10.28125 5.65625 L 4.28125 11.65625 L 5.71875 13.09375 L 10 8.8125 L 10 10 C 10 19.378906 17.621094 27 27 27 L 27 25 C 18.703125 25 12 18.296875 12 10 L 12 8.8125 L 16.28125 13.09375 L 17.71875 11.65625 L 11.71875 5.65625 Z');
var elm$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			if (dict.$ === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var left = dict.d;
				var right = dict.e;
				var $temp$n = A2(elm$core$Dict$sizeHelp, n + 1, right),
					$temp$dict = left;
				n = $temp$n;
				dict = $temp$dict;
				continue sizeHelp;
			}
		}
	});
var elm$core$Dict$size = function (dict) {
	return A2(elm$core$Dict$sizeHelp, 0, dict);
};
var turboMaCk$any_dict$Dict$Any$size = function (_n0) {
	var dict = _n0.a.dict;
	return elm$core$Dict$size(dict);
};
var turboMaCk$any_set$Set$Any$size = function (_n0) {
	var dict = _n0.a;
	return turboMaCk$any_dict$Dict$Any$size(dict);
};
var author$project$Architecture$Equipment$options = F2(
	function (toMessage, _n0) {
		var data = _n0.a;
		var rotationIcon = function () {
			var _n2 = data.rotation;
			if (_n2.$ === 'Just') {
				switch (_n2.a.$) {
					case 'QuarterTurnClockwise':
						var _n3 = _n2.a;
						return author$project$Views$Icon$clockwiseLeftwardArrow;
					case 'HalfTurn':
						var _n4 = _n2.a;
						return author$project$Views$Icon$clockwiseUpwardArrow;
					default:
						var _n5 = _n2.a;
						return author$project$Views$Icon$clockwiseRightwardArrow;
				}
			} else {
				return author$project$Views$Icon$clockwiseDownwardArrow;
			}
		}();
		var rotationOptions = (!turboMaCk$any_set$Set$Any$size(
			author$project$Architecture$Equipment$availableRotations(data.equipmentType))) ? _List_Nil : _List_fromArray(
			[
				A3(
				author$project$ContextMenuOption$Option,
				rotationIcon,
				elm$core$Maybe$Just(
					toMessage(author$project$Architecture$Equipment$SetNextRotation)),
				_List_fromArray(
					[
						mdgriffith$style_elements$Element$text('rotate')
					]))
			]);
		var pullCurtainAway = function (icon) {
			return A3(
				author$project$ContextMenuOption$Option,
				icon,
				elm$core$Maybe$Just(
					toMessage(
						author$project$Architecture$Equipment$SetCurtainStatus(author$project$Architecture$Equipment$PulledAway))),
				_List_fromArray(
					[
						mdgriffith$style_elements$Element$text('pull away')
					]));
		};
		var equipmentOptions = function () {
			var _n1 = data.equipmentType;
			return _List_Nil;
		}();
		return _Utils_ap(equipmentOptions, rotationOptions);
	});
var author$project$Architecture$Item$EquipmentMessage = function (a) {
	return {$: 'EquipmentMessage', a: a};
};
var author$project$Architecture$Item$WallMessage = function (a) {
	return {$: 'WallMessage', a: a};
};
var author$project$Architecture$Item$viewBoundary = function (item) {
	return A2(
		author$project$Grid$Boundary$translate,
		author$project$Architecture$Item$translation(item),
		function () {
			var _n0 = author$project$Architecture$Item$itemType(item);
			if (_n0.$ === 'EquipmentItem') {
				var equipment = _n0.a;
				return author$project$Architecture$Equipment$viewBoundary(equipment);
			} else {
				var wall = _n0.a;
				return author$project$Architecture$Wall$viewBoundary(wall);
			}
		}());
};
var author$project$Architecture$Item$viewMidpoint = function (item) {
	var _n0 = ianmackenzie$elm_geometry$Point2d$coordinates(
		ianmackenzie$elm_geometry$BoundingBox2d$centroid(
			author$project$Grid$Boundary$toBoundingBox2d(
				author$project$Architecture$Item$viewBoundary(item))));
	var x = _n0.a;
	var y = _n0.b;
	return {x: x / author$project$Grid$Units$millimetersPerUnit, y: y / author$project$Grid$Units$millimetersPerUnit};
};
var author$project$Architecture$Wall$AddDoor = {$: 'AddDoor'};
var author$project$Architecture$Wall$ChangeWallLength = function (a) {
	return {$: 'ChangeWallLength', a: a};
};
var author$project$Architecture$Wall$MoveDoor = F2(
	function (a, b) {
		return {$: 'MoveDoor', a: a, b: b};
	});
var author$project$Architecture$Wall$NoOp = {$: 'NoOp'};
var author$project$Architecture$Wall$RemoveDoor = function (a) {
	return {$: 'RemoveDoor', a: a};
};
var author$project$Architecture$Wall$ToggleDoorOrientation = function (a) {
	return {$: 'ToggleDoorOrientation', a: a};
};
var author$project$Architecture$Wall$canMoveDoorCloser = F2(
	function (_n0, door) {
		var wall = _n0.a;
		var spaceRequired = (author$project$Architecture$Door$offsetFromEnd(door) - 1) - author$project$Architecture$Door$minPaddingAroundClearance;
		var wouldFitWithinWall = spaceRequired >= 0;
		var previousDoor = elm$core$List$head(
			elm$core$List$reverse(
				A2(
					elm$core$List$sortBy,
					author$project$Architecture$Door$offsetFromEnd,
					A2(
						elm$core$List$filter,
						function (currentDoor) {
							return _Utils_cmp(
								author$project$Architecture$Door$offsetFromEnd(currentDoor),
								author$project$Architecture$Door$offsetFromEnd(door)) < 0;
						},
						elm$core$Dict$values(wall.doors)))));
		var _n1 = _Utils_Tuple2(wouldFitWithinWall, previousDoor);
		if (!_n1.a) {
			return false;
		} else {
			if (_n1.b.$ === 'Nothing') {
				var _n2 = _n1.b;
				return true;
			} else {
				var doorValue = _n1.b.a;
				return _Utils_cmp(
					spaceRequired,
					author$project$Architecture$Door$offsetFromEnd(doorValue) + author$project$Architecture$Door$clearance(door)) > -1;
			}
		}
	});
var author$project$Architecture$Wall$canMoveDoorFurther = F2(
	function (_n0, door) {
		var wall = _n0.a;
		var spaceRequired = ((author$project$Architecture$Door$offsetFromEnd(door) + author$project$Architecture$Door$clearance(door)) + 1) + author$project$Architecture$Door$minPaddingAroundClearance;
		var wouldFitWithinWall = _Utils_cmp(wall.length, spaceRequired) > -1;
		var nextDoor = elm$core$List$head(
			A2(
				elm$core$List$sortBy,
				author$project$Architecture$Door$offsetFromEnd,
				A2(
					elm$core$List$filter,
					function (currentDoor) {
						return _Utils_cmp(
							author$project$Architecture$Door$offsetFromEnd(currentDoor),
							author$project$Architecture$Door$offsetFromEnd(door)) > 0;
					},
					elm$core$Dict$values(wall.doors))));
		var _n1 = _Utils_Tuple2(wouldFitWithinWall, nextDoor);
		if (!_n1.a) {
			return false;
		} else {
			if (_n1.b.$ === 'Nothing') {
				var _n2 = _n1.b;
				return true;
			} else {
				var nextDoorValue = _n1.b.a;
				return _Utils_cmp(
					author$project$Architecture$Door$offsetFromEnd(nextDoorValue),
					spaceRequired) > -1;
			}
		}
	});
var author$project$Views$ContextMenuOption$First = {$: 'First'};
var author$project$Views$ContextMenuOption$Last = {$: 'Last'};
var author$project$Views$ContextMenuOption$Middle = {$: 'Middle'};
var author$project$Styles$Style$ContextMenuOptionButton = function (a) {
	return {$: 'ContextMenuOptionButton', a: a};
};
var author$project$Styles$Style$Disabled = {$: 'Disabled'};
var author$project$Styles$Style$Enabled = {$: 'Enabled'};
var mdgriffith$style_elements$Element$Internal$Model$Padding = F4(
	function (a, b, c, d) {
		return {$: 'Padding', a: a, b: b, c: c, d: d};
	});
var mdgriffith$style_elements$Element$Attributes$paddingBottom = function (x) {
	return A4(
		mdgriffith$style_elements$Element$Internal$Model$Padding,
		elm$core$Maybe$Nothing,
		elm$core$Maybe$Nothing,
		elm$core$Maybe$Just(x),
		elm$core$Maybe$Nothing);
};
var mdgriffith$style_elements$Element$Attributes$paddingLeft = function (x) {
	return A4(
		mdgriffith$style_elements$Element$Internal$Model$Padding,
		elm$core$Maybe$Nothing,
		elm$core$Maybe$Nothing,
		elm$core$Maybe$Nothing,
		elm$core$Maybe$Just(x));
};
var mdgriffith$style_elements$Element$Attributes$paddingRight = function (x) {
	return A4(
		mdgriffith$style_elements$Element$Internal$Model$Padding,
		elm$core$Maybe$Nothing,
		elm$core$Maybe$Just(x),
		elm$core$Maybe$Nothing,
		elm$core$Maybe$Nothing);
};
var mdgriffith$style_elements$Element$Attributes$paddingTop = function (x) {
	return A4(
		mdgriffith$style_elements$Element$Internal$Model$Padding,
		elm$core$Maybe$Just(x),
		elm$core$Maybe$Nothing,
		elm$core$Maybe$Nothing,
		elm$core$Maybe$Nothing);
};
var mdgriffith$style_elements$Element$Internal$Model$VAlign = function (a) {
	return {$: 'VAlign', a: a};
};
var mdgriffith$style_elements$Element$Internal$Model$VerticalCenter = {$: 'VerticalCenter'};
var mdgriffith$style_elements$Element$Attributes$verticalCenter = mdgriffith$style_elements$Element$Internal$Model$VAlign(mdgriffith$style_elements$Element$Internal$Model$VerticalCenter);
var elm$html$Html$Events$onClick = function (msg) {
	return A2(
		elm$html$Html$Events$on,
		'click',
		elm$json$Json$Decode$succeed(msg));
};
var mdgriffith$style_elements$Element$Events$onClick = A2(elm$core$Basics$composeL, mdgriffith$style_elements$Element$Internal$Model$Event, elm$html$Html$Events$onClick);
var author$project$Views$ContextMenuOption$iconButton = F4(
	function (noOp, action, place, icon) {
		var iconButtonSpacing = 8;
		var leftPadding = _Utils_eq(place, author$project$Views$ContextMenuOption$First) ? iconButtonSpacing : (iconButtonSpacing / 2);
		var rightPadding = _Utils_eq(place, author$project$Views$ContextMenuOption$Last) ? iconButtonSpacing : (iconButtonSpacing / 2);
		var contentSize = 16;
		var verticalPadding = (author$project$Views$ContextMenuOption$optionIconSize - contentSize) / 2;
		var _n0 = function () {
			if (action.$ === 'Just') {
				var message = action.a;
				return _Utils_Tuple2(
					author$project$Styles$Style$Enabled,
					_List_fromArray(
						[
							mdgriffith$style_elements$Element$Events$onClick(message)
						]));
			} else {
				return _Utils_Tuple2(author$project$Styles$Style$Disabled, _List_Nil);
			}
		}();
		var style = _n0.a;
		var actions = _n0.b;
		return A3(
			mdgriffith$style_elements$Element$el,
			author$project$Styles$Style$ContextMenuOptionButton(style),
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$style_elements$Element$Attributes$width(
						mdgriffith$style_elements$Element$Attributes$px((contentSize + leftPadding) + rightPadding)),
						mdgriffith$style_elements$Element$Attributes$height(
						mdgriffith$style_elements$Element$Attributes$px(author$project$Views$ContextMenuOption$optionIconSize)),
						mdgriffith$style_elements$Element$Attributes$paddingTop(verticalPadding),
						mdgriffith$style_elements$Element$Attributes$paddingBottom(verticalPadding),
						mdgriffith$style_elements$Element$Attributes$paddingLeft(leftPadding),
						mdgriffith$style_elements$Element$Attributes$paddingRight(rightPadding),
						mdgriffith$style_elements$Element$Attributes$center,
						mdgriffith$style_elements$Element$Attributes$verticalCenter,
						author$project$Utilities$onMouseUpWithoutPropagation(noOp)
					]),
				actions),
			icon(contentSize));
	});
var author$project$Views$Icon$caretLeft = author$project$Views$Icon$icon('M 19.03125 4.28125 L 8.03125 15.28125 L 7.34375 16 L 8.03125 16.71875 L 19.03125 27.71875 L 20.46875 26.28125 L 10.1875 16 L 20.46875 5.71875 Z');
var author$project$Views$Icon$caretRight = author$project$Views$Icon$icon('M 12.96875 4.28125 L 11.53125 5.71875 L 21.8125 16 L 11.53125 26.28125 L 12.96875 27.71875 L 23.96875 16.71875 L 24.65625 16 L 23.96875 15.28125 Z');
var author$project$Views$Icon$delete = author$project$Views$Icon$icon('M 7.21875 5.78125 L 5.78125 7.21875 L 14.5625 16 L 5.78125 24.78125 L 7.21875 26.21875 L 16 17.4375 L 24.78125 26.21875 L 26.21875 24.78125 L 17.4375 16 L 26.21875 7.21875 L 24.78125 5.78125 L 16 14.5625 Z');
var author$project$Views$Icon$door = author$project$Views$Icon$icon('M 7 4 L 7 26 L 5 26 L 5 28 L 27 28 L 27 26 L 25 26 L 25 4 Z M 9 6 L 23 6 L 23 26 L 9 26 Z M 20 16 C 19.449219 16 19 16.449219 19 17 C 19 17.550781 19.449219 18 20 18 C 20.550781 18 21 17.550781 21 17 C 21 16.449219 20.550781 16 20 16 Z');
var author$project$Views$Icon$length = author$project$Views$Icon$icon('M 20.53125 3.59375 L 3.59375 20.53125 L 11.46875 28.40625 L 28.40625 11.46875 Z M 20.53125 6.4375 L 25.5625 11.46875 L 11.46875 25.5625 L 6.4375 20.53125 L 7.59375 19.375 L 9.75 21.53125 L 11.1875 20.125 L 9 17.9375 L 10.1875 16.78125 L 11.0625 17.65625 L 12.46875 16.21875 L 11.59375 15.375 L 12.78125 14.1875 L 14.9375 16.34375 L 16.34375 14.9375 L 14.1875 12.78125 L 15.375 11.59375 L 16.21875 12.46875 L 17.65625 11.0625 L 16.78125 10.1875 L 17.9375 9 L 20.125 11.1875 L 21.53125 9.75 L 19.375 7.59375 Z');
var author$project$Views$Icon$mathPlus = author$project$Views$Icon$icon('M 15 5 L 15 15 L 5 15 L 5 17 L 15 17 L 15 27 L 17 27 L 17 17 L 27 17 L 27 15 L 17 15 L 17 5 Z');
var author$project$Views$Icon$subtract = author$project$Views$Icon$icon('M 5 15 L 5 17 L 27 17 L 27 15 Z');
var elm$core$Dict$map = F2(
	function (func, dict) {
		if (dict.$ === 'RBEmpty_elm_builtin') {
			return elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			return A5(
				elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				A2(func, key, value),
				A2(elm$core$Dict$map, func, left),
				A2(elm$core$Dict$map, func, right));
		}
	});
var mdgriffith$style_elements$Element$empty = mdgriffith$style_elements$Element$Internal$Model$Empty;
var elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var elm$html$Html$Attributes$style = elm$virtual_dom$VirtualDom$style;
var mdgriffith$style_elements$Element$Internal$Model$Attr = function (a) {
	return {$: 'Attr', a: a};
};
var mdgriffith$style_elements$Style$Internal$Render$Value$length = function (l) {
	switch (l.$) {
		case 'Px':
			var x = l.a;
			return elm$core$String$fromFloat(x) + 'px';
		case 'Percent':
			var x = l.a;
			return elm$core$String$fromFloat(x) + '%';
		case 'Auto':
			return 'auto';
		case 'Fill':
			var i = l.a;
			return '100%';
		default:
			var perc = l.a;
			var px = l.b;
			return 'calc(' + (elm$core$String$fromFloat(perc) + ('% + ' + (elm$core$String$fromFloat(px) + 'px)')));
	}
};
var mdgriffith$style_elements$Element$Attributes$minWidth = function (len) {
	return mdgriffith$style_elements$Element$Internal$Model$Attr(
		A2(
			elm$html$Html$Attributes$style,
			'min-width',
			mdgriffith$style_elements$Style$Internal$Render$Value$length(len)));
};
var author$project$Architecture$Wall$options = F2(
	function (toMessage, wall) {
		var toggleOrientationIcon = function (door) {
			var _n1 = _Utils_Tuple2(
				author$project$Architecture$Door$orientation(door),
				author$project$Architecture$Door$openSide(door));
			if (_n1.a.$ === 'HingesOnRight') {
				if (_n1.b.$ === 'NorthOrWest') {
					var _n2 = _n1.a;
					var _n3 = _n1.b;
					return author$project$Views$Icon$clockwiseRightwardArrow;
				} else {
					var _n6 = _n1.a;
					var _n7 = _n1.b;
					return author$project$Views$Icon$clockwiseLeftwardArrow;
				}
			} else {
				if (_n1.b.$ === 'NorthOrWest') {
					var _n4 = _n1.a;
					var _n5 = _n1.b;
					return author$project$Views$Icon$clockwiseDownwardArrow;
				} else {
					var _n8 = _n1.a;
					var _n9 = _n1.b;
					return author$project$Views$Icon$clockwiseUpwardArrow;
				}
			}
		};
		var spacer = A3(
			mdgriffith$style_elements$Element$el,
			author$project$Styles$Style$Unstyled,
			_List_fromArray(
				[
					mdgriffith$style_elements$Element$Attributes$minWidth(
					mdgriffith$style_elements$Element$Attributes$px(8)),
					mdgriffith$style_elements$Element$Attributes$width(mdgriffith$style_elements$Element$Attributes$fill)
				]),
			mdgriffith$style_elements$Element$empty);
		var iconButton = function (maybeAction) {
			return A2(
				author$project$Views$ContextMenuOption$iconButton,
				toMessage(author$project$Architecture$Wall$NoOp),
				A2(elm$core$Maybe$map, toMessage, maybeAction));
		};
		var doorOption = F2(
			function (doorId, door) {
				return A3(
					author$project$ContextMenuOption$Option,
					author$project$Views$Icon$door,
					elm$core$Maybe$Nothing,
					_List_fromArray(
						[
							mdgriffith$style_elements$Element$text(
							(!doorId) ? 'door' : ('door ' + elm$core$String$fromInt(doorId + 1))),
							spacer,
							A3(
							iconButton,
							A2(author$project$Architecture$Wall$canMoveDoorCloser, wall, door) ? elm$core$Maybe$Just(
								A2(author$project$Architecture$Wall$MoveDoor, -1, doorId)) : elm$core$Maybe$Nothing,
							author$project$Views$ContextMenuOption$Middle,
							author$project$Views$Icon$caretLeft),
							A3(
							iconButton,
							A2(author$project$Architecture$Wall$canMoveDoorFurther, wall, door) ? elm$core$Maybe$Just(
								A2(author$project$Architecture$Wall$MoveDoor, 1, doorId)) : elm$core$Maybe$Nothing,
							author$project$Views$ContextMenuOption$Middle,
							author$project$Views$Icon$caretRight),
							A3(
							iconButton,
							elm$core$Maybe$Just(
								author$project$Architecture$Wall$ToggleDoorOrientation(doorId)),
							author$project$Views$ContextMenuOption$First,
							toggleOrientationIcon(door)),
							A3(
							iconButton,
							elm$core$Maybe$Just(
								author$project$Architecture$Wall$RemoveDoor(doorId)),
							author$project$Views$ContextMenuOption$Last,
							author$project$Views$Icon$delete)
						]));
			});
		var _n0 = wall;
		var wallProperties = _n0.a;
		return _Utils_ap(
			_List_fromArray(
				[
					A3(
					author$project$ContextMenuOption$Option,
					author$project$Views$Icon$length,
					elm$core$Maybe$Nothing,
					_List_fromArray(
						[
							mdgriffith$style_elements$Element$text(
							elm$core$String$fromFloat(
								author$project$Grid$Units$toMillimeters(
									author$project$Architecture$Wall$length(wall)) / 1000) + ' m'),
							spacer,
							A3(
							iconButton,
							elm$core$Maybe$Just(
								author$project$Architecture$Wall$ChangeWallLength(1)),
							author$project$Views$ContextMenuOption$First,
							author$project$Views$Icon$mathPlus),
							A3(
							iconButton,
							elm$core$Maybe$Just(
								author$project$Architecture$Wall$ChangeWallLength(-1)),
							author$project$Views$ContextMenuOption$Last,
							author$project$Views$Icon$subtract)
						]))
				]),
			_Utils_ap(
				elm$core$Dict$values(
					A2(elm$core$Dict$map, doorOption, wallProperties.doors)),
				author$project$Architecture$Wall$canAddDoor(wall) ? _List_fromArray(
					[
						A3(
						author$project$ContextMenuOption$Option,
						author$project$Views$Icon$mathPlus,
						elm$core$Maybe$Just(
							toMessage(author$project$Architecture$Wall$AddDoor)),
						_List_fromArray(
							[
								mdgriffith$style_elements$Element$text('add door')
							]))
					]) : _List_Nil));
	});
var author$project$Grid$Units$toPixels = F2(
	function (pixelsPerMillimeter, units) {
		return (units * pixelsPerMillimeter) * author$project$Grid$Units$millimetersPerUnit;
	});
var author$project$Styles$Style$ContextMenuOption = {$: 'ContextMenuOption'};
var mdgriffith$elm_style_animation$Animation$Render$iePrefix = '-ms-';
var mdgriffith$elm_style_animation$Animation$Render$webkitPrefix = '-webkit-';
var mdgriffith$elm_style_animation$Animation$Render$prefix = function (stylePair) {
	var propValue = stylePair.b;
	var propName = stylePair.a;
	switch (propName) {
		case 'transform':
			return _List_fromArray(
				[
					stylePair,
					_Utils_Tuple2(
					_Utils_ap(mdgriffith$elm_style_animation$Animation$Render$iePrefix, propName),
					propValue),
					_Utils_Tuple2(
					_Utils_ap(mdgriffith$elm_style_animation$Animation$Render$webkitPrefix, propName),
					propValue)
				]);
		case 'transform-origin':
			return _List_fromArray(
				[
					stylePair,
					_Utils_Tuple2(
					_Utils_ap(mdgriffith$elm_style_animation$Animation$Render$iePrefix, propName),
					propValue),
					_Utils_Tuple2(
					_Utils_ap(mdgriffith$elm_style_animation$Animation$Render$webkitPrefix, propName),
					propValue)
				]);
		case 'filter':
			return _List_fromArray(
				[
					stylePair,
					_Utils_Tuple2(
					_Utils_ap(mdgriffith$elm_style_animation$Animation$Render$iePrefix, propName),
					propValue),
					_Utils_Tuple2(
					_Utils_ap(mdgriffith$elm_style_animation$Animation$Render$webkitPrefix, propName),
					propValue)
				]);
		default:
			return _List_fromArray(
				[stylePair]);
	}
};
var elm$html$Html$Attributes$attribute = elm$virtual_dom$VirtualDom$attribute;
var elm$svg$Svg$Attributes$cx = _VirtualDom_attribute('cx');
var elm$svg$Svg$Attributes$cy = _VirtualDom_attribute('cy');
var elm$svg$Svg$Attributes$offset = _VirtualDom_attribute('offset');
var elm$svg$Svg$Attributes$points = _VirtualDom_attribute('points');
var elm$svg$Svg$Attributes$r = _VirtualDom_attribute('r');
var elm$svg$Svg$Attributes$rx = _VirtualDom_attribute('rx');
var elm$svg$Svg$Attributes$ry = _VirtualDom_attribute('ry');
var mdgriffith$elm_style_animation$Animation$Render$pathCmdValue = function (cmd) {
	var renderPoints = function (coords) {
		return A2(
			elm$core$String$join,
			' ',
			A2(
				elm$core$List$map,
				function (_n11) {
					var x = _n11.a;
					var y = _n11.b;
					return elm$core$String$fromFloat(x.position) + (',' + elm$core$String$fromFloat(y.position));
				},
				coords));
	};
	switch (cmd.$) {
		case 'Move':
			var x = cmd.a;
			var y = cmd.b;
			return 'm ' + (elm$core$String$fromFloat(x.position) + (',' + elm$core$String$fromFloat(y.position)));
		case 'MoveTo':
			var x = cmd.a;
			var y = cmd.b;
			return 'M ' + (elm$core$String$fromFloat(x.position) + (',' + elm$core$String$fromFloat(y.position)));
		case 'Line':
			var x = cmd.a;
			var y = cmd.b;
			return 'l ' + (elm$core$String$fromFloat(x.position) + (',' + elm$core$String$fromFloat(y.position)));
		case 'LineTo':
			var x = cmd.a;
			var y = cmd.b;
			return 'L ' + (elm$core$String$fromFloat(x.position) + (',' + elm$core$String$fromFloat(y.position)));
		case 'Horizontal':
			var a = cmd.a;
			return 'h ' + elm$core$String$fromFloat(a.position);
		case 'HorizontalTo':
			var a = cmd.a;
			return 'H ' + elm$core$String$fromFloat(a.position);
		case 'Vertical':
			var a = cmd.a;
			return 'v ' + elm$core$String$fromFloat(a.position);
		case 'VerticalTo':
			var a = cmd.a;
			return 'V ' + elm$core$String$fromFloat(a.position);
		case 'Curve':
			var control1 = cmd.a.control1;
			var control2 = cmd.a.control2;
			var point = cmd.a.point;
			var _n1 = point;
			var p1x = _n1.a;
			var p1y = _n1.b;
			var _n2 = control2;
			var c2x = _n2.a;
			var c2y = _n2.b;
			var _n3 = control1;
			var c1x = _n3.a;
			var c1y = _n3.b;
			return 'c ' + (elm$core$String$fromFloat(c1x.position) + (' ' + (elm$core$String$fromFloat(c1y.position) + (', ' + (elm$core$String$fromFloat(c2x.position) + (' ' + (elm$core$String$fromFloat(c2y.position) + (', ' + (elm$core$String$fromFloat(p1x.position) + (' ' + elm$core$String$fromFloat(p1y.position)))))))))));
		case 'CurveTo':
			var control1 = cmd.a.control1;
			var control2 = cmd.a.control2;
			var point = cmd.a.point;
			var _n4 = point;
			var p1x = _n4.a;
			var p1y = _n4.b;
			var _n5 = control2;
			var c2x = _n5.a;
			var c2y = _n5.b;
			var _n6 = control1;
			var c1x = _n6.a;
			var c1y = _n6.b;
			return 'C ' + (elm$core$String$fromFloat(c1x.position) + (' ' + (elm$core$String$fromFloat(c1y.position) + (', ' + (elm$core$String$fromFloat(c2x.position) + (' ' + (elm$core$String$fromFloat(c2y.position) + (', ' + (elm$core$String$fromFloat(p1x.position) + (' ' + elm$core$String$fromFloat(p1y.position)))))))))));
		case 'Quadratic':
			var control = cmd.a.control;
			var point = cmd.a.point;
			var _n7 = point;
			var p1x = _n7.a;
			var p1y = _n7.b;
			var _n8 = control;
			var c1x = _n8.a;
			var c1y = _n8.b;
			return 'q ' + (elm$core$String$fromFloat(c1x.position) + (' ' + (elm$core$String$fromFloat(c1y.position) + (', ' + (elm$core$String$fromFloat(p1x.position) + (' ' + elm$core$String$fromFloat(p1y.position)))))));
		case 'QuadraticTo':
			var control = cmd.a.control;
			var point = cmd.a.point;
			var _n9 = point;
			var p1x = _n9.a;
			var p1y = _n9.b;
			var _n10 = control;
			var c1x = _n10.a;
			var c1y = _n10.b;
			return 'Q ' + (elm$core$String$fromFloat(c1x.position) + (' ' + (elm$core$String$fromFloat(c1y.position) + (', ' + (elm$core$String$fromFloat(p1x.position) + (' ' + elm$core$String$fromFloat(p1y.position)))))));
		case 'SmoothQuadratic':
			var points = cmd.a;
			return 't ' + renderPoints(points);
		case 'SmoothQuadraticTo':
			var points = cmd.a;
			return 'T ' + renderPoints(points);
		case 'Smooth':
			var points = cmd.a;
			return 's ' + renderPoints(points);
		case 'SmoothTo':
			var points = cmd.a;
			return 'S ' + renderPoints(points);
		case 'ClockwiseArc':
			var arc = cmd.a;
			var deltaAngle = arc.endAngle.position - arc.startAngle.position;
			if (_Utils_cmp(deltaAngle, 360 - 1.0e-6) > 0) {
				var dy = arc.radius.position * elm$core$Basics$sin(
					elm$core$Basics$degrees(arc.startAngle.position));
				var dx = arc.radius.position * elm$core$Basics$cos(
					elm$core$Basics$degrees(arc.startAngle.position));
				return 'A ' + (elm$core$String$fromFloat(arc.radius.position) + (',' + (elm$core$String$fromFloat(arc.radius.position) + (',0,1,1,' + (elm$core$String$fromFloat(arc.x.position - dx) + (',' + (elm$core$String$fromFloat(arc.y.position - dy) + (' A ' + (elm$core$String$fromFloat(arc.radius.position) + (',' + (elm$core$String$fromFloat(arc.radius.position) + (',0,1,1,' + (elm$core$String$fromFloat(arc.x.position + dx) + (',' + elm$core$String$fromFloat(arc.y.position + dy)))))))))))))));
			} else {
				return 'A ' + (elm$core$String$fromFloat(arc.radius.position) + (',' + (elm$core$String$fromFloat(arc.radius.position) + (' 0 ' + (((deltaAngle >= 180) ? '1' : '0') + (' ' + ('1' + (' ' + (elm$core$String$fromFloat(
					arc.x.position + (arc.radius.position * elm$core$Basics$cos(
						elm$core$Basics$degrees(arc.endAngle.position)))) + (',' + elm$core$String$fromFloat(
					arc.y.position + (arc.radius.position * elm$core$Basics$sin(
						elm$core$Basics$degrees(arc.endAngle.position))))))))))))));
			}
		case 'AntiClockwiseArc':
			var arc = cmd.a;
			var deltaAngle = arc.endAngle.position - arc.startAngle.position;
			if (_Utils_cmp(deltaAngle, 360 - 1.0e-6) > 0) {
				var dy = arc.radius.position * elm$core$Basics$sin(
					elm$core$Basics$degrees(arc.startAngle.position));
				var dx = arc.radius.position * elm$core$Basics$cos(
					elm$core$Basics$degrees(arc.startAngle.position));
				return 'A ' + (elm$core$String$fromFloat(arc.radius.position) + (',' + (elm$core$String$fromFloat(arc.radius.position) + (',0,1,0,' + (elm$core$String$fromFloat(arc.x.position - dx) + (',' + (elm$core$String$fromFloat(arc.y.position - dy) + (' A ' + (elm$core$String$fromFloat(arc.radius.position) + (',' + (elm$core$String$fromFloat(arc.radius.position) + (',0,1,1,' + (elm$core$String$fromFloat(arc.x.position + dx) + (',' + elm$core$String$fromFloat(arc.y.position + dy)))))))))))))));
			} else {
				return 'A ' + (elm$core$String$fromFloat(arc.radius.position) + (',' + (elm$core$String$fromFloat(arc.radius.position) + (' 0 ' + ((((arc.startAngle.position - arc.endAngle.position) >= 180) ? '1' : '0') + (' ' + ('0' + (' ' + (elm$core$String$fromFloat(
					arc.x.position + (arc.radius.position * elm$core$Basics$cos(arc.endAngle.position))) + (',' + elm$core$String$fromFloat(
					arc.y.position + (arc.radius.position * elm$core$Basics$sin(arc.endAngle.position)))))))))))));
			}
		default:
			return 'z';
	}
};
var mdgriffith$elm_style_animation$Animation$Render$propertyValue = F2(
	function (prop, delim) {
		switch (prop.$) {
			case 'ExactProperty':
				var value = prop.b;
				return value;
			case 'ColorProperty':
				var r = prop.b;
				var g = prop.c;
				var b = prop.d;
				var a = prop.e;
				return 'rgba(' + (elm$core$String$fromInt(
					elm$core$Basics$round(r.position)) + (',' + (elm$core$String$fromInt(
					elm$core$Basics$round(g.position)) + (',' + (elm$core$String$fromInt(
					elm$core$Basics$round(b.position)) + (',' + (elm$core$String$fromFloat(a.position) + ')')))))));
			case 'ShadowProperty':
				var name = prop.a;
				var inset = prop.b;
				var shadow = prop.c;
				return (inset ? 'inset ' : '') + (elm$core$String$fromFloat(shadow.offsetX.position) + ('px' + (' ' + (elm$core$String$fromFloat(shadow.offsetY.position) + ('px' + (' ' + (elm$core$String$fromFloat(shadow.blur.position) + ('px' + (' ' + ((((name === 'text-shadow') || (name === 'drop-shadow')) ? '' : (elm$core$String$fromFloat(shadow.size.position) + ('px' + ' '))) + ('rgba(' + (elm$core$String$fromInt(
					elm$core$Basics$round(shadow.red.position)) + (', ' + (elm$core$String$fromInt(
					elm$core$Basics$round(shadow.green.position)) + (', ' + (elm$core$String$fromInt(
					elm$core$Basics$round(shadow.blue.position)) + (', ' + (elm$core$String$fromFloat(shadow.alpha.position) + ')'))))))))))))))))));
			case 'Property':
				var x = prop.b;
				return _Utils_ap(
					elm$core$String$fromFloat(x.position),
					x.unit);
			case 'Property2':
				var x = prop.b;
				var y = prop.c;
				return _Utils_ap(
					elm$core$String$fromFloat(x.position),
					_Utils_ap(
						x.unit,
						_Utils_ap(
							delim,
							_Utils_ap(
								elm$core$String$fromFloat(y.position),
								y.unit))));
			case 'Property3':
				var x = prop.b;
				var y = prop.c;
				var z = prop.d;
				return _Utils_ap(
					elm$core$String$fromFloat(x.position),
					_Utils_ap(
						x.unit,
						_Utils_ap(
							delim,
							_Utils_ap(
								elm$core$String$fromFloat(y.position),
								_Utils_ap(
									y.unit,
									_Utils_ap(
										delim,
										_Utils_ap(
											elm$core$String$fromFloat(z.position),
											z.unit)))))));
			case 'Property4':
				var w = prop.b;
				var x = prop.c;
				var y = prop.d;
				var z = prop.e;
				return _Utils_ap(
					elm$core$String$fromFloat(w.position),
					_Utils_ap(
						w.unit,
						_Utils_ap(
							delim,
							_Utils_ap(
								elm$core$String$fromFloat(x.position),
								_Utils_ap(
									x.unit,
									_Utils_ap(
										delim,
										_Utils_ap(
											elm$core$String$fromFloat(y.position),
											_Utils_ap(
												y.unit,
												_Utils_ap(
													delim,
													_Utils_ap(
														elm$core$String$fromFloat(z.position),
														z.unit))))))))));
			case 'AngleProperty':
				var x = prop.b;
				return _Utils_ap(
					elm$core$String$fromFloat(x.position),
					x.unit);
			case 'Points':
				var coords = prop.a;
				return A2(
					elm$core$String$join,
					' ',
					A2(
						elm$core$List$map,
						function (_n1) {
							var x = _n1.a;
							var y = _n1.b;
							return elm$core$String$fromFloat(x.position) + (',' + elm$core$String$fromFloat(y.position));
						},
						coords));
			default:
				var cmds = prop.a;
				return A2(
					elm$core$String$join,
					' ',
					A2(elm$core$List$map, mdgriffith$elm_style_animation$Animation$Render$pathCmdValue, cmds));
		}
	});
var mdgriffith$elm_style_animation$Animation$Render$renderAttrs = function (prop) {
	if (A2(
		elm$core$String$startsWith,
		'attr:',
		mdgriffith$elm_style_animation$Animation$Model$propertyName(prop))) {
		return elm$core$Maybe$Just(
			A2(
				elm$html$Html$Attributes$attribute,
				A2(
					elm$core$String$dropLeft,
					5,
					mdgriffith$elm_style_animation$Animation$Model$propertyName(prop)),
				A2(mdgriffith$elm_style_animation$Animation$Render$propertyValue, prop, ' ')));
	} else {
		switch (prop.$) {
			case 'Points':
				var pts = prop.a;
				return elm$core$Maybe$Just(
					elm$svg$Svg$Attributes$points(
						A2(mdgriffith$elm_style_animation$Animation$Render$propertyValue, prop, ' ')));
			case 'Path':
				var cmds = prop.a;
				return elm$core$Maybe$Just(
					elm$svg$Svg$Attributes$d(
						A2(mdgriffith$elm_style_animation$Animation$Render$propertyValue, prop, ' ')));
			case 'Property':
				var name = prop.a;
				var m1 = prop.b;
				switch (name) {
					case 'x':
						return elm$core$Maybe$Just(
							elm$svg$Svg$Attributes$x(
								A2(mdgriffith$elm_style_animation$Animation$Render$propertyValue, prop, ' ')));
					case 'y':
						return elm$core$Maybe$Just(
							elm$svg$Svg$Attributes$y(
								A2(mdgriffith$elm_style_animation$Animation$Render$propertyValue, prop, ' ')));
					case 'cx':
						return elm$core$Maybe$Just(
							elm$svg$Svg$Attributes$cx(
								A2(mdgriffith$elm_style_animation$Animation$Render$propertyValue, prop, ' ')));
					case 'cy':
						return elm$core$Maybe$Just(
							elm$svg$Svg$Attributes$cy(
								A2(mdgriffith$elm_style_animation$Animation$Render$propertyValue, prop, ' ')));
					case 'rx':
						return elm$core$Maybe$Just(
							elm$svg$Svg$Attributes$rx(
								A2(mdgriffith$elm_style_animation$Animation$Render$propertyValue, prop, ' ')));
					case 'ry':
						return elm$core$Maybe$Just(
							elm$svg$Svg$Attributes$ry(
								A2(mdgriffith$elm_style_animation$Animation$Render$propertyValue, prop, ' ')));
					case 'r':
						return elm$core$Maybe$Just(
							elm$svg$Svg$Attributes$r(
								A2(mdgriffith$elm_style_animation$Animation$Render$propertyValue, prop, ' ')));
					case 'offset':
						return elm$core$Maybe$Just(
							elm$svg$Svg$Attributes$offset(
								A2(mdgriffith$elm_style_animation$Animation$Render$propertyValue, prop, ' ')));
					default:
						return elm$core$Maybe$Nothing;
				}
			case 'Property4':
				var name = prop.a;
				var m1 = prop.b;
				var m2 = prop.c;
				var m3 = prop.d;
				var m4 = prop.e;
				return (name === 'viewBox') ? elm$core$Maybe$Just(
					elm$svg$Svg$Attributes$viewBox(
						A2(mdgriffith$elm_style_animation$Animation$Render$propertyValue, prop, ' '))) : elm$core$Maybe$Nothing;
			default:
				return elm$core$Maybe$Nothing;
		}
	}
};
var mdgriffith$elm_style_animation$Animation$Render$isAttr = function (prop) {
	return A2(
		elm$core$String$startsWith,
		'attr:',
		mdgriffith$elm_style_animation$Animation$Model$propertyName(prop)) || function () {
		switch (prop.$) {
			case 'Points':
				return true;
			case 'Path':
				return true;
			case 'Property':
				var name = prop.a;
				return (name === 'cx') || ((name === 'cy') || ((name === 'x') || ((name === 'y') || ((name === 'rx') || ((name === 'ry') || ((name === 'r') || (name === 'offset')))))));
			case 'Property4':
				var name = prop.a;
				return name === 'viewBox';
			default:
				return false;
		}
	}();
};
var mdgriffith$elm_style_animation$Animation$Render$isFilter = function (prop) {
	return A2(
		elm$core$List$member,
		mdgriffith$elm_style_animation$Animation$Model$propertyName(prop),
		_List_fromArray(
			['filter-url', 'blur', 'brightness', 'contrast', 'grayscale', 'hue-rotate', 'invert', 'saturate', 'sepia', 'drop-shadow']));
};
var mdgriffith$elm_style_animation$Animation$Render$render3dRotation = function (prop) {
	if (prop.$ === 'Property3') {
		var x = prop.b;
		var y = prop.c;
		var z = prop.d;
		return 'rotateX(' + (elm$core$String$fromFloat(x.position) + (x.unit + (') rotateY(' + (elm$core$String$fromFloat(y.position) + (y.unit + (') rotateZ(' + (elm$core$String$fromFloat(z.position) + (z.unit + ')'))))))));
	} else {
		return '';
	}
};
var mdgriffith$elm_style_animation$Animation$Render$renderValues = function (_n0) {
	var model = _n0.a;
	var _n1 = A2(elm$core$List$partition, mdgriffith$elm_style_animation$Animation$Render$isAttr, model.style);
	var attrProps = _n1.a;
	var styleProps = _n1.b;
	var _n2 = A3(
		elm$core$List$foldl,
		F2(
			function (prop, _n3) {
				var myStyle = _n3.a;
				var myTransforms = _n3.b;
				var myFilters = _n3.c;
				return mdgriffith$elm_style_animation$Animation$Render$isTransformation(prop) ? _Utils_Tuple3(
					myStyle,
					_Utils_ap(
						myTransforms,
						_List_fromArray(
							[prop])),
					myFilters) : (mdgriffith$elm_style_animation$Animation$Render$isFilter(prop) ? _Utils_Tuple3(
					myStyle,
					myTransforms,
					_Utils_ap(
						myFilters,
						_List_fromArray(
							[prop]))) : _Utils_Tuple3(
					_Utils_ap(
						myStyle,
						_List_fromArray(
							[prop])),
					myTransforms,
					myFilters));
			}),
		_Utils_Tuple3(_List_Nil, _List_Nil, _List_Nil),
		styleProps);
	var style = _n2.a;
	var transforms = _n2.b;
	var filters = _n2.c;
	var renderedFilters = elm$core$List$isEmpty(filters) ? _List_Nil : _List_fromArray(
		[
			_Utils_Tuple2(
			'filter',
			A2(
				elm$core$String$join,
				' ',
				A2(
					elm$core$List$map,
					function (prop) {
						var name = mdgriffith$elm_style_animation$Animation$Model$propertyName(prop);
						return (name === 'filter-url') ? ('url(\"' + (A2(mdgriffith$elm_style_animation$Animation$Render$propertyValue, prop, ', ') + '\")')) : (mdgriffith$elm_style_animation$Animation$Model$propertyName(prop) + ('(' + (A2(mdgriffith$elm_style_animation$Animation$Render$propertyValue, prop, ', ') + ')')));
					},
					filters)))
		]);
	var renderedStyle = A2(
		elm$core$List$map,
		function (prop) {
			return _Utils_Tuple2(
				mdgriffith$elm_style_animation$Animation$Model$propertyName(prop),
				A2(mdgriffith$elm_style_animation$Animation$Render$propertyValue, prop, ' '));
		},
		style);
	var renderedTransforms = elm$core$List$isEmpty(transforms) ? _List_Nil : _List_fromArray(
		[
			_Utils_Tuple2(
			'transform',
			A2(
				elm$core$String$join,
				' ',
				A2(
					elm$core$List$map,
					function (prop) {
						return (mdgriffith$elm_style_animation$Animation$Model$propertyName(prop) === 'rotate3d') ? mdgriffith$elm_style_animation$Animation$Render$render3dRotation(prop) : (mdgriffith$elm_style_animation$Animation$Model$propertyName(prop) + ('(' + (A2(mdgriffith$elm_style_animation$Animation$Render$propertyValue, prop, ', ') + ')')));
					},
					transforms)))
		]);
	return _Utils_Tuple2(
		_Utils_ap(
			renderedTransforms,
			_Utils_ap(renderedFilters, renderedStyle)),
		attrProps);
};
var mdgriffith$elm_style_animation$Animation$Render$render = function (animation) {
	var _n0 = mdgriffith$elm_style_animation$Animation$Render$renderValues(animation);
	var style = _n0.a;
	var attrProps = _n0.b;
	var otherAttrs = A2(elm$core$List$filterMap, mdgriffith$elm_style_animation$Animation$Render$renderAttrs, attrProps);
	var styleAttr = A2(
		elm$core$List$map,
		function (_n1) {
			var prop = _n1.a;
			var val = _n1.b;
			return A2(elm$html$Html$Attributes$style, prop, val);
		},
		A2(elm$core$List$concatMap, mdgriffith$elm_style_animation$Animation$Render$prefix, style));
	return _Utils_ap(styleAttr, otherAttrs);
};
var mdgriffith$elm_style_animation$Animation$render = mdgriffith$elm_style_animation$Animation$Render$render;
var mdgriffith$style_elements$Element$Attributes$toAttr = mdgriffith$style_elements$Element$Internal$Model$Attr;
var author$project$Utilities$withAnimation = F2(
	function (state, otherAttributes) {
		return _Utils_ap(
			A2(
				elm$core$List$map,
				mdgriffith$style_elements$Element$Attributes$toAttr,
				mdgriffith$elm_style_animation$Animation$render(state)),
			otherAttributes);
	});
var mdgriffith$style_elements$Style$Internal$Model$GoRight = {$: 'GoRight'};
var mdgriffith$style_elements$Element$row = F3(
	function (style, attrs, children) {
		return mdgriffith$style_elements$Element$Internal$Model$Layout(
			{
				absolutelyPositioned: elm$core$Maybe$Nothing,
				attrs: attrs,
				children: mdgriffith$style_elements$Element$Internal$Model$Normal(children),
				layout: A2(mdgriffith$style_elements$Style$Internal$Model$FlexLayout, mdgriffith$style_elements$Style$Internal$Model$GoRight, _List_Nil),
				node: 'div',
				style: elm$core$Maybe$Just(style)
			});
	});
var mdgriffith$style_elements$Element$Internal$Model$Left = {$: 'Left'};
var mdgriffith$style_elements$Element$Attributes$alignLeft = mdgriffith$style_elements$Element$Internal$Model$HAlign(mdgriffith$style_elements$Element$Internal$Model$Left);
var author$project$Pages$Interior$ContextMenu$optionView = F4(
	function (model, handlers, item, _n0) {
		var icon = _n0.icon;
		var clickAction = _n0.clickAction;
		var content = _n0.content;
		var approximateContextMenuIconPadding = 6;
		var _n1 = function () {
			if (clickAction.$ === 'Just') {
				var message = clickAction.a;
				return _Utils_Tuple3(
					_List_fromArray(
						[
							author$project$Utilities$onClickWithoutPropagation(message)
						]),
					author$project$Styles$Style$ContextMenuOptionButton(author$project$Styles$Style$Enabled),
					author$project$Pages$Interior$ContextMenu$optionSpacing + approximateContextMenuIconPadding);
			} else {
				return _Utils_Tuple3(_List_Nil, author$project$Styles$Style$Unstyled, 0);
			}
		}();
		var actionEvent = _n1.a;
		var optionStyle = _n1.b;
		var rightPadding = _n1.c;
		return A3(
			mdgriffith$style_elements$Element$el,
			author$project$Styles$Style$ContextMenuOption,
			_List_fromArray(
				[
					mdgriffith$style_elements$Element$Attributes$alignLeft,
					author$project$Utilities$onMouseUpWithoutPropagation(handlers.noOp)
				]),
			A3(
				mdgriffith$style_elements$Element$row,
				optionStyle,
				A2(
					author$project$Utilities$withAnimation,
					model.contextMenuOptionAnimationState,
					_Utils_ap(
						_List_fromArray(
							[
								mdgriffith$style_elements$Element$Attributes$paddingTop(author$project$Pages$Interior$ContextMenu$optionSpacing / 2),
								mdgriffith$style_elements$Element$Attributes$paddingBottom(author$project$Pages$Interior$ContextMenu$optionSpacing / 2),
								mdgriffith$style_elements$Element$Attributes$paddingRight(rightPadding),
								mdgriffith$style_elements$Element$Attributes$paddingLeft(author$project$Pages$Interior$ContextMenu$optionSpacing),
								mdgriffith$style_elements$Element$Attributes$verticalCenter,
								mdgriffith$style_elements$Element$Attributes$width(
								mdgriffith$style_elements$Element$Attributes$px(230))
							]),
						actionEvent)),
				_Utils_ap(
					_List_fromArray(
						[
							A3(
							mdgriffith$style_elements$Element$el,
							author$project$Styles$Style$Unstyled,
							_List_fromArray(
								[
									mdgriffith$style_elements$Element$Attributes$paddingRight(8)
								]),
							icon(author$project$Views$ContextMenuOption$optionIconSize))
						]),
					content)));
	});
var author$project$Styles$Style$ContextMenu = {$: 'ContextMenu'};
var author$project$Styles$Style$ContextMenuArrow = {$: 'ContextMenuArrow'};
var author$project$Styles$Style$contextMenuArrowHeight = 16;
var mdgriffith$style_elements$Element$Attributes$moveDown = function (y) {
	return A3(
		mdgriffith$style_elements$Element$Internal$Model$Position,
		elm$core$Maybe$Nothing,
		elm$core$Maybe$Just(y),
		elm$core$Maybe$Nothing);
};
var mdgriffith$style_elements$Element$Attributes$moveRight = function (x) {
	return A3(
		mdgriffith$style_elements$Element$Internal$Model$Position,
		elm$core$Maybe$Just(x),
		elm$core$Maybe$Nothing,
		elm$core$Maybe$Nothing);
};
var author$project$Pages$Interior$ContextMenu$view = F2(
	function (model, handlers) {
		var viewportEdgeToVerticalAxisOfContextMenu = function (item) {
			return ((author$project$Architecture$Item$viewMidpoint(item).x * model.pixelsPerMillimeter) * author$project$Grid$Units$millimetersPerUnit) - model.viewportOffset.x;
		};
		var option = A2(author$project$Pages$Interior$ContextMenu$optionView, model, handlers);
		var offset = 2 * author$project$Styles$Style$contextMenuArrowHeight;
		var viewportEdgeToTopOfContextMenu = function (item) {
			return (((model.session.viewport.height / 2) - A2(
				author$project$Grid$Units$toPixels,
				model.pixelsPerMillimeter,
				author$project$Grid$Boundary$south(
					author$project$Architecture$Item$viewBoundary(item)))) + offset) - model.viewportOffset.y;
		};
		var itemOptions = function (item) {
			var _n1 = author$project$Architecture$Item$itemType(item);
			if (_n1.$ === 'EquipmentItem') {
				var equipment = _n1.a;
				return A2(
					author$project$Architecture$Equipment$options,
					A2(
						elm$core$Basics$composeL,
						handlers.updateItem(item),
						author$project$Architecture$Item$EquipmentMessage),
					equipment);
			} else {
				var wall = _n1.a;
				return A2(
					author$project$Architecture$Wall$options,
					A2(
						elm$core$Basics$composeL,
						handlers.updateItem(item),
						author$project$Architecture$Item$WallMessage),
					wall);
			}
		};
		var options = function (item) {
			return A2(
				elm$core$List$map,
				option(item),
				_Utils_ap(
					itemOptions(item),
					_List_fromArray(
						[
							A3(
							author$project$ContextMenuOption$Option,
							author$project$Views$Icon$delete,
							elm$core$Maybe$Just(
								handlers.deleteItem(
									author$project$Architecture$Item$id(item))),
							_List_fromArray(
								[
									mdgriffith$style_elements$Element$text('delete')
								]))
						])));
		};
		var _n0 = A2(
			elm$core$Maybe$andThen,
			author$project$Architecture$Item$find(model.session),
			model.itemContextMenu);
		if (_n0.$ === 'Nothing') {
			return _List_Nil;
		} else {
			var item = _n0.a;
			return _List_fromArray(
				[
					A3(
					mdgriffith$style_elements$Element$el,
					author$project$Styles$Style$Unstyled,
					_List_fromArray(
						[
							mdgriffith$style_elements$Element$Attributes$center,
							mdgriffith$style_elements$Element$Attributes$moveRight(
							viewportEdgeToVerticalAxisOfContextMenu(item)),
							mdgriffith$style_elements$Element$Attributes$moveDown(
							viewportEdgeToTopOfContextMenu(item))
						]),
					A3(
						mdgriffith$style_elements$Element$column,
						author$project$Styles$Style$ContextMenu,
						A2(
							author$project$Utilities$withAnimation,
							model.contextMenuAnimationState,
							_List_fromArray(
								[
									mdgriffith$style_elements$Element$Attributes$paddingTop(author$project$Pages$Interior$ContextMenu$optionSpacing / 2),
									mdgriffith$style_elements$Element$Attributes$paddingBottom(author$project$Pages$Interior$ContextMenu$optionSpacing / 2)
								])),
						options(item))),
					A3(
					mdgriffith$style_elements$Element$el,
					author$project$Styles$Style$ContextMenuArrow,
					A2(
						author$project$Utilities$withAnimation,
						model.contextMenuAnimationState,
						_List_fromArray(
							[
								mdgriffith$style_elements$Element$Attributes$moveRight(
								viewportEdgeToVerticalAxisOfContextMenu(item)),
								mdgriffith$style_elements$Element$Attributes$moveDown(
								viewportEdgeToTopOfContextMenu(item) - author$project$Styles$Style$contextMenuArrowHeight),
								mdgriffith$style_elements$Element$Attributes$center,
								mdgriffith$style_elements$Element$Attributes$width(
								mdgriffith$style_elements$Element$Attributes$px(author$project$Styles$Style$contextMenuArrowHeight * 2)),
								mdgriffith$style_elements$Element$Attributes$height(
								mdgriffith$style_elements$Element$Attributes$px(author$project$Styles$Style$contextMenuArrowHeight))
							])),
					mdgriffith$style_elements$Element$empty)
				]);
		}
	});
var author$project$Route$toString = function (routeToConvert) {
	if (routeToConvert.$ === 'Layout') {
		return '/layout/';
	} else {
		return '/customize/p4oWJcZX8o/';
	}
};
var author$project$Session$RtckLoft$costPaneEnabled = true;
var author$project$Session$RtckLoft$customWallsEnabled = true;
var author$project$Session$RtckLoft$layoutViewEnabled = false;
var author$project$Session$RtckLoft$upstairsViewEnabled = false;
var author$project$Styles$Style$BreakdownSum = {$: 'BreakdownSum'};
var author$project$Styles$Style$Crosshair = {$: 'Crosshair'};
var author$project$Styles$Style$Dragging = {$: 'Dragging'};
var author$project$Styles$Style$Drawer = {$: 'Drawer'};
var author$project$Styles$Style$DrawerButton = {$: 'DrawerButton'};
var author$project$Styles$Style$DrawerHeading = {$: 'DrawerHeading'};
var author$project$Styles$Style$DrawerHeading2 = {$: 'DrawerHeading2'};
var author$project$Styles$Style$Interactive = {$: 'Interactive'};
var author$project$Styles$Style$NotEnoughData = {$: 'NotEnoughData'};
var author$project$Styles$Style$WithWarning = {$: 'WithWarning'};
var author$project$Styles$SvgStyle$display = author$project$Styles$SvgStyle$className('display');
var author$project$Color$red = A4(author$project$Color$RGBA, 204, 0, 0, 1);
var author$project$Color$Convert$toRadix = function (n) {
	var getChr = function (c) {
		return (c < 10) ? elm$core$String$fromInt(c) : elm$core$String$fromChar(
			elm$core$Char$fromCode(87 + c));
	};
	return (n < 16) ? getChr(n) : _Utils_ap(
		author$project$Color$Convert$toRadix((n / 16) | 0),
		getChr(
			A2(elm$core$Basics$modBy, 16, n)));
};
var author$project$Color$Convert$toHex = A2(
	elm$core$Basics$composeR,
	author$project$Color$Convert$toRadix,
	A2(
		elm$core$String$padLeft,
		2,
		_Utils_chr('0')));
var author$project$Color$Convert$colorToHex = function (cl) {
	var _n0 = author$project$Color$toRgb(cl);
	var red = _n0.red;
	var green = _n0.green;
	var blue = _n0.blue;
	return A2(
		elm$core$String$join,
		'',
		A2(
			elm$core$List$cons,
			'#',
			A2(
				elm$core$List$map,
				author$project$Color$Convert$toHex,
				_List_fromArray(
					[red, green, blue]))));
};
var author$project$Color$HSLA = F4(
	function (a, b, c, d) {
		return {$: 'HSLA', a: a, b: b, c: c, d: d};
	});
var elm$core$Basics$turns = function (angleInTurns) {
	return (2 * elm$core$Basics$pi) * angleInTurns;
};
var author$project$Color$hsla = F4(
	function (hue, saturation, lightness, alpha) {
		return A4(
			author$project$Color$HSLA,
			hue - elm$core$Basics$turns(
				elm$core$Basics$floor(hue / (2 * elm$core$Basics$pi))),
			saturation,
			lightness,
			alpha);
	});
var author$project$Color$rgbToHsl = F3(
	function (redComponent, greenComponent, blueComponent) {
		var r = redComponent / 255;
		var g = greenComponent / 255;
		var b = blueComponent / 255;
		var cMax = A2(
			elm$core$Basics$max,
			A2(elm$core$Basics$max, r, g),
			b);
		var cMin = A2(
			elm$core$Basics$min,
			A2(elm$core$Basics$min, r, g),
			b);
		var c = cMax - cMin;
		var lightness = (cMax + cMin) / 2;
		var saturation = (!lightness) ? 0 : (c / (1 - elm$core$Basics$abs((2 * lightness) - 1)));
		var hue = elm$core$Basics$degrees(60) * (_Utils_eq(cMax, r) ? A2(author$project$Color$fmod, (g - b) / c, 6) : (_Utils_eq(cMax, g) ? (((b - r) / c) + 2) : (((r - g) / c) + 4)));
		return _Utils_Tuple3(hue, saturation, lightness);
	});
var author$project$Color$toHsl = function (color) {
	if (color.$ === 'HSLA') {
		var h = color.a;
		var s = color.b;
		var l = color.c;
		var a = color.d;
		return {alpha: a, hue: h, lightness: l, saturation: s};
	} else {
		var r = color.a;
		var g = color.b;
		var b = color.c;
		var a = color.d;
		var _n1 = A3(author$project$Color$rgbToHsl, r, g, b);
		var h = _n1.a;
		var s = _n1.b;
		var l = _n1.c;
		return {alpha: a, hue: h, lightness: l, saturation: s};
	}
};
var author$project$Color$Mixing$mapSaturation = F2(
	function (fn, color) {
		var _n0 = author$project$Color$toHsl(color);
		var hue = _n0.hue;
		var saturation = _n0.saturation;
		var lightness = _n0.lightness;
		var alpha = _n0.alpha;
		return A4(
			author$project$Color$hsla,
			hue,
			fn(saturation),
			lightness,
			alpha);
	});
var author$project$Color$rgba = author$project$Color$RGBA;
var author$project$Color$Mixing$mix = F3(
	function (p, color1, color2) {
		var w = (p * 2) - 1;
		var rgba2 = author$project$Color$toRgb(color2);
		var rgba1 = author$project$Color$toRgb(color1);
		var alpha = (rgba1.alpha * p) + (rgba2.alpha * (1 - p));
		var a = rgba1.alpha - rgba2.alpha;
		var w1 = _Utils_eq(w * a, -1) ? w : ((((w + a) / (1 + (w * a))) + 1) / 2.0);
		var w2 = 1 - w1;
		var b = (rgba1.blue * w1) + (rgba2.blue * w2);
		var g = (rgba1.green * w1) + (rgba2.green * w2);
		var r = (rgba1.red * w1) + (rgba2.red * w2);
		return A4(
			author$project$Color$rgba,
			elm$core$Basics$round(r),
			elm$core$Basics$round(g),
			elm$core$Basics$round(b),
			alpha);
	});
var author$project$Color$Mixing$tint = F2(
	function (x, color) {
		return A3(
			author$project$Color$Mixing$mix,
			x,
			A3(author$project$Color$rgb, 255, 255, 255),
			color);
	});
var author$project$Styles$Color$aBitLighter = function (color) {
	return A2(
		author$project$Color$Mixing$mapSaturation,
		elm$core$Basics$mul(0.8),
		A2(author$project$Color$Mixing$tint, 0.3, color));
};
var author$project$Styles$Color$darkGrey = A3(author$project$Color$rgb, 119, 119, 119);
var author$project$Styles$Color$lighter = function (color) {
	return A2(
		author$project$Color$Mixing$mapSaturation,
		elm$core$Basics$mul(0.6),
		A2(author$project$Color$Mixing$tint, 0.5, color));
};
var author$project$Styles$Color$yellow = A3(author$project$Color$rgb, 255, 185, 0);
var author$project$Styles$SvgStyle$andChildren = function (selector) {
	return _List_fromArray(
		[selector, selector + ' *']);
};
var author$project$Styles$SvgStyle$class = function (classNameString) {
	return '.' + classNameString;
};
var author$project$Styles$SvgStyle$declaration = F2(
	function (selectors, styles) {
		return A2(elm$core$String$join, ',', selectors) + ('{' + (A2(
			elm$core$String$join,
			';',
			A2(
				elm$core$List$map,
				function (_n0) {
					var property = _n0.a;
					var style = _n0.b;
					return property + (':' + style);
				},
				styles)) + '}'));
	});
var author$project$Styles$Color$acrylic = function (color) {
	var channels = author$project$Color$toRgb(color);
	return A4(author$project$Color$rgba, channels.red, channels.green, channels.blue, channels.alpha * 0.6);
};
var author$project$Styles$Color$acrylicDark = author$project$Styles$Color$acrylic(
	A4(author$project$Color$rgba, 0, 0, 0, 0.8));
var author$project$Styles$Color$solid = F2(
	function (background, foreground) {
		var foregroundChannels = author$project$Color$toRgb(foreground);
		var foregroundSolid = A3(author$project$Color$rgb, foregroundChannels.red, foregroundChannels.green, foregroundChannels.red);
		var backgroundChannels = author$project$Color$toRgb(background);
		var backgroundSolid = A3(author$project$Color$rgb, backgroundChannels.red, backgroundChannels.green, backgroundChannels.red);
		return A3(author$project$Color$Mixing$mix, foregroundChannels.alpha, foregroundSolid, backgroundSolid);
	});
var author$project$Styles$SvgStyle$solidDrawerBackground = A2(author$project$Styles$Color$solid, author$project$Styles$Style$appBackground, author$project$Styles$Color$acrylicDark);
var author$project$Styles$SvgStyle$withError = author$project$Styles$SvgStyle$className('withError');
var author$project$Styles$SvgStyle$withWarning = author$project$Styles$SvgStyle$className('withWarning');
var author$project$Styles$SvgStyle$declarations = function () {
	var itemStrokeWidth = _Utils_Tuple2(
		'stroke-width',
		elm$core$String$fromFloat(author$project$Styles$SvgStyle$strokeWidthOnPlan));
	var itemState = F2(
		function (state, color) {
			return _List_fromArray(
				[
					A2(
					author$project$Styles$SvgStyle$declaration,
					_List_fromArray(
						[
							_Utils_ap(
							author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$item),
							author$project$Styles$SvgStyle$class(state))
						]),
					_List_fromArray(
						[
							_Utils_Tuple2(
							'stroke',
							author$project$Color$Convert$colorToHex(color))
						])),
					A2(
					author$project$Styles$SvgStyle$declaration,
					_List_fromArray(
						[
							author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$item) + (author$project$Styles$SvgStyle$class(state) + ':hover:not(:active)')
						]),
					_List_fromArray(
						[
							_Utils_Tuple2(
							'stroke',
							author$project$Color$Convert$colorToHex(
								author$project$Styles$Color$lighter(color)))
						])),
					A2(
					author$project$Styles$SvgStyle$declaration,
					_List_fromArray(
						[
							author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$wall) + (author$project$Styles$SvgStyle$class(state) + ':hover:not(:active)')
						]),
					_List_fromArray(
						[
							_Utils_Tuple2(
							'fill',
							author$project$Color$Convert$colorToHex(
								author$project$Styles$Color$lighter(color)))
						]))
				]);
		});
	return _Utils_ap(
		_List_fromArray(
			[
				A2(
				author$project$Styles$SvgStyle$declaration,
				_List_fromArray(
					[
						author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$display)
					]),
				_List_fromArray(
					[
						_Utils_Tuple2('display', 'block')
					])),
				A2(
				author$project$Styles$SvgStyle$declaration,
				_List_fromArray(
					[
						author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$itemOutline)
					]),
				_List_fromArray(
					[itemStrokeWidth])),
				A2(
				author$project$Styles$SvgStyle$declaration,
				_List_fromArray(
					[
						author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$item)
					]),
				_List_fromArray(
					[
						_Utils_Tuple2('fill', 'rgb(255,255,255)')
					])),
				A2(
				author$project$Styles$SvgStyle$declaration,
				_List_fromArray(
					[
						author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$item),
						author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$existingWall),
						author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$existingDoor),
						author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$doorPanel)
					]),
				_List_fromArray(
					[
						_Utils_Tuple2(
						'stroke',
						author$project$Color$Convert$colorToHex(author$project$Styles$SvgStyle$itemStrokeColor)),
						_Utils_Tuple2('stroke-linecap', 'square'),
						itemStrokeWidth
					])),
				A2(
				author$project$Styles$SvgStyle$declaration,
				_List_fromArray(
					[
						author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$existingWall) + (':not(' + (author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$cut) + ')'))
					]),
				_List_fromArray(
					[
						_Utils_Tuple2(
						'stroke',
						author$project$Color$Convert$colorToHex(author$project$Styles$Color$lighterGrey)),
						_Utils_Tuple2(
						'fill',
						author$project$Color$Convert$colorToHex(author$project$Styles$Color$lighterGrey))
					])),
				A2(
				author$project$Styles$SvgStyle$declaration,
				_List_fromArray(
					[
						author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$existingWindow)
					]),
				_List_fromArray(
					[
						_Utils_Tuple2(
						'stroke',
						author$project$Color$Convert$colorToHex(author$project$Styles$Color$lightGrey)),
						_Utils_Tuple2(
						'fill',
						author$project$Color$Convert$colorToHex(author$project$Styles$SvgStyle$windowColor)),
						itemStrokeWidth
					])),
				A2(
				author$project$Styles$SvgStyle$declaration,
				_List_fromArray(
					[
						author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$activeFloorArea)
					]),
				_List_fromArray(
					[
						_Utils_Tuple2(
						'stroke',
						author$project$Color$Convert$colorToHex(author$project$Styles$Color$lightGrey)),
						itemStrokeWidth
					])),
				A2(
				author$project$Styles$SvgStyle$declaration,
				_List_fromArray(
					[
						author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$terrace)
					]),
				_List_fromArray(
					[
						_Utils_Tuple2(
						'stroke',
						author$project$Color$Convert$colorToHex(author$project$Styles$Color$lightGrey)),
						itemStrokeWidth
					]))
			]),
		_Utils_ap(
			A2(itemState, author$project$Styles$SvgStyle$withError, author$project$Color$red),
			_Utils_ap(
				A2(itemState, author$project$Styles$SvgStyle$withWarning, author$project$Styles$Color$yellow),
				_List_fromArray(
					[
						A2(
						author$project$Styles$SvgStyle$declaration,
						_List_fromArray(
							[
								_Utils_ap(
								author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$item),
								author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$placedAndIdle)),
								_Utils_ap(
								author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$equipment),
								author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$inDrawer))
							]),
						_List_fromArray(
							[
								_Utils_Tuple2('cursor', 'pointer')
							])),
						A2(
						author$project$Styles$SvgStyle$declaration,
						_List_fromArray(
							[
								author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$item) + (author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$placedAndIdleAndWithoutError) + ':hover:not(:active)')
							]),
						_List_fromArray(
							[
								_Utils_Tuple2(
								'stroke',
								author$project$Color$Convert$colorToHex(author$project$Styles$Color$darkGrey))
							])),
						A2(
						author$project$Styles$SvgStyle$declaration,
						_List_fromArray(
							[
								author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$wall),
								_Utils_ap(
								author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$existingWall),
								author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$cut)),
								author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$existingDoor),
								author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$doorPanel)
							]),
						_List_fromArray(
							[
								_Utils_Tuple2(
								'fill',
								author$project$Color$Convert$colorToHex(author$project$Styles$SvgStyle$itemStrokeColor))
							])),
						A2(
						author$project$Styles$SvgStyle$declaration,
						_List_fromArray(
							[
								author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$doorPanel)
							]),
						_List_fromArray(
							[
								_Utils_Tuple2('opacity', '0.07')
							])),
						A2(
						author$project$Styles$SvgStyle$declaration,
						_List_fromArray(
							[
								author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$wall) + ':hover:not(:active)'
							]),
						_List_fromArray(
							[
								_Utils_Tuple2(
								'fill',
								author$project$Color$Convert$colorToHex(author$project$Styles$Color$darkGrey))
							])),
						A2(
						author$project$Styles$SvgStyle$declaration,
						_List_fromArray(
							[
								_Utils_ap(
								author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$wall),
								author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$withError))
							]),
						_List_fromArray(
							[
								_Utils_Tuple2(
								'fill',
								author$project$Color$Convert$colorToHex(author$project$Color$red))
							])),
						A2(
						author$project$Styles$SvgStyle$declaration,
						_List_fromArray(
							[
								_Utils_ap(
								author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$item),
								author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$dragged)),
								author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$equipment) + (author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$inDrawer) + ':active')
							]),
						_List_fromArray(
							[
								_Utils_Tuple2('cursor', '-webkit-grabbing'),
								_Utils_Tuple2('cursor', 'grabbing')
							])),
						A2(
						author$project$Styles$SvgStyle$declaration,
						author$project$Styles$SvgStyle$andChildren(
							_Utils_ap(
								author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$equipment),
								author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$inDrawer))),
						_List_fromArray(
							[
								_Utils_Tuple2(
								'fill',
								author$project$Color$Convert$colorToHex(author$project$Styles$SvgStyle$solidDrawerBackground)),
								_Utils_Tuple2('stroke', 'white')
							])),
						A2(
						author$project$Styles$SvgStyle$declaration,
						author$project$Styles$SvgStyle$andChildren(
							author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$equipment) + (author$project$Styles$SvgStyle$class(author$project$Styles$SvgStyle$inDrawer) + ':hover:not(:active)')),
						_List_fromArray(
							[
								_Utils_Tuple2(
								'fill',
								author$project$Color$Convert$colorToHex(
									author$project$Styles$Color$aBitLighter(author$project$Styles$SvgStyle$solidDrawerBackground)))
							]))
					]))));
}();
var elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var elm$html$Html$node = elm$virtual_dom$VirtualDom$node;
var elm$html$Html$text = elm$virtual_dom$VirtualDom$text;
var author$project$Styles$SvgStyle$stylesheet = A3(
	elm$html$Html$node,
	'style',
	_List_Nil,
	_List_fromArray(
		[
			elm$html$Html$text(
			A2(elm$core$String$join, '\n', author$project$Styles$SvgStyle$declarations))
		]));
var author$project$TypedSvg$defs = author$project$TypedSvg$Core$node('defs');
var author$project$Utilities$interweaveInfinitely = F2(
	function (glue, _n0) {
		var firstItem = _n0.a;
		var otherItems = _n0.b;
		var numberOfGlueItems = elm$core$List$length(glue);
		var glueItems = elm$core$Array$fromList(glue);
		var append = F2(
			function (_n2, result) {
				var index = _n2.a;
				var item = _n2.b;
				var _n1 = A2(elm$core$Array$get, index % numberOfGlueItems, glueItems);
				if (_n1.$ === 'Just') {
					var glueItem = _n1.a;
					return A2(
						elm$core$List$cons,
						item,
						A2(elm$core$List$cons, glueItem, result));
				} else {
					return result;
				}
			});
		return A3(
			elm$core$List$foldr,
			append,
			_List_fromArray(
				[firstItem]),
			A2(
				elm$core$List$indexedMap,
				F2(
					function (a, b) {
						return _Utils_Tuple2(a, b);
					}),
				otherItems));
	});
var author$project$Styles$Style$App = {$: 'App'};
var author$project$Styles$Color$aLotLighter = function (color) {
	return A2(
		author$project$Color$Mixing$mapSaturation,
		elm$core$Basics$mul(0.4),
		A2(author$project$Color$Mixing$tint, 0.7, color));
};
var author$project$Styles$Color$accent = A3(author$project$Color$rgb, 137, 162, 12);
var author$project$Styles$Color$red = A3(author$project$Color$rgb, 218, 59, 1);
var author$project$Styles$Color$white = A3(author$project$Color$rgb, 255, 255, 255);
var author$project$Styles$Color$withAlpha = F2(
	function (alpha, color) {
		var channels = author$project$Color$toRgb(color);
		return A4(author$project$Color$rgba, channels.red, channels.green, channels.red, alpha);
	});
var author$project$Styles$Style$Bold = {$: 'Bold'};
var author$project$Styles$Style$Dashboard = {$: 'Dashboard'};
var author$project$Styles$Style$LargeEmoji = {$: 'LargeEmoji'};
var author$project$Styles$Style$Link = {$: 'Link'};
var author$project$Styles$Style$NoPointerEvents = {$: 'NoPointerEvents'};
var author$project$Styles$Style$Okay = {$: 'Okay'};
var author$project$Styles$Style$WithError = {$: 'WithError'};
var mdgriffith$style_elements$Style$Internal$Model$Exact = F2(
	function (a, b) {
		return {$: 'Exact', a: a, b: b};
	});
var mdgriffith$style_elements$Style$prop = F2(
	function (name, val) {
		return A2(mdgriffith$style_elements$Style$Internal$Model$Exact, name, val);
	});
var author$project$Styles$Style$nonSelectable = _List_fromArray(
	[
		A2(mdgriffith$style_elements$Style$prop, 'user-select', 'none')
	]);
var mdgriffith$style_elements$Style$cursor = function (name) {
	return A2(mdgriffith$style_elements$Style$Internal$Model$Exact, 'cursor', name);
};
var mdgriffith$style_elements$Style$Internal$Model$Font = F2(
	function (a, b) {
		return {$: 'Font', a: a, b: b};
	});
var mdgriffith$style_elements$Style$Font$uppercase = A2(mdgriffith$style_elements$Style$Internal$Model$Font, 'text-transform', 'uppercase');
var mdgriffith$style_elements$Style$Font$weight = function (fontWeight) {
	return A2(
		mdgriffith$style_elements$Style$Internal$Model$Font,
		'font-weight',
		elm$core$String$fromInt(fontWeight));
};
var author$project$Styles$Style$button = _Utils_ap(
	_List_fromArray(
		[
			mdgriffith$style_elements$Style$Font$weight(600),
			mdgriffith$style_elements$Style$Font$uppercase,
			mdgriffith$style_elements$Style$cursor('pointer')
		]),
	author$project$Styles$Style$nonSelectable);
var mdgriffith$style_elements$Style$Internal$Model$RGBA = F4(
	function (a, b, c, d) {
		return {$: 'RGBA', a: a, b: b, c: c, d: d};
	});
var mdgriffith$style_elements$Style$rgba = mdgriffith$style_elements$Style$Internal$Model$RGBA;
var author$project$Styles$Style$styleElementsColor = function (color) {
	var channels = author$project$Color$toRgb(color);
	return A4(mdgriffith$style_elements$Style$rgba, channels.red / 255, channels.green / 255, channels.blue / 255, channels.alpha);
};
var mdgriffith$style_elements$Style$Internal$Model$TextColor = function (a) {
	return {$: 'TextColor', a: a};
};
var mdgriffith$style_elements$Style$Color$text = mdgriffith$style_elements$Style$Internal$Model$TextColor;
var mdgriffith$style_elements$Style$Font$size = function (i) {
	return A2(
		mdgriffith$style_elements$Style$Internal$Model$Font,
		'font-size',
		elm$core$String$fromFloat(i) + 'px');
};
var author$project$Styles$Style$dashboardButton = function (color) {
	return _Utils_ap(
		_List_fromArray(
			[
				mdgriffith$style_elements$Style$Color$text(
				author$project$Styles$Style$styleElementsColor(color)),
				mdgriffith$style_elements$Style$Font$size(11)
			]),
		author$project$Styles$Style$button);
};
var mdgriffith$style_elements$Style$Internal$Model$PseudoElement = F2(
	function (a, b) {
		return {$: 'PseudoElement', a: a, b: b};
	});
var mdgriffith$style_elements$Style$hover = function (props) {
	return A2(mdgriffith$style_elements$Style$Internal$Model$PseudoElement, ':hover', props);
};
var mdgriffith$style_elements$Style$pseudo = F2(
	function (psu, props) {
		return A2(mdgriffith$style_elements$Style$Internal$Model$PseudoElement, ':' + psu, props);
	});
var author$project$Styles$Style$activeDashboardButton = function (color) {
	return _Utils_ap(
		author$project$Styles$Style$dashboardButton(color),
		_List_fromArray(
			[
				mdgriffith$style_elements$Style$hover(
				_List_fromArray(
					[
						mdgriffith$style_elements$Style$Color$text(
						author$project$Styles$Style$styleElementsColor(
							author$project$Styles$Color$aBitLighter(color)))
					])),
				A2(
				mdgriffith$style_elements$Style$pseudo,
				'active',
				_List_fromArray(
					[
						mdgriffith$style_elements$Style$Color$text(
						author$project$Styles$Style$styleElementsColor(
							author$project$Styles$Color$lighter(color)))
					]))
			]));
};
var author$project$Styles$Color$acrylicLight = author$project$Styles$Color$acrylic(author$project$Styles$Color$lighterGrey);
var author$project$Styles$Style$acrylicBlur = function (radius) {
	var value = 'blur(' + (elm$core$String$fromFloat(radius) + 'px)');
	return _List_fromArray(
		[
			A2(mdgriffith$style_elements$Style$prop, 'backdrop-filter', value),
			A2(mdgriffith$style_elements$Style$prop, '-webkit-backdrop-filter', value)
		]);
};
var mdgriffith$style_elements$Style$Internal$Render$Value$color = function (_n0) {
	var red = _n0.a;
	var green = _n0.b;
	var blue = _n0.c;
	var alpha = _n0.d;
	return ('rgba(' + elm$core$String$fromInt(
		elm$core$Basics$round(red * 255))) + ((',' + elm$core$String$fromInt(
		elm$core$Basics$round(green * 255))) + ((',' + elm$core$String$fromInt(
		elm$core$Basics$round(blue * 255))) + (',' + (elm$core$String$fromFloat(alpha) + ')'))));
};
var mdgriffith$style_elements$Style$Color$background = function (clr) {
	return A2(
		mdgriffith$style_elements$Style$Internal$Model$Exact,
		'background-color',
		mdgriffith$style_elements$Style$Internal$Render$Value$color(clr));
};
var author$project$Styles$Style$contextMenu = _Utils_ap(
	_List_fromArray(
		[
			mdgriffith$style_elements$Style$Color$background(
			author$project$Styles$Style$styleElementsColor(author$project$Styles$Color$acrylicLight))
		]),
	_Utils_ap(
		author$project$Styles$Style$acrylicBlur(10),
		author$project$Styles$Style$nonSelectable));
var author$project$Styles$Style$noPointerEvents = A2(mdgriffith$style_elements$Style$prop, 'pointer-events', 'none !important');
var author$project$Styles$Style$textColor = author$project$Styles$Color$almostBlack;
var mdgriffith$style_elements$Style$opacity = function (o) {
	return A2(
		mdgriffith$style_elements$Style$Internal$Model$Exact,
		'opacity',
		elm$core$String$fromFloat(o));
};
var mdgriffith$style_elements$Style$Internal$Batchable$One = function (a) {
	return {$: 'One', a: a};
};
var mdgriffith$style_elements$Style$Internal$Batchable$one = mdgriffith$style_elements$Style$Internal$Batchable$One;
var mdgriffith$style_elements$Style$Internal$Model$Style = F2(
	function (a, b) {
		return {$: 'Style', a: a, b: b};
	});
var mdgriffith$style_elements$Style$style = F2(
	function (cls, props) {
		return mdgriffith$style_elements$Style$Internal$Batchable$one(
			A2(
				mdgriffith$style_elements$Style$Internal$Model$Style,
				cls,
				A2(
					elm$core$List$cons,
					A2(mdgriffith$style_elements$Style$prop, 'border-style', 'solid'),
					props)));
	});
var mdgriffith$style_elements$Style$Unguarded = {$: 'Unguarded'};
var mdgriffith$style_elements$Style$Internal$Find$style = F2(
	function (_class, elements) {
		var find = function (el) {
			if (el.$ === 'Style') {
				var cls = el.a;
				var name = el.b;
				return _Utils_eq(cls, _class) ? elm$core$Maybe$Just(name) : elm$core$Maybe$Nothing;
			} else {
				return elm$core$Maybe$Nothing;
			}
		};
		var found = elm$core$List$head(
			A2(elm$core$List$filterMap, find, elements));
		if (found.$ === 'Nothing') {
			return '';
		} else {
			var cls = found.a;
			return cls;
		}
	});
var mdgriffith$style_elements$Style$Internal$Find$variation = F3(
	function (_class, vary, elements) {
		var find = function (el) {
			if (el.$ === 'Variation') {
				var cls = el.a;
				var _var = el.b;
				var name = el.c;
				return (_Utils_eq(_class, cls) && _Utils_eq(_var, vary)) ? elm$core$Maybe$Just(name) : elm$core$Maybe$Nothing;
			} else {
				return elm$core$Maybe$Nothing;
			}
		};
		var found = elm$core$List$head(
			A2(elm$core$List$filterMap, find, elements));
		if (found.$ === 'Nothing') {
			return '';
		} else {
			var cls = found.a;
			return cls;
		}
	});
var mdgriffith$style_elements$Style$prepareSheet = function (_n0) {
	var css = _n0.a.css;
	var findable = _n0.a.findable;
	var variations = F2(
		function (_class, vs) {
			var varys = A2(
				elm$core$List$map,
				function (cls) {
					return _Utils_Tuple2(cls, true);
				},
				A2(
					elm$core$List$map,
					A2(
						elm$core$Basics$composeL,
						function (vary) {
							return A3(mdgriffith$style_elements$Style$Internal$Find$variation, _class, vary, findable);
						},
						elm$core$Tuple$first),
					A2(elm$core$List$filter, elm$core$Tuple$second, vs)));
			var parent = A2(mdgriffith$style_elements$Style$Internal$Find$style, _class, findable);
			return A2(
				elm$core$List$cons,
				_Utils_Tuple2(parent, true),
				varys);
		});
	return {
		css: css,
		style: function (_class) {
			return A2(mdgriffith$style_elements$Style$Internal$Find$style, _class, findable);
		},
		variations: F2(
			function (_class, varys) {
				return A2(variations, _class, varys);
			})
	};
};
var mdgriffith$style_elements$Style$Internal$Batchable$toList = function (batchables) {
	var flatten = function (batchToFlatten) {
		switch (batchToFlatten.$) {
			case 'One':
				var thing = batchToFlatten.a;
				return _List_fromArray(
					[thing]);
			case 'Many':
				var things = batchToFlatten.a;
				return things;
			default:
				var embedded = batchToFlatten.a;
				return mdgriffith$style_elements$Style$Internal$Batchable$toList(embedded);
		}
	};
	return A2(elm$core$List$concatMap, flatten, batchables);
};
var mdgriffith$style_elements$Style$Internal$Intermediate$Rendered = function (a) {
	return {$: 'Rendered', a: a};
};
var mdgriffith$style_elements$Style$Internal$Selector$getFindable = function (find) {
	getFindable:
	while (true) {
		switch (find.$) {
			case 'Select':
				var findable = find.b;
				return _List_fromArray(
					[findable]);
			case 'SelectChild':
				var selector = find.a;
				var $temp$find = selector;
				find = $temp$find;
				continue getFindable;
			case 'Stack':
				var selectors = find.a;
				return A2(
					elm$core$Maybe$withDefault,
					_List_Nil,
					A2(
						elm$core$Maybe$map,
						function (x) {
							return _List_fromArray(
								[x]);
						},
						elm$core$List$head(
							elm$core$List$reverse(
								A2(elm$core$List$concatMap, mdgriffith$style_elements$Style$Internal$Selector$getFindable, selectors)))));
			default:
				return _List_Nil;
		}
	}
};
var mdgriffith$style_elements$Style$Internal$Intermediate$asFindable = function (intermediate) {
	var findableProp = function (prop) {
		switch (prop.$) {
			case 'SubClass':
				var cls = prop.a;
				return mdgriffith$style_elements$Style$Internal$Intermediate$asFindable(cls);
			case 'PropsAndSub':
				var cls = prop.b;
				return mdgriffith$style_elements$Style$Internal$Intermediate$asFindable(cls);
			default:
				return _List_Nil;
		}
	};
	if (intermediate.$ === 'Class') {
		var classRule = intermediate.a;
		return _Utils_ap(
			mdgriffith$style_elements$Style$Internal$Selector$getFindable(classRule.selector),
			A2(elm$core$List$concatMap, findableProp, classRule.props));
	} else {
		return _List_Nil;
	}
};
var mdgriffith$style_elements$Style$Internal$Intermediate$RenderableClass = F2(
	function (a, b) {
		return {$: 'RenderableClass', a: a, b: b};
	});
var mdgriffith$style_elements$Style$Internal$Intermediate$RenderableFree = function (a) {
	return {$: 'RenderableFree', a: a};
};
var mdgriffith$style_elements$Style$Internal$Intermediate$RenderableMedia = F3(
	function (a, b, c) {
		return {$: 'RenderableMedia', a: a, b: b, c: c};
	});
var mdgriffith$style_elements$Style$Internal$Selector$render = F2(
	function (maybeGuard, selector) {
		var spacer = function (sel) {
			if (sel.$ === 'Pseudo') {
				return '';
			} else {
				return ' ';
			}
		};
		var renderAndSpace = F2(
			function (i, sel) {
				return (!i) ? A2(mdgriffith$style_elements$Style$Internal$Selector$render, maybeGuard, sel) : _Utils_ap(
					spacer(sel),
					A2(mdgriffith$style_elements$Style$Internal$Selector$render, maybeGuard, sel));
			});
		var applyGuard = function (str) {
			if (maybeGuard.$ === 'Nothing') {
				return str;
			} else {
				var g = maybeGuard.a;
				return str + ('--' + g);
			}
		};
		switch (selector.$) {
			case 'Select':
				var single = selector.a;
				return '.style-elements .' + applyGuard(single);
			case 'SelectChild':
				var selectChild = selector.a;
				return '> ' + A2(mdgriffith$style_elements$Style$Internal$Selector$render, maybeGuard, selectChild);
			case 'Free':
				var single = selector.a;
				return single;
			case 'Pseudo':
				var psu = selector.a;
				return psu;
			default:
				var sels = selector.a;
				return elm$core$String$concat(
					A2(elm$core$List$indexedMap, renderAndSpace, sels));
		}
	});
var mdgriffith$style_elements$Style$Internal$Intermediate$makeRenderable = function (cls) {
	var renderableProps = F2(
		function (prop, _n4) {
			var rendered = _n4.a;
			var subEls = _n4.b;
			switch (prop.$) {
				case 'Props':
					var ps = prop.a;
					return _Utils_Tuple2(
						_Utils_ap(rendered, ps),
						subEls);
				case 'SubClass':
					var embedded = prop.a;
					return _Utils_Tuple2(
						rendered,
						_Utils_ap(
							subEls,
							mdgriffith$style_elements$Style$Internal$Intermediate$makeRenderable(embedded)));
				case 'PropsAndSub':
					var ps = prop.a;
					var embedded = prop.b;
					return _Utils_Tuple2(
						_Utils_ap(rendered, ps),
						_Utils_ap(
							subEls,
							mdgriffith$style_elements$Style$Internal$Intermediate$makeRenderable(embedded)));
				default:
					return _Utils_Tuple2(rendered, subEls);
			}
		});
	switch (cls.$) {
		case 'Class':
			var classRule = cls.a;
			var _n1 = A3(
				elm$core$List$foldl,
				renderableProps,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				classRule.props);
			var rendered = _n1.a;
			var subelements = _n1.b;
			return A2(
				elm$core$List$cons,
				A2(
					mdgriffith$style_elements$Style$Internal$Intermediate$RenderableClass,
					A2(mdgriffith$style_elements$Style$Internal$Selector$render, elm$core$Maybe$Nothing, classRule.selector),
					rendered),
				subelements);
		case 'Media':
			var mediaRule = cls.a;
			var _n2 = A3(
				elm$core$List$foldl,
				renderableProps,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				mediaRule.props);
			var rendered = _n2.a;
			var subelements = _n2.b;
			return A2(
				elm$core$List$cons,
				A3(
					mdgriffith$style_elements$Style$Internal$Intermediate$RenderableMedia,
					mediaRule.query,
					A2(mdgriffith$style_elements$Style$Internal$Selector$render, elm$core$Maybe$Nothing, mediaRule.selector),
					rendered),
				subelements);
		default:
			var str = cls.a;
			return _List_fromArray(
				[
					mdgriffith$style_elements$Style$Internal$Intermediate$RenderableFree(str)
				]);
	}
};
var mdgriffith$style_elements$Style$Internal$Render$Css$brace = F2(
	function (i, str) {
		return ' {\n' + (str + ('\n' + (A2(elm$core$String$repeat, i, ' ') + '}')));
	});
var mdgriffith$style_elements$Style$Internal$Render$Css$prop = F2(
	function (i, _n0) {
		var name = _n0.a;
		var value = _n0.b;
		return A2(elm$core$String$repeat, i, ' ') + (name + (': ' + (value + ';')));
	});
var mdgriffith$style_elements$Style$Internal$Intermediate$render = function (renderable) {
	switch (renderable.$) {
		case 'RenderableClass':
			var selector = renderable.a;
			var styleProps = renderable.b;
			return selector + (A2(
				mdgriffith$style_elements$Style$Internal$Render$Css$brace,
				0,
				A2(
					elm$core$String$join,
					'\n',
					A2(
						elm$core$List$map,
						mdgriffith$style_elements$Style$Internal$Render$Css$prop(2),
						styleProps))) + '\n');
		case 'RenderableMedia':
			var query = renderable.a;
			var selector = renderable.b;
			var styleProps = renderable.c;
			return _Utils_ap(
				query,
				A2(
					mdgriffith$style_elements$Style$Internal$Render$Css$brace,
					0,
					'  ' + (selector + A2(
						mdgriffith$style_elements$Style$Internal$Render$Css$brace,
						2,
						A2(
							elm$core$String$join,
							'\n',
							A2(
								elm$core$List$map,
								mdgriffith$style_elements$Style$Internal$Render$Css$prop(4),
								styleProps))))));
		default:
			var str = renderable.a;
			return str;
	}
};
var mdgriffith$style_elements$Style$Internal$Intermediate$finalize = function (intermediates) {
	var finalizeCss = function (cls) {
		return A2(
			elm$core$String$join,
			'\n',
			A2(
				elm$core$List$map,
				mdgriffith$style_elements$Style$Internal$Intermediate$render,
				mdgriffith$style_elements$Style$Internal$Intermediate$makeRenderable(cls)));
	};
	return mdgriffith$style_elements$Style$Internal$Intermediate$Rendered(
		{
			css: A2(
				elm$core$String$join,
				'\n',
				A2(elm$core$List$map, finalizeCss, intermediates)),
			findable: A2(elm$core$List$concatMap, mdgriffith$style_elements$Style$Internal$Intermediate$asFindable, intermediates)
		});
};
var mdgriffith$style_elements$Style$Internal$Model$Filters = function (a) {
	return {$: 'Filters', a: a};
};
var mdgriffith$style_elements$Style$Internal$Model$Rotate = function (a) {
	return {$: 'Rotate', a: a};
};
var mdgriffith$style_elements$Style$Internal$Model$RotateAround = F4(
	function (a, b, c, d) {
		return {$: 'RotateAround', a: a, b: b, c: c, d: d};
	});
var mdgriffith$style_elements$Style$Internal$Model$Scale = F3(
	function (a, b, c) {
		return {$: 'Scale', a: a, b: b, c: c};
	});
var mdgriffith$style_elements$Style$Internal$Model$Shadows = function (a) {
	return {$: 'Shadows', a: a};
};
var mdgriffith$style_elements$Style$Internal$Model$Transform = function (a) {
	return {$: 'Transform', a: a};
};
var mdgriffith$style_elements$Style$Internal$Model$Translate = F3(
	function (a, b, c) {
		return {$: 'Translate', a: a, b: b, c: c};
	});
var mdgriffith$style_elements$Style$Internal$Render$preprocess = function (style) {
	if (style.$ === 'Style') {
		var className = style.a;
		var styleProps = style.b;
		var visible = function (prop) {
			if (prop.$ === 'Visibility') {
				return true;
			} else {
				return false;
			}
		};
		var shadows = function (prop) {
			if (prop.$ === 'Shadows') {
				return true;
			} else {
				return false;
			}
		};
		var prioritize = F2(
			function (isPriority, priorityProps) {
				var _n9 = A2(elm$core$List$partition, isPriority, priorityProps);
				var high = _n9.a;
				var low = _n9.b;
				return _Utils_ap(low, high);
			});
		var overridePrevious = F2(
			function (overridable, overrideProps) {
				var eliminatePrevious = F2(
					function (prop, _n8) {
						var existing = _n8.a;
						var overridden = _n8.b;
						return (overridable(prop) && overridden) ? _Utils_Tuple2(existing, overridden) : ((overridable(prop) && (!overridden)) ? _Utils_Tuple2(
							A2(elm$core$List$cons, prop, existing),
							true) : _Utils_Tuple2(
							A2(elm$core$List$cons, prop, existing),
							overridden));
					});
				return A3(
					elm$core$List$foldr,
					eliminatePrevious,
					_Utils_Tuple2(_List_Nil, false),
					overrideProps).a;
			});
		var mergeTransforms = function (mergeableProps) {
			var setIfNothing = F2(
				function (x, maybeX) {
					if (maybeX.$ === 'Nothing') {
						return elm$core$Maybe$Just(x);
					} else {
						var a = maybeX;
						return a;
					}
				});
			var gatherTransformStack = F2(
				function (transformation, gathered) {
					switch (transformation.$) {
						case 'Translate':
							var x = transformation.a;
							var y = transformation.b;
							var z = transformation.c;
							return _Utils_update(
								gathered,
								{
									translate: A2(
										setIfNothing,
										A3(mdgriffith$style_elements$Style$Internal$Model$Translate, x, y, z),
										gathered.translate)
								});
						case 'Rotate':
							var a = transformation.a;
							return _Utils_update(
								gathered,
								{
									rotate: A2(
										setIfNothing,
										mdgriffith$style_elements$Style$Internal$Model$Rotate(a),
										gathered.rotate)
								});
						case 'RotateAround':
							var x = transformation.a;
							var y = transformation.b;
							var z = transformation.c;
							var angle = transformation.d;
							return _Utils_update(
								gathered,
								{
									rotate: A2(
										setIfNothing,
										A4(mdgriffith$style_elements$Style$Internal$Model$RotateAround, x, y, z, angle),
										gathered.rotate)
								});
						default:
							var x = transformation.a;
							var y = transformation.b;
							var z = transformation.c;
							return _Utils_update(
								gathered,
								{
									scale: A2(
										setIfNothing,
										A3(mdgriffith$style_elements$Style$Internal$Model$Scale, x, y, z),
										gathered.scale)
								});
					}
				});
			var gatherTransforms = F2(
				function (prop, _n5) {
					var transforms = _n5.a;
					var gatheredProps = _n5.b;
					if (prop.$ === 'Transform') {
						var stack = prop.a;
						return _Utils_Tuple2(
							A3(elm$core$List$foldr, gatherTransformStack, transforms, stack),
							gatheredProps);
					} else {
						return _Utils_Tuple2(
							transforms,
							A2(elm$core$List$cons, prop, gatheredProps));
					}
				});
			var applyTransforms = function (_n3) {
				var rotate = _n3.a.rotate;
				var scale = _n3.a.scale;
				var translate = _n3.a.translate;
				var gathered = _n3.b;
				var transformations = A2(
					elm$core$List$filterMap,
					elm$core$Basics$identity,
					_List_fromArray(
						[translate, rotate, scale]));
				return elm$core$List$isEmpty(transformations) ? gathered : A2(
					elm$core$List$cons,
					mdgriffith$style_elements$Style$Internal$Model$Transform(transformations),
					gathered);
			};
			return applyTransforms(
				A3(
					elm$core$List$foldr,
					gatherTransforms,
					_Utils_Tuple2(
						{rotate: elm$core$Maybe$Nothing, scale: elm$core$Maybe$Nothing, translate: elm$core$Maybe$Nothing},
						_List_Nil),
					mergeableProps));
		};
		var mergeShadowsAndFilters = function (shadowsAndFilters) {
			var gather = F2(
				function (prop, existing) {
					switch (prop.$) {
						case 'Filters':
							var fs = prop.a;
							return _Utils_update(
								existing,
								{
									filters: _Utils_ap(fs, existing.filters)
								});
						case 'Shadows':
							var ss = prop.a;
							return _Utils_update(
								existing,
								{
									shadows: _Utils_ap(ss, existing.shadows)
								});
						default:
							return _Utils_update(
								existing,
								{
									others: A2(elm$core$List$cons, prop, existing.others)
								});
					}
				});
			var combine = function (combineable) {
				return A2(
					elm$core$List$cons,
					mdgriffith$style_elements$Style$Internal$Model$Filters(combineable.filters),
					A2(
						elm$core$List$cons,
						mdgriffith$style_elements$Style$Internal$Model$Shadows(combineable.shadows),
						combineable.others));
			};
			return combine(
				A3(
					elm$core$List$foldr,
					gather,
					{filters: _List_Nil, others: _List_Nil, shadows: _List_Nil},
					shadowsAndFilters));
		};
		var processed = mergeTransforms(
			mergeShadowsAndFilters(
				A2(
					overridePrevious,
					shadows,
					A2(
						prioritize,
						shadows,
						A2(
							overridePrevious,
							visible,
							A2(prioritize, visible, styleProps))))));
		var dropShadow = function (_n1) {
			var shade = _n1.a;
			return shade.kind === 'drop';
		};
		return A2(mdgriffith$style_elements$Style$Internal$Model$Style, className, processed);
	} else {
		return style;
	}
};
var mdgriffith$style_elements$Style$Internal$Intermediate$Class = function (a) {
	return {$: 'Class', a: a};
};
var mdgriffith$style_elements$Style$Internal$Intermediate$Free = function (a) {
	return {$: 'Free', a: a};
};
var mdgriffith$style_elements$Style$Internal$Intermediate$Media = function (a) {
	return {$: 'Media', a: a};
};
var mdgriffith$style_elements$Style$Internal$Intermediate$SubClass = function (a) {
	return {$: 'SubClass', a: a};
};
var mdgriffith$style_elements$Style$Internal$Find$Style = F2(
	function (a, b) {
		return {$: 'Style', a: a, b: b};
	});
var mdgriffith$style_elements$Style$Internal$Find$Variation = F3(
	function (a, b, c) {
		return {$: 'Variation', a: a, b: b, c: c};
	});
var mdgriffith$style_elements$Style$Internal$Selector$Select = F2(
	function (a, b) {
		return {$: 'Select', a: a, b: b};
	});
var mdgriffith$style_elements$Style$Internal$Selector$SelectChild = function (a) {
	return {$: 'SelectChild', a: a};
};
var mdgriffith$style_elements$Style$Internal$Selector$Stack = function (a) {
	return {$: 'Stack', a: a};
};
var mdgriffith$style_elements$Style$Internal$Selector$guard = F2(
	function (guardingString, selector) {
		var addGuard = function (str) {
			return str + ('g' + guardingString);
		};
		var onFindable = function (findable) {
			if (findable.$ === 'Style') {
				var _class = findable.a;
				var name = findable.b;
				return A2(
					mdgriffith$style_elements$Style$Internal$Find$Style,
					_class,
					addGuard(name));
			} else {
				var _class = findable.a;
				var variation = findable.b;
				var name = findable.c;
				return A3(
					mdgriffith$style_elements$Style$Internal$Find$Variation,
					_class,
					variation,
					addGuard(name));
			}
		};
		var onSelector = function (sel) {
			switch (sel.$) {
				case 'Select':
					var rendered = sel.a;
					var findable = sel.b;
					return A2(
						mdgriffith$style_elements$Style$Internal$Selector$Select,
						addGuard(rendered),
						onFindable(findable));
				case 'SelectChild':
					var selectChild = sel.a;
					return mdgriffith$style_elements$Style$Internal$Selector$SelectChild(
						onSelector(selectChild));
				case 'Stack':
					var selectors = sel.a;
					return mdgriffith$style_elements$Style$Internal$Selector$Stack(
						A2(elm$core$List$map, onSelector, selectors));
				default:
					var x = sel;
					return x;
			}
		};
		return onSelector(selector);
	});
var mdgriffith$style_elements$Style$Internal$Intermediate$applyGuard = F2(
	function (guardString, _class) {
		var guardProp = function (prop) {
			if (prop.$ === 'SubClass') {
				var sc = prop.a;
				return mdgriffith$style_elements$Style$Internal$Intermediate$SubClass(
					A2(mdgriffith$style_elements$Style$Internal$Intermediate$applyGuard, guardString, sc));
			} else {
				var x = prop;
				return x;
			}
		};
		switch (_class.$) {
			case 'Class':
				var cls = _class.a;
				return mdgriffith$style_elements$Style$Internal$Intermediate$Class(
					{
						props: A2(elm$core$List$map, guardProp, cls.props),
						selector: A2(mdgriffith$style_elements$Style$Internal$Selector$guard, guardString, cls.selector)
					});
			case 'Media':
				var media = _class.a;
				return mdgriffith$style_elements$Style$Internal$Intermediate$Media(
					{
						props: A2(elm$core$List$map, guardProp, media.props),
						query: media.query,
						selector: A2(mdgriffith$style_elements$Style$Internal$Selector$guard, guardString, media.selector)
					});
			default:
				var x = _class;
				return x;
		}
	});
var mdgriffith$style_elements$Style$Internal$Intermediate$calculateGuard = function (_class) {
	var propToString = function (_n2) {
		var x = _n2.a;
		var y = _n2.b;
		return _Utils_ap(x, y);
	};
	var asString = function (prop) {
		switch (prop.$) {
			case 'Props':
				var ps = prop.a;
				return elm$core$String$concat(
					A2(elm$core$List$map, propToString, ps));
			case 'SubClass':
				var embedded = prop.a;
				return mdgriffith$style_elements$Style$Internal$Intermediate$calculateGuard(embedded);
			case 'PropsAndSub':
				var ps = prop.a;
				var embedded = prop.b;
				return _Utils_ap(
					elm$core$String$concat(
						A2(elm$core$List$map, propToString, ps)),
					mdgriffith$style_elements$Style$Internal$Intermediate$calculateGuard(embedded));
			default:
				return '';
		}
	};
	switch (_class.$) {
		case 'Class':
			var classRule = _class.a;
			return elm$core$String$concat(
				A2(elm$core$List$map, asString, classRule.props));
		case 'Media':
			var mediaRule = _class.a;
			return elm$core$String$concat(
				A2(elm$core$List$map, asString, mediaRule.props));
		default:
			return '';
	}
};
var Skinney$murmur3$Murmur3$HashData = F4(
	function (shift, seed, hash, charsProcessed) {
		return {charsProcessed: charsProcessed, hash: hash, seed: seed, shift: shift};
	});
var Skinney$murmur3$Murmur3$c1 = 3432918353;
var Skinney$murmur3$Murmur3$c2 = 461845907;
var Skinney$murmur3$Murmur3$multiplyBy = F2(
	function (b, a) {
		return ((a & 65535) * b) + ((((a >>> 16) * b) & 65535) << 16);
	});
var elm$core$Bitwise$or = _Bitwise_or;
var Skinney$murmur3$Murmur3$rotlBy = F2(
	function (b, a) {
		return (a << b) | (a >>> (32 - b));
	});
var Skinney$murmur3$Murmur3$finalize = function (data) {
	var acc = data.hash ? (data.seed ^ A2(
		Skinney$murmur3$Murmur3$multiplyBy,
		Skinney$murmur3$Murmur3$c2,
		A2(
			Skinney$murmur3$Murmur3$rotlBy,
			15,
			A2(Skinney$murmur3$Murmur3$multiplyBy, Skinney$murmur3$Murmur3$c1, data.hash)))) : data.seed;
	var h0 = acc ^ data.charsProcessed;
	var h1 = A2(Skinney$murmur3$Murmur3$multiplyBy, 2246822507, h0 ^ (h0 >>> 16));
	var h2 = A2(Skinney$murmur3$Murmur3$multiplyBy, 3266489909, h1 ^ (h1 >>> 13));
	return (h2 ^ (h2 >>> 16)) >>> 0;
};
var Skinney$murmur3$Murmur3$mix = F2(
	function (h1, k1) {
		return A2(
			Skinney$murmur3$Murmur3$multiplyBy,
			5,
			A2(
				Skinney$murmur3$Murmur3$rotlBy,
				13,
				h1 ^ A2(
					Skinney$murmur3$Murmur3$multiplyBy,
					Skinney$murmur3$Murmur3$c2,
					A2(
						Skinney$murmur3$Murmur3$rotlBy,
						15,
						A2(Skinney$murmur3$Murmur3$multiplyBy, Skinney$murmur3$Murmur3$c1, k1))))) + 3864292196;
	});
var Skinney$murmur3$Murmur3$hashFold = F2(
	function (c, data) {
		var res = data.hash | ((255 & elm$core$Char$toCode(c)) << data.shift);
		var _n0 = data.shift;
		if (_n0 === 24) {
			return {
				charsProcessed: data.charsProcessed + 1,
				hash: 0,
				seed: A2(Skinney$murmur3$Murmur3$mix, data.seed, res),
				shift: 0
			};
		} else {
			return {charsProcessed: data.charsProcessed + 1, hash: res, seed: data.seed, shift: data.shift + 8};
		}
	});
var elm$core$String$foldl = _String_foldl;
var Skinney$murmur3$Murmur3$hashString = F2(
	function (seed, str) {
		return Skinney$murmur3$Murmur3$finalize(
			A3(
				elm$core$String$foldl,
				Skinney$murmur3$Murmur3$hashFold,
				A4(Skinney$murmur3$Murmur3$HashData, 0, seed, 0, 0),
				str));
	});
var mdgriffith$style_elements$Style$Internal$Intermediate$hash = function (value) {
	return elm$core$String$fromInt(
		A2(Skinney$murmur3$Murmur3$hashString, 8675309, value));
};
var mdgriffith$style_elements$Style$Internal$Intermediate$guard = function (_class) {
	return A2(
		mdgriffith$style_elements$Style$Internal$Intermediate$applyGuard,
		mdgriffith$style_elements$Style$Internal$Intermediate$hash(
			mdgriffith$style_elements$Style$Internal$Intermediate$calculateGuard(_class)),
		_class);
};
var mdgriffith$style_elements$Style$Internal$Render$class = F2(
	function (name, props) {
		var renderedProps = A2(
			elm$core$String$join,
			'\n',
			A2(
				elm$core$List$map,
				mdgriffith$style_elements$Style$Internal$Render$Css$prop(2),
				props));
		return '.' + (name + A2(mdgriffith$style_elements$Style$Internal$Render$Css$brace, 0, renderedProps));
	});
var mdgriffith$style_elements$Style$Internal$Intermediate$PropsAndSub = F2(
	function (a, b) {
		return {$: 'PropsAndSub', a: a, b: b};
	});
var mdgriffith$style_elements$Style$Internal$Intermediate$asMediaQuery = F2(
	function (query, prop) {
		var classAsMediaQuery = function (cls) {
			if (cls.$ === 'Class') {
				var classRule = cls.a;
				return mdgriffith$style_elements$Style$Internal$Intermediate$Media(
					{props: classRule.props, query: query, selector: classRule.selector});
			} else {
				var x = cls;
				return x;
			}
		};
		switch (prop.$) {
			case 'SubClass':
				var cls = prop.a;
				return mdgriffith$style_elements$Style$Internal$Intermediate$SubClass(
					classAsMediaQuery(cls));
			case 'PropsAndSub':
				var x = prop.a;
				var cls = prop.b;
				return A2(
					mdgriffith$style_elements$Style$Internal$Intermediate$PropsAndSub,
					x,
					classAsMediaQuery(cls));
			default:
				var x = prop;
				return x;
		}
	});
var mdgriffith$style_elements$Style$Internal$Intermediate$getProps = function (prop) {
	_n0$4:
	while (true) {
		switch (prop.$) {
			case 'Props':
				var rendered = prop.a;
				return rendered;
			case 'SubClass':
				if (prop.a.$ === 'Class') {
					var myClass = prop.a.a;
					return A2(elm$core$List$concatMap, mdgriffith$style_elements$Style$Internal$Intermediate$getProps, myClass.props);
				} else {
					break _n0$4;
				}
			case 'PropsAndSub':
				if (prop.b.$ === 'Class') {
					var rendered = prop.a;
					var myClass = prop.b.a;
					return _Utils_ap(
						rendered,
						A2(elm$core$List$concatMap, mdgriffith$style_elements$Style$Internal$Intermediate$getProps, myClass.props));
				} else {
					break _n0$4;
				}
			default:
				return _List_Nil;
		}
	}
	return _List_Nil;
};
var mdgriffith$style_elements$Style$Internal$Intermediate$Props = function (a) {
	return {$: 'Props', a: a};
};
var mdgriffith$style_elements$Style$Internal$Intermediate$props = mdgriffith$style_elements$Style$Internal$Intermediate$Props;
var mdgriffith$style_elements$Style$Internal$Render$Property$background = function (prop) {
	var renderStep = function (step) {
		switch (step.$) {
			case 'ColorStep':
				var color = step.a;
				return mdgriffith$style_elements$Style$Internal$Render$Value$color(color);
			case 'PercentStep':
				var color = step.a;
				var percent = step.b;
				return mdgriffith$style_elements$Style$Internal$Render$Value$color(color) + (' ' + (elm$core$String$fromFloat(percent) + '%'));
			default:
				var color = step.a;
				var percent = step.b;
				return mdgriffith$style_elements$Style$Internal$Render$Value$color(color) + (' ' + (elm$core$String$fromFloat(percent) + 'px'));
		}
	};
	var directionName = function (dir) {
		switch (dir.$) {
			case 'ToUp':
				return 'to top';
			case 'ToDown':
				return 'to bottom';
			case 'ToRight':
				return 'to right';
			case 'ToTopRight':
				return 'to top right';
			case 'ToBottomRight':
				return 'to bottom right';
			case 'ToLeft':
				return 'to left';
			case 'ToTopLeft':
				return 'to top left';
			case 'ToBottomLeft':
				return 'to bottom left';
			default:
				var angle = dir.a;
				return elm$core$String$fromFloat(angle) + 'rad';
		}
	};
	switch (prop.$) {
		case 'BackgroundElement':
			var name = prop.a;
			var val = prop.b;
			return _List_fromArray(
				[
					_Utils_Tuple2(name, val)
				]);
		case 'BackgroundImage':
			var image = prop.a;
			return _List_fromArray(
				[
					_Utils_Tuple2('background-image', 'url(' + (image.src + ')')),
					_Utils_Tuple2(
					'background-position',
					elm$core$String$fromFloat(image.position.a) + ('px ' + (elm$core$String$fromFloat(image.position.b) + 'px'))),
					_Utils_Tuple2(
					'background-repeat',
					function () {
						var _n1 = image.repeat;
						switch (_n1.$) {
							case 'RepeatX':
								return 'repeat-x';
							case 'RepeatY':
								return 'repeat-y';
							case 'Repeat':
								return 'repeat';
							case 'Space':
								return 'space';
							case 'Round':
								return 'round';
							default:
								return 'no-repeat';
						}
					}()),
					_Utils_Tuple2(
					'background-size',
					function () {
						var _n2 = image.size;
						switch (_n2.$) {
							case 'Contain':
								return 'contain';
							case 'Cover':
								return 'cover';
							case 'BackgroundWidth':
								var width = _n2.a;
								return mdgriffith$style_elements$Style$Internal$Render$Value$length(width) + ' auto';
							case 'BackgroundHeight':
								var height = _n2.a;
								return 'auto ' + mdgriffith$style_elements$Style$Internal$Render$Value$length(height);
							default:
								var width = _n2.a.width;
								var height = _n2.a.height;
								return mdgriffith$style_elements$Style$Internal$Render$Value$length(width) + (' ' + mdgriffith$style_elements$Style$Internal$Render$Value$length(height));
						}
					}())
				]);
		default:
			var dir = prop.a;
			var steps = prop.b;
			return _List_fromArray(
				[
					_Utils_Tuple2(
					'background-image',
					'linear-gradient(' + (A2(
						elm$core$String$join,
						', ',
						A2(
							elm$core$List$cons,
							directionName(dir),
							A2(elm$core$List$map, renderStep, steps))) + ')'))
				]);
	}
};
var mdgriffith$style_elements$Style$Internal$Model$ShadowModel = function (a) {
	return {$: 'ShadowModel', a: a};
};
var mdgriffith$style_elements$Style$Internal$Render$Value$shadow = function (_n0) {
	var shadowModel = _n0.a;
	return A2(
		elm$core$String$join,
		' ',
		A2(
			elm$core$List$filterMap,
			elm$core$Basics$identity,
			_List_fromArray(
				[
					(shadowModel.kind === 'inset') ? elm$core$Maybe$Just('inset') : elm$core$Maybe$Nothing,
					elm$core$Maybe$Just(
					elm$core$String$fromFloat(shadowModel.offset.a) + 'px'),
					elm$core$Maybe$Just(
					elm$core$String$fromFloat(shadowModel.offset.b) + 'px'),
					elm$core$Maybe$Just(
					elm$core$String$fromFloat(shadowModel.blur) + 'px'),
					((shadowModel.kind === 'text') || (shadowModel.kind === 'drop')) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(
					elm$core$String$fromFloat(shadowModel.size) + 'px'),
					elm$core$Maybe$Just(
					mdgriffith$style_elements$Style$Internal$Render$Value$color(shadowModel.color))
				])));
};
var mdgriffith$style_elements$Style$Internal$Render$Property$filters = function (myFilters) {
	var filterName = function (filtr) {
		switch (filtr.$) {
			case 'FilterUrl':
				var url = filtr.a;
				return 'url(' + (url + ')');
			case 'Blur':
				var x = filtr.a;
				return 'blur(' + (elm$core$String$fromFloat(x) + 'px)');
			case 'Brightness':
				var x = filtr.a;
				return 'brightness(' + (elm$core$String$fromFloat(x) + '%)');
			case 'Contrast':
				var x = filtr.a;
				return 'contrast(' + (elm$core$String$fromFloat(x) + '%)');
			case 'Grayscale':
				var x = filtr.a;
				return 'grayscale(' + (elm$core$String$fromFloat(x) + '%)');
			case 'HueRotate':
				var x = filtr.a;
				return 'hueRotate(' + (elm$core$String$fromFloat(x) + 'deg)');
			case 'Invert':
				var x = filtr.a;
				return 'invert(' + (elm$core$String$fromFloat(x) + '%)');
			case 'OpacityFilter':
				var x = filtr.a;
				return 'opacity(' + (elm$core$String$fromFloat(x) + '%)');
			case 'Saturate':
				var x = filtr.a;
				return 'saturate(' + (elm$core$String$fromFloat(x) + '%)');
			case 'Sepia':
				var x = filtr.a;
				return 'sepia(' + (elm$core$String$fromFloat(x) + '%)');
			default:
				var dropShadow = filtr.a;
				var shadowModel = mdgriffith$style_elements$Style$Internal$Model$ShadowModel(
					{blur: dropShadow.blur, color: dropShadow.color, kind: 'drop', offset: dropShadow.offset, size: dropShadow.size});
				return 'drop-shadow(' + (mdgriffith$style_elements$Style$Internal$Render$Value$shadow(shadowModel) + ')');
		}
	};
	return (!elm$core$List$length(myFilters)) ? _List_Nil : _List_fromArray(
		[
			_Utils_Tuple2(
			'filter',
			A2(
				elm$core$String$join,
				' ',
				A2(elm$core$List$map, filterName, myFilters)))
		]);
};
var mdgriffith$style_elements$Style$Internal$Render$Property$direction = function (dir) {
	switch (dir.$) {
		case 'GoRight':
			return _Utils_Tuple2('flex-direction', 'row');
		case 'GoLeft':
			return _Utils_Tuple2('flex-direction', 'row-reverse');
		case 'Down':
			return _Utils_Tuple2('flex-direction', 'column');
		default:
			return _Utils_Tuple2('flex-direction', 'column-reverse');
	}
};
var mdgriffith$style_elements$Style$Internal$Render$Property$flexbox = F2(
	function (dir, el) {
		switch (el.$) {
			case 'Wrap':
				var wrap = el.a;
				return wrap ? _Utils_Tuple2('flex-wrap', 'wrap') : _Utils_Tuple2('flex-wrap', 'nowrap');
			case 'Horz':
				var horizontal = el.a;
				switch (dir.$) {
					case 'GoRight':
						switch (horizontal.$) {
							case 'Other':
								if (horizontal.a.$ === 'Left') {
									var _n3 = horizontal.a;
									return _Utils_Tuple2('justify-content', 'flex-start');
								} else {
									var _n4 = horizontal.a;
									return _Utils_Tuple2('justify-content', 'flex-end');
								}
							case 'Center':
								return _Utils_Tuple2('justify-content', 'center');
							case 'Justify':
								return _Utils_Tuple2('justify-content', 'space-between');
							default:
								return _Utils_Tuple2('justify-content', 'space-between');
						}
					case 'GoLeft':
						switch (horizontal.$) {
							case 'Other':
								if (horizontal.a.$ === 'Left') {
									var _n6 = horizontal.a;
									return _Utils_Tuple2('justify-content', 'flex-end');
								} else {
									var _n7 = horizontal.a;
									return _Utils_Tuple2('justify-content', 'flex-start');
								}
							case 'Center':
								return _Utils_Tuple2('justify-content', 'center');
							case 'Justify':
								return _Utils_Tuple2('justify-content', 'space-between');
							default:
								return _Utils_Tuple2('justify-content', 'space-between');
						}
					case 'Down':
						switch (horizontal.$) {
							case 'Other':
								if (horizontal.a.$ === 'Left') {
									var _n9 = horizontal.a;
									return _Utils_Tuple2('align-items', 'flex-start');
								} else {
									var _n10 = horizontal.a;
									return _Utils_Tuple2('align-items', 'flex-end');
								}
							case 'Center':
								return _Utils_Tuple2('align-items', 'center');
							case 'Justify':
								return _Utils_Tuple2('align-items', 'Justify');
							default:
								return _Utils_Tuple2('align-items', 'Justify');
						}
					default:
						switch (horizontal.$) {
							case 'Other':
								if (horizontal.a.$ === 'Left') {
									var _n12 = horizontal.a;
									return _Utils_Tuple2('align-items', 'flex-start');
								} else {
									var _n13 = horizontal.a;
									return _Utils_Tuple2('align-items', 'flex-end');
								}
							case 'Center':
								return _Utils_Tuple2('align-items', 'center');
							case 'Justify':
								return _Utils_Tuple2('align-items', 'Justify');
							default:
								return _Utils_Tuple2('align-items', 'Justify');
						}
				}
			default:
				var vertical = el.a;
				switch (dir.$) {
					case 'GoRight':
						switch (vertical.$) {
							case 'Other':
								if (vertical.a.$ === 'Top') {
									var _n16 = vertical.a;
									return _Utils_Tuple2('align-items', 'flex-start');
								} else {
									var _n17 = vertical.a;
									return _Utils_Tuple2('align-items', 'flex-end');
								}
							case 'Center':
								return _Utils_Tuple2('align-items', 'center');
							case 'Justify':
								return _Utils_Tuple2('align-items', 'Justify');
							default:
								return _Utils_Tuple2('align-items', 'Justify');
						}
					case 'GoLeft':
						switch (vertical.$) {
							case 'Other':
								if (vertical.a.$ === 'Top') {
									var _n19 = vertical.a;
									return _Utils_Tuple2('align-items', 'flex-start');
								} else {
									var _n20 = vertical.a;
									return _Utils_Tuple2('align-items', 'flex-end');
								}
							case 'Center':
								return _Utils_Tuple2('align-items', 'center');
							case 'Justify':
								return _Utils_Tuple2('align-items', 'Justify');
							default:
								return _Utils_Tuple2('align-items', 'Justify');
						}
					case 'Down':
						switch (vertical.$) {
							case 'Other':
								if (vertical.a.$ === 'Top') {
									var _n22 = vertical.a;
									return _Utils_Tuple2('justify-content', 'flex-start');
								} else {
									var _n23 = vertical.a;
									return _Utils_Tuple2('justify-content', 'flex-end');
								}
							case 'Center':
								return _Utils_Tuple2('justify-content', 'center');
							case 'Justify':
								return _Utils_Tuple2('justify-content', 'space-between');
							default:
								return _Utils_Tuple2('align-items', 'Justify');
						}
					default:
						switch (vertical.$) {
							case 'Other':
								if (vertical.a.$ === 'Top') {
									var _n25 = vertical.a;
									return _Utils_Tuple2('justify-content', 'flex-end');
								} else {
									var _n26 = vertical.a;
									return _Utils_Tuple2('justify-content', 'flex-start');
								}
							case 'Center':
								return _Utils_Tuple2('justify-content', 'center');
							case 'Justify':
								return _Utils_Tuple2('justify-content', 'space-between');
							default:
								return _Utils_Tuple2('align-items', 'Justify');
						}
				}
		}
	});
var mdgriffith$style_elements$Style$Internal$Render$Property$gridAlignment = function (align) {
	switch (align.$) {
		case 'GridGap':
			var row = align.a;
			var column = align.b;
			return _Utils_Tuple2(
				'grid-gap',
				elm$core$String$fromFloat(row) + ('px ' + (elm$core$String$fromFloat(column) + 'px')));
		case 'GridH':
			var horizontal = align.a;
			switch (horizontal.$) {
				case 'Other':
					if (horizontal.a.$ === 'Left') {
						var _n2 = horizontal.a;
						return _Utils_Tuple2('justify-content', 'start');
					} else {
						var _n3 = horizontal.a;
						return _Utils_Tuple2('justify-content', 'end');
					}
				case 'Center':
					return _Utils_Tuple2('justify-content', 'center');
				case 'Justify':
					return _Utils_Tuple2('justify-content', 'space-between');
				default:
					return _Utils_Tuple2('justify-content', 'space-between');
			}
		default:
			var vertical = align.a;
			switch (vertical.$) {
				case 'Other':
					if (vertical.a.$ === 'Top') {
						var _n5 = vertical.a;
						return _Utils_Tuple2('align-content', 'start');
					} else {
						var _n6 = vertical.a;
						return _Utils_Tuple2('align-content', 'end');
					}
				case 'Center':
					return _Utils_Tuple2('align-content', 'center');
				case 'Justify':
					return _Utils_Tuple2('align-content', 'space-between');
				default:
					return _Utils_Tuple2('align-content', 'space-between');
			}
	}
};
var mdgriffith$style_elements$Style$Internal$Render$Property$layout = F2(
	function (inline, lay) {
		switch (lay.$) {
			case 'TextLayout':
				return _List_fromArray(
					[
						_Utils_Tuple2(
						'display',
						inline ? 'inline-block' : 'block')
					]);
			case 'FlexLayout':
				var dir = lay.a;
				var flexProps = lay.b;
				return A2(
					elm$core$List$cons,
					_Utils_Tuple2(
						'display',
						inline ? 'inline-flex' : 'flex'),
					A2(
						elm$core$List$cons,
						mdgriffith$style_elements$Style$Internal$Render$Property$direction(dir),
						A2(
							elm$core$List$map,
							mdgriffith$style_elements$Style$Internal$Render$Property$flexbox(dir),
							flexProps)));
			default:
				if (lay.a.$ === 'NamedGridTemplate') {
					var rows = lay.a.a.rows;
					var columns = lay.a.a.columns;
					var options = lay.b;
					var renderLen = function (len) {
						switch (len.$) {
							case 'Px':
								var x = len.a;
								return elm$core$String$fromFloat(x) + 'px';
							case 'Percent':
								var x = len.a;
								return elm$core$String$fromFloat(x) + '%';
							case 'Auto':
								return 'auto';
							case 'Fill':
								var i = len.a;
								return elm$core$String$fromFloat(i) + 'fr';
							default:
								var perc = len.a;
								var px = len.b;
								return 'calc(' + (elm$core$String$fromFloat(perc) + ('% + ' + (elm$core$String$fromFloat(px) + 'px)')));
						}
					};
					var grid = inline ? _Utils_Tuple2('display', 'inline-grid') : _Utils_Tuple2('display', 'grid');
					var areaSpan = function (_n3) {
						var span = _n3.a;
						var maybeName = _n3.b;
						var name = function () {
							if (maybeName.$ === 'Nothing') {
								return '.';
							} else {
								var str = maybeName.a;
								return str;
							}
						}();
						if (span.$ === 'SpanAll') {
							return A2(
								elm$core$List$repeat,
								elm$core$List$length(columns),
								name);
						} else {
							var i = span.a;
							return A2(elm$core$List$repeat, i, name);
						}
					};
					var areasInRow = function (areas) {
						var quote = function (str) {
							return '\"' + (str + '\"');
						};
						var areaStrs = A2(elm$core$List$concatMap, areaSpan, areas);
						return (_Utils_cmp(
							elm$core$List$length(areaStrs),
							elm$core$List$length(columns)) > 0) ? quote(
							A2(elm$core$String$join, ' ', areaStrs)) : ((_Utils_cmp(
							elm$core$List$length(areaStrs),
							elm$core$List$length(columns)) < 0) ? quote(
							A2(elm$core$String$join, ' ', areaStrs)) : quote(
							A2(elm$core$String$join, ' ', areaStrs)));
					};
					var alignment = A2(elm$core$List$map, mdgriffith$style_elements$Style$Internal$Render$Property$gridAlignment, options);
					return A2(
						elm$core$List$cons,
						grid,
						A2(
							elm$core$List$cons,
							_Utils_Tuple2(
								'grid-template-rows',
								A2(
									elm$core$String$join,
									' ',
									A2(
										elm$core$List$map,
										A2(elm$core$Basics$composeL, renderLen, elm$core$Tuple$first),
										rows))),
							A2(
								elm$core$List$cons,
								_Utils_Tuple2(
									'grid-template-columns',
									A2(
										elm$core$String$join,
										' ',
										A2(elm$core$List$map, renderLen, columns))),
								A2(
									elm$core$List$cons,
									_Utils_Tuple2(
										'grid-template-areas',
										A2(
											elm$core$String$join,
											'\n',
											A2(
												elm$core$List$map,
												A2(elm$core$Basics$composeL, areasInRow, elm$core$Tuple$second),
												rows))),
									alignment))));
				} else {
					var rows = lay.a.a.rows;
					var columns = lay.a.a.columns;
					var options = lay.b;
					var renderLen = function (len) {
						switch (len.$) {
							case 'Px':
								var x = len.a;
								return elm$core$String$fromFloat(x) + 'px';
							case 'Percent':
								var x = len.a;
								return elm$core$String$fromFloat(x) + '%';
							case 'Auto':
								return 'auto';
							case 'Fill':
								var i = len.a;
								return elm$core$String$fromFloat(i) + 'fr';
							default:
								var perc = len.a;
								var px = len.b;
								return 'calc(' + (elm$core$String$fromFloat(perc) + ('% + ' + (elm$core$String$fromFloat(px) + 'px)')));
						}
					};
					var grid = inline ? _Utils_Tuple2('display', 'inline-grid') : _Utils_Tuple2('display', 'grid');
					var alignment = A2(elm$core$List$map, mdgriffith$style_elements$Style$Internal$Render$Property$gridAlignment, options);
					return A2(
						elm$core$List$cons,
						grid,
						A2(
							elm$core$List$cons,
							_Utils_Tuple2(
								'grid-template-rows',
								A2(
									elm$core$String$join,
									' ',
									A2(elm$core$List$map, renderLen, rows))),
							A2(
								elm$core$List$cons,
								_Utils_Tuple2(
									'grid-template-columns',
									A2(
										elm$core$String$join,
										' ',
										A2(elm$core$List$map, renderLen, columns))),
								alignment)));
				}
		}
	});
var mdgriffith$style_elements$Style$Internal$Render$Property$position = function (posEls) {
	var renderPos = function (pos) {
		switch (pos.$) {
			case 'RelativeTo':
				switch (pos.a.$) {
					case 'Screen':
						var _n1 = pos.a;
						return _Utils_Tuple2('position', 'fixed');
					case 'Parent':
						var _n2 = pos.a;
						return _Utils_Tuple2('position', 'absolute');
					default:
						var _n3 = pos.a;
						return _Utils_Tuple2('position', 'relative');
				}
			case 'PosLeft':
				var x = pos.a;
				return _Utils_Tuple2(
					'left',
					elm$core$String$fromFloat(x) + 'px');
			case 'PosRight':
				var x = pos.a;
				return _Utils_Tuple2(
					'right',
					elm$core$String$fromFloat(x) + 'px');
			case 'PosTop':
				var x = pos.a;
				return _Utils_Tuple2(
					'top',
					elm$core$String$fromFloat(x) + 'px');
			case 'PosBottom':
				var x = pos.a;
				return _Utils_Tuple2(
					'bottom',
					elm$core$String$fromFloat(x) + 'px');
			case 'ZIndex':
				var i = pos.a;
				return _Utils_Tuple2(
					'z-index',
					elm$core$String$fromInt(i));
			case 'Inline':
				return _Utils_Tuple2('display', 'inline-block');
			default:
				switch (pos.a.$) {
					case 'FloatLeft':
						var _n4 = pos.a;
						return _Utils_Tuple2('float', 'left');
					case 'FloatRight':
						var _n5 = pos.a;
						return _Utils_Tuple2('float', 'right');
					case 'FloatTopLeft':
						var _n6 = pos.a;
						return _Utils_Tuple2('float', 'left');
					default:
						var _n7 = pos.a;
						return _Utils_Tuple2('float', 'right');
				}
		}
	};
	return A2(elm$core$List$map, renderPos, posEls);
};
var mdgriffith$style_elements$Style$Internal$Render$Property$shadow = function (shadows) {
	var _n0 = A2(
		elm$core$List$partition,
		function (_n1) {
			var s = _n1.a;
			return s.kind === 'text';
		},
		shadows);
	var text = _n0.a;
	var boxShadow = _n0.b;
	var renderedBox = A2(
		elm$core$String$join,
		', ',
		A2(elm$core$List$map, mdgriffith$style_elements$Style$Internal$Render$Value$shadow, boxShadow));
	var renderedText = A2(
		elm$core$String$join,
		', ',
		A2(elm$core$List$map, mdgriffith$style_elements$Style$Internal$Render$Value$shadow, text));
	return A2(
		elm$core$List$filterMap,
		elm$core$Basics$identity,
		_List_fromArray(
			[
				(renderedBox === '') ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(
				_Utils_Tuple2('box-shadow', renderedBox)),
				(renderedText === '') ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(
				_Utils_Tuple2('text-shadow', renderedText))
			]));
};
var mdgriffith$style_elements$Style$Internal$Render$Property$transformations = function (transforms) {
	var transformToString = function (transform) {
		switch (transform.$) {
			case 'Translate':
				var x = transform.a;
				var y = transform.b;
				var z = transform.c;
				return 'translate3d(' + (elm$core$String$fromFloat(x) + ('px, ' + (elm$core$String$fromFloat(y) + ('px, ' + (elm$core$String$fromFloat(z) + 'px)')))));
			case 'RotateAround':
				var x = transform.a;
				var y = transform.b;
				var z = transform.c;
				var angle = transform.d;
				return 'rotate3d(' + (elm$core$String$fromFloat(x) + (',' + (elm$core$String$fromFloat(y) + (',' + (elm$core$String$fromFloat(z) + (',' + (elm$core$String$fromFloat(angle) + 'rad)')))))));
			case 'Rotate':
				var x = transform.a;
				return 'rotate(' + (elm$core$String$fromFloat(x) + 'rad)');
			default:
				var x = transform.a;
				var y = transform.b;
				var z = transform.c;
				return 'scale3d(' + (elm$core$String$fromFloat(x) + (', ' + (elm$core$String$fromFloat(y) + (', ' + (elm$core$String$fromFloat(z) + ')')))));
		}
	};
	var transformString = A2(
		elm$core$String$join,
		' ',
		A2(elm$core$List$map, transformToString, transforms));
	var renderedTransforms = (elm$core$String$length(transformString) > 0) ? _List_fromArray(
		[
			_Utils_Tuple2('transform', transformString)
		]) : _List_Nil;
	return (!elm$core$List$length(transforms)) ? _List_Nil : renderedTransforms;
};
var mdgriffith$style_elements$Style$Internal$Render$Property$transition = function (_n0) {
	var delay = _n0.a.delay;
	var duration = _n0.a.duration;
	var easing = _n0.a.easing;
	var props = _n0.a.props;
	var formatTrans = function (prop) {
		return A2(
			elm$core$String$join,
			' ',
			_List_fromArray(
				[
					prop,
					elm$core$String$fromFloat(duration) + 'ms',
					easing,
					elm$core$String$fromFloat(delay) + 'ms'
				]));
	};
	return A2(
		elm$core$String$join,
		', ',
		A2(elm$core$List$map, formatTrans, props));
};
var mdgriffith$style_elements$Style$Internal$Render$Property$visibility = function (vis) {
	switch (vis.$) {
		case 'Hidden':
			return _List_fromArray(
				[
					_Utils_Tuple2('display', 'none')
				]);
		case 'Invisible':
			return _List_fromArray(
				[
					_Utils_Tuple2('visibility', 'hidden')
				]);
		default:
			var x = vis.a;
			return _List_fromArray(
				[
					_Utils_Tuple2(
					'opacity',
					elm$core$String$fromFloat(x))
				]);
	}
};
var mdgriffith$style_elements$Style$Internal$Render$Value$typeface = function (families) {
	var renderFont = function (font) {
		switch (font.$) {
			case 'Serif':
				return 'serif';
			case 'SansSerif':
				return 'sans-serif';
			case 'Cursive':
				return 'cursive';
			case 'Fantasy':
				return 'fantasy';
			case 'Monospace':
				return 'monospace';
			case 'FontName':
				var name = font.a;
				return '\"' + (name + '\"');
			default:
				var name = font.a;
				var url = font.b;
				return '\"' + (name + '\"');
		}
	};
	return A2(
		elm$core$String$join,
		', ',
		A2(elm$core$List$map, renderFont, families));
};
var mdgriffith$style_elements$Style$Internal$Selector$Free = function (a) {
	return {$: 'Free', a: a};
};
var mdgriffith$style_elements$Style$Internal$Selector$Pseudo = function (a) {
	return {$: 'Pseudo', a: a};
};
var mdgriffith$style_elements$Style$Internal$Selector$pseudo = F2(
	function (psu, sel) {
		switch (sel.$) {
			case 'Pseudo':
				var existing = sel.a;
				return mdgriffith$style_elements$Style$Internal$Selector$Pseudo(
					_Utils_ap(existing, psu));
			case 'Select':
				var single = sel.a;
				var findable = sel.b;
				return mdgriffith$style_elements$Style$Internal$Selector$Stack(
					_List_fromArray(
						[
							A2(mdgriffith$style_elements$Style$Internal$Selector$Select, single, findable),
							mdgriffith$style_elements$Style$Internal$Selector$Pseudo(psu)
						]));
			case 'SelectChild':
				var selectChild = sel.a;
				return mdgriffith$style_elements$Style$Internal$Selector$SelectChild(
					A2(mdgriffith$style_elements$Style$Internal$Selector$pseudo, psu, selectChild));
			case 'Free':
				var single = sel.a;
				return mdgriffith$style_elements$Style$Internal$Selector$Free(single);
			default:
				var sels = sel.a;
				var lastElem = elm$core$List$head(
					elm$core$List$reverse(sels));
				var init = elm$core$List$reverse(
					A2(
						elm$core$List$drop,
						1,
						elm$core$List$reverse(sels)));
				if (lastElem.$ === 'Nothing') {
					return mdgriffith$style_elements$Style$Internal$Selector$Stack(sels);
				} else {
					var last = lastElem.a;
					return mdgriffith$style_elements$Style$Internal$Selector$Stack(
						_Utils_ap(
							init,
							_List_fromArray(
								[
									A2(mdgriffith$style_elements$Style$Internal$Selector$pseudo, psu, last)
								])));
				}
		}
	});
var mdgriffith$style_elements$Style$Internal$Render$renderVariationProp = F2(
	function (parentClass, prop) {
		switch (prop.$) {
			case 'Child':
				return elm$core$Maybe$Nothing;
			case 'Variation':
				return elm$core$Maybe$Nothing;
			case 'PseudoElement':
				var cls = prop.a;
				var styleProps = prop.b;
				return A2(
					elm$core$Basics$composeL,
					A2(elm$core$Basics$composeL, elm$core$Maybe$Just, mdgriffith$style_elements$Style$Internal$Intermediate$SubClass),
					mdgriffith$style_elements$Style$Internal$Intermediate$Class)(
					{
						props: A2(
							elm$core$List$filterMap,
							mdgriffith$style_elements$Style$Internal$Render$renderVariationProp(parentClass),
							styleProps),
						selector: A2(mdgriffith$style_elements$Style$Internal$Selector$pseudo, cls, parentClass)
					});
			case 'MediaQuery':
				var query = prop.a;
				var styleProps = prop.b;
				return A2(
					elm$core$Basics$composeL,
					A2(elm$core$Basics$composeL, elm$core$Maybe$Just, mdgriffith$style_elements$Style$Internal$Intermediate$SubClass),
					mdgriffith$style_elements$Style$Internal$Intermediate$Media)(
					{
						props: A2(
							elm$core$List$map,
							mdgriffith$style_elements$Style$Internal$Intermediate$asMediaQuery(query),
							A2(
								elm$core$List$filterMap,
								mdgriffith$style_elements$Style$Internal$Render$renderVariationProp(parentClass),
								styleProps)),
						query: '@media ' + query,
						selector: parentClass
					});
			case 'Exact':
				var name = prop.a;
				var val = prop.b;
				return A2(elm$core$Basics$composeL, elm$core$Maybe$Just, mdgriffith$style_elements$Style$Internal$Intermediate$props)(
					_List_fromArray(
						[
							_Utils_Tuple2(name, val)
						]));
			case 'Visibility':
				var vis = prop.a;
				return A3(
					elm$core$Basics$composeL,
					elm$core$Maybe$Just,
					mdgriffith$style_elements$Style$Internal$Intermediate$props,
					mdgriffith$style_elements$Style$Internal$Render$Property$visibility(vis));
			case 'Position':
				var pos = prop.a;
				return A3(
					elm$core$Basics$composeL,
					elm$core$Maybe$Just,
					mdgriffith$style_elements$Style$Internal$Intermediate$props,
					mdgriffith$style_elements$Style$Internal$Render$Property$position(pos));
			case 'Font':
				var name = prop.a;
				var val = prop.b;
				return A3(
					elm$core$Basics$composeL,
					elm$core$Maybe$Just,
					mdgriffith$style_elements$Style$Internal$Intermediate$props,
					_List_fromArray(
						[
							_Utils_Tuple2(name, val)
						]));
			case 'FontFamily':
				var fam = prop.a;
				return A3(
					elm$core$Basics$composeL,
					elm$core$Maybe$Just,
					mdgriffith$style_elements$Style$Internal$Intermediate$props,
					_List_fromArray(
						[
							_Utils_Tuple2(
							'font-family',
							mdgriffith$style_elements$Style$Internal$Render$Value$typeface(fam))
						]));
			case 'Layout':
				var lay = prop.a;
				return A2(elm$core$Basics$composeL, elm$core$Maybe$Just, mdgriffith$style_elements$Style$Internal$Intermediate$props)(
					A2(mdgriffith$style_elements$Style$Internal$Render$Property$layout, false, lay));
			case 'Background':
				var props = prop.a;
				return A3(
					elm$core$Basics$composeL,
					elm$core$Maybe$Just,
					mdgriffith$style_elements$Style$Internal$Intermediate$props,
					mdgriffith$style_elements$Style$Internal$Render$Property$background(props));
			case 'Shadows':
				var shadows = prop.a;
				return A3(
					elm$core$Basics$composeL,
					elm$core$Maybe$Just,
					mdgriffith$style_elements$Style$Internal$Intermediate$props,
					mdgriffith$style_elements$Style$Internal$Render$Property$shadow(shadows));
			case 'Transform':
				var transformations = prop.a;
				return A3(
					elm$core$Basics$composeL,
					elm$core$Maybe$Just,
					mdgriffith$style_elements$Style$Internal$Intermediate$props,
					mdgriffith$style_elements$Style$Internal$Render$Property$transformations(transformations));
			case 'Filters':
				var filters = prop.a;
				return A3(
					elm$core$Basics$composeL,
					elm$core$Maybe$Just,
					mdgriffith$style_elements$Style$Internal$Intermediate$props,
					mdgriffith$style_elements$Style$Internal$Render$Property$filters(filters));
			case 'TextColor':
				var color = prop.a;
				return A3(
					elm$core$Basics$composeL,
					elm$core$Maybe$Just,
					mdgriffith$style_elements$Style$Internal$Intermediate$props,
					_List_fromArray(
						[
							_Utils_Tuple2(
							'color',
							mdgriffith$style_elements$Style$Internal$Render$Value$color(color))
						]));
			case 'SelectionColor':
				var color = prop.a;
				return A2(
					elm$core$Basics$composeL,
					A2(elm$core$Basics$composeL, elm$core$Maybe$Just, mdgriffith$style_elements$Style$Internal$Intermediate$SubClass),
					mdgriffith$style_elements$Style$Internal$Intermediate$Class)(
					{
						props: _List_fromArray(
							[
								mdgriffith$style_elements$Style$Internal$Intermediate$props(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'background-color',
										mdgriffith$style_elements$Style$Internal$Render$Value$color(color))
									]))
							]),
						selector: A2(mdgriffith$style_elements$Style$Internal$Selector$pseudo, '::selection', parentClass)
					});
			default:
				var trans = prop.a;
				return elm$core$Maybe$Just(
					mdgriffith$style_elements$Style$Internal$Intermediate$props(
						_List_fromArray(
							[
								_Utils_Tuple2(
								'transition',
								A2(
									elm$core$String$join,
									', ',
									A2(elm$core$List$map, mdgriffith$style_elements$Style$Internal$Render$Property$transition, trans)))
							])));
		}
	});
var mdgriffith$style_elements$Style$Internal$Selector$child = F2(
	function (parent, selector) {
		return mdgriffith$style_elements$Style$Internal$Selector$Stack(
			_List_fromArray(
				[
					parent,
					mdgriffith$style_elements$Style$Internal$Selector$SelectChild(selector)
				]));
	});
var mdgriffith$style_elements$Style$Internal$Selector$select = function (_class) {
	return A2(
		mdgriffith$style_elements$Style$Internal$Selector$Select,
		'',
		A2(mdgriffith$style_elements$Style$Internal$Find$Style, _class, ''));
};
var mdgriffith$style_elements$Style$Internal$Find$toVariation = F3(
	function (_var, newName, element) {
		if (element.$ === 'Style') {
			var _class = element.a;
			var name = element.b;
			return A3(mdgriffith$style_elements$Style$Internal$Find$Variation, _class, _var, newName);
		} else {
			var _class = element.a;
			var name = element.c;
			return A3(mdgriffith$style_elements$Style$Internal$Find$Variation, _class, _var, newName);
		}
	});
var elm$core$String$toLower = _String_toLower;
var elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {index: index, match: match, number: number, submatches: submatches};
	});
var elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var elm$regex$Regex$fromString = function (string) {
	return A2(
		elm$regex$Regex$fromStringWith,
		{caseInsensitive: false, multiline: false},
		string);
};
var elm$regex$Regex$never = _Regex_never;
var elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
var mdgriffith$style_elements$Style$Internal$Selector$uncapitalize = function (str) {
	var tail = A2(elm$core$String$dropLeft, 1, str);
	var head = elm$core$String$toLower(
		A2(elm$core$String$left, 1, str));
	return _Utils_ap(head, tail);
};
var mdgriffith$style_elements$Style$Internal$Selector$formatName = function (x) {
	return A3(
		elm$regex$Regex$replace,
		A2(
			elm$core$Maybe$withDefault,
			elm$regex$Regex$never,
			elm$regex$Regex$fromString('[\\s+]')),
		function (_n2) {
			return '-';
		},
		A3(
			elm$regex$Regex$replace,
			A2(
				elm$core$Maybe$withDefault,
				elm$regex$Regex$never,
				elm$regex$Regex$fromString('[A-Z0-9]+')),
			function (_n1) {
				var match = _n1.match;
				return ' ' + elm$core$String$toLower(match);
			},
			A3(
				elm$regex$Regex$replace,
				A2(
					elm$core$Maybe$withDefault,
					elm$regex$Regex$never,
					elm$regex$Regex$fromString('[^a-zA-Z0-9_-]')),
				function (_n0) {
					return '';
				},
				mdgriffith$style_elements$Style$Internal$Selector$uncapitalize(x))));
};
var mdgriffith$style_elements$Style$Internal$Selector$variant = F3(
	function (sel, _var, name) {
		switch (sel.$) {
			case 'Pseudo':
				var psu = sel.a;
				return mdgriffith$style_elements$Style$Internal$Selector$Pseudo(psu);
			case 'Select':
				var single = sel.a;
				var findable = sel.b;
				return A2(
					mdgriffith$style_elements$Style$Internal$Selector$Select,
					single + ('-' + mdgriffith$style_elements$Style$Internal$Selector$formatName(name)),
					A3(
						mdgriffith$style_elements$Style$Internal$Find$toVariation,
						_var,
						single + ('-' + mdgriffith$style_elements$Style$Internal$Selector$formatName(name)),
						findable));
			case 'SelectChild':
				var selectChild = sel.a;
				return mdgriffith$style_elements$Style$Internal$Selector$SelectChild(
					A3(mdgriffith$style_elements$Style$Internal$Selector$variant, selectChild, _var, name));
			case 'Free':
				var single = sel.a;
				return mdgriffith$style_elements$Style$Internal$Selector$Free(single);
			default:
				var sels = sel.a;
				var lastElem = elm$core$List$head(
					elm$core$List$reverse(sels));
				var init = elm$core$List$reverse(
					A2(
						elm$core$List$drop,
						1,
						elm$core$List$reverse(sels)));
				if (lastElem.$ === 'Nothing') {
					return mdgriffith$style_elements$Style$Internal$Selector$Stack(sels);
				} else {
					var last = lastElem.a;
					return mdgriffith$style_elements$Style$Internal$Selector$Stack(
						_Utils_ap(
							init,
							_List_fromArray(
								[
									A3(mdgriffith$style_elements$Style$Internal$Selector$variant, last, _var, name)
								])));
				}
		}
	});
var mdgriffith$style_elements$Style$Internal$Render$renderProp = F2(
	function (parentClass, prop) {
		switch (prop.$) {
			case 'Child':
				var cls = prop.a;
				var styleProps = prop.b;
				return A2(elm$core$Basics$composeL, mdgriffith$style_elements$Style$Internal$Intermediate$SubClass, mdgriffith$style_elements$Style$Internal$Intermediate$Class)(
					{
						props: A2(
							elm$core$List$map,
							mdgriffith$style_elements$Style$Internal$Render$renderProp(parentClass),
							styleProps),
						selector: A2(
							mdgriffith$style_elements$Style$Internal$Selector$child,
							parentClass,
							mdgriffith$style_elements$Style$Internal$Selector$select(cls))
					});
			case 'Variation':
				var _var = prop.a;
				var styleProps = prop.b;
				var variationName = function () {
					var _n1 = A2(
						elm$core$List$filterMap,
						mdgriffith$style_elements$Style$Internal$Render$renderVariationProp(parentClass),
						styleProps);
					if (!_n1.b) {
						return 'v';
					} else {
						var intermediates = _n1;
						return elm$core$String$concat(
							A2(
								elm$core$List$map,
								function (_n2) {
									var x = _n2.a;
									var y = _n2.b;
									return _Utils_ap(x, y);
								},
								A2(elm$core$List$concatMap, mdgriffith$style_elements$Style$Internal$Intermediate$getProps, intermediates)));
					}
				}();
				var selectVariation = A3(mdgriffith$style_elements$Style$Internal$Selector$variant, parentClass, _var, variationName);
				return A2(elm$core$Basics$composeL, mdgriffith$style_elements$Style$Internal$Intermediate$SubClass, mdgriffith$style_elements$Style$Internal$Intermediate$Class)(
					{
						props: A2(
							elm$core$List$filterMap,
							mdgriffith$style_elements$Style$Internal$Render$renderVariationProp(selectVariation),
							styleProps),
						selector: selectVariation
					});
			case 'PseudoElement':
				var cls = prop.a;
				var styleProps = prop.b;
				return A2(elm$core$Basics$composeL, mdgriffith$style_elements$Style$Internal$Intermediate$SubClass, mdgriffith$style_elements$Style$Internal$Intermediate$Class)(
					{
						props: A2(
							elm$core$List$map,
							mdgriffith$style_elements$Style$Internal$Render$renderProp(parentClass),
							styleProps),
						selector: A2(mdgriffith$style_elements$Style$Internal$Selector$pseudo, cls, parentClass)
					});
			case 'MediaQuery':
				var query = prop.a;
				var styleProps = prop.b;
				return A2(elm$core$Basics$composeL, mdgriffith$style_elements$Style$Internal$Intermediate$SubClass, mdgriffith$style_elements$Style$Internal$Intermediate$Media)(
					{
						props: A2(
							elm$core$List$map,
							mdgriffith$style_elements$Style$Internal$Intermediate$asMediaQuery(query),
							A2(
								elm$core$List$map,
								mdgriffith$style_elements$Style$Internal$Render$renderProp(parentClass),
								styleProps)),
						query: '@media ' + query,
						selector: parentClass
					});
			case 'Exact':
				var name = prop.a;
				var val = prop.b;
				return mdgriffith$style_elements$Style$Internal$Intermediate$props(
					_List_fromArray(
						[
							_Utils_Tuple2(name, val)
						]));
			case 'Visibility':
				var vis = prop.a;
				return mdgriffith$style_elements$Style$Internal$Intermediate$props(
					mdgriffith$style_elements$Style$Internal$Render$Property$visibility(vis));
			case 'Position':
				var pos = prop.a;
				return mdgriffith$style_elements$Style$Internal$Intermediate$props(
					mdgriffith$style_elements$Style$Internal$Render$Property$position(pos));
			case 'Font':
				var name = prop.a;
				var val = prop.b;
				return mdgriffith$style_elements$Style$Internal$Intermediate$props(
					_List_fromArray(
						[
							_Utils_Tuple2(name, val)
						]));
			case 'Layout':
				var lay = prop.a;
				return mdgriffith$style_elements$Style$Internal$Intermediate$props(
					A2(mdgriffith$style_elements$Style$Internal$Render$Property$layout, false, lay));
			case 'Background':
				var props = prop.a;
				return mdgriffith$style_elements$Style$Internal$Intermediate$props(
					mdgriffith$style_elements$Style$Internal$Render$Property$background(props));
			case 'Shadows':
				var shadows = prop.a;
				return mdgriffith$style_elements$Style$Internal$Intermediate$props(
					mdgriffith$style_elements$Style$Internal$Render$Property$shadow(shadows));
			case 'Transform':
				var transformations = prop.a;
				return mdgriffith$style_elements$Style$Internal$Intermediate$props(
					mdgriffith$style_elements$Style$Internal$Render$Property$transformations(transformations));
			case 'Filters':
				var filters = prop.a;
				return mdgriffith$style_elements$Style$Internal$Intermediate$props(
					mdgriffith$style_elements$Style$Internal$Render$Property$filters(filters));
			case 'SelectionColor':
				var color = prop.a;
				return A2(elm$core$Basics$composeL, mdgriffith$style_elements$Style$Internal$Intermediate$SubClass, mdgriffith$style_elements$Style$Internal$Intermediate$Class)(
					{
						props: _List_fromArray(
							[
								mdgriffith$style_elements$Style$Internal$Intermediate$props(
								_List_fromArray(
									[
										_Utils_Tuple2(
										'background-color',
										mdgriffith$style_elements$Style$Internal$Render$Value$color(color))
									]))
							]),
						selector: A2(mdgriffith$style_elements$Style$Internal$Selector$pseudo, '::selection', parentClass)
					});
			case 'TextColor':
				var color = prop.a;
				return mdgriffith$style_elements$Style$Internal$Intermediate$props(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'color',
							mdgriffith$style_elements$Style$Internal$Render$Value$color(color))
						]));
			case 'Transitions':
				var trans = prop.a;
				return mdgriffith$style_elements$Style$Internal$Intermediate$props(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'transition',
							A2(
								elm$core$String$join,
								', ',
								A2(elm$core$List$map, mdgriffith$style_elements$Style$Internal$Render$Property$transition, trans)))
						]));
			default:
				var fam = prop.a;
				return mdgriffith$style_elements$Style$Internal$Intermediate$props(
					_List_fromArray(
						[
							_Utils_Tuple2(
							'font-family',
							mdgriffith$style_elements$Style$Internal$Render$Value$typeface(fam))
						]));
		}
	});
var mdgriffith$style_elements$Style$Internal$Render$renderStyle = F2(
	function (guarded, style) {
		switch (style.$) {
			case 'Reset':
				var reset = style.a;
				return mdgriffith$style_elements$Style$Internal$Intermediate$Free(reset);
			case 'Import':
				var str = style.a;
				return mdgriffith$style_elements$Style$Internal$Intermediate$Free('@import ' + (str + ';'));
			case 'RawStyle':
				var cls = style.a;
				var styleProps = style.b;
				return mdgriffith$style_elements$Style$Internal$Intermediate$Free(
					A2(mdgriffith$style_elements$Style$Internal$Render$class, cls, styleProps));
			default:
				var cls = style.a;
				var styleProps = style.b;
				var selector = mdgriffith$style_elements$Style$Internal$Selector$select(cls);
				var inter = mdgriffith$style_elements$Style$Internal$Intermediate$Class(
					{
						props: A2(
							elm$core$List$map,
							mdgriffith$style_elements$Style$Internal$Render$renderProp(selector),
							styleProps),
						selector: selector
					});
				var guard = function (i) {
					return guarded ? mdgriffith$style_elements$Style$Internal$Intermediate$guard(i) : i;
				};
				return guard(inter);
		}
	});
var elm$core$Set$Set_elm_builtin = function (a) {
	return {$: 'Set_elm_builtin', a: a};
};
var elm$core$Set$empty = elm$core$Set$Set_elm_builtin(elm$core$Dict$empty);
var elm$core$Set$insert = F2(
	function (key, _n0) {
		var dict = _n0.a;
		return elm$core$Set$Set_elm_builtin(
			A3(elm$core$Dict$insert, key, _Utils_Tuple0, dict));
	});
var elm$core$Set$fromList = function (list) {
	return A3(elm$core$List$foldl, elm$core$Set$insert, elm$core$Set$empty, list);
};
var mdgriffith$style_elements$Style$Internal$Model$Import = function (a) {
	return {$: 'Import', a: a};
};
var mdgriffith$style_elements$Style$Internal$Model$Reset = function (a) {
	return {$: 'Reset', a: a};
};
var mdgriffith$style_elements$Style$Internal$Render$reorderImportAddReset = F2(
	function (reset, styles) {
		var reorder = F2(
			function (style, _n5) {
				var importStatements = _n5.a;
				var remainingStyles = _n5.b;
				if (style.$ === 'Import') {
					return _Utils_Tuple2(
						A2(elm$core$List$cons, style, importStatements),
						remainingStyles);
				} else {
					var x = style;
					return _Utils_Tuple2(
						importStatements,
						A2(elm$core$List$cons, style, remainingStyles));
				}
			});
		var getFontStyle = function (style) {
			if (style.$ === 'Style') {
				var props = style.b;
				var forFont = function (prop) {
					if (prop.$ === 'FontFamily') {
						var fams = prop.a;
						var forImport = function (font) {
							if (font.$ === 'ImportFont') {
								var url = font.b;
								return elm$core$Maybe$Just(url);
							} else {
								return elm$core$Maybe$Nothing;
							}
						};
						return A2(elm$core$List$filterMap, forImport, fams);
					} else {
						return _List_Nil;
					}
				};
				return A2(elm$core$List$concatMap, forFont, props);
			} else {
				return _List_Nil;
			}
		};
		var importedFonts = A2(
			elm$core$List$map,
			function (uri) {
				return mdgriffith$style_elements$Style$Internal$Model$Import('url(\'' + (uri + '\')'));
			},
			A3(
				elm$core$Basics$composeL,
				elm$core$Set$toList,
				elm$core$Set$fromList,
				A2(elm$core$List$concatMap, getFontStyle, styles)));
		var _n0 = A3(
			elm$core$List$foldr,
			reorder,
			_Utils_Tuple2(_List_Nil, _List_Nil),
			styles);
		var imports = _n0.a;
		var allStyles = _n0.b;
		return _Utils_ap(
			imports,
			_Utils_ap(
				importedFonts,
				_Utils_ap(
					_List_fromArray(
						[
							mdgriffith$style_elements$Style$Internal$Model$Reset(reset)
						]),
					allStyles)));
	});
var mdgriffith$style_elements$Style$Internal$Render$stylesheet = F3(
	function (reset, guard, batched) {
		return mdgriffith$style_elements$Style$Internal$Intermediate$finalize(
			A2(
				elm$core$List$map,
				A2(
					elm$core$Basics$composeL,
					mdgriffith$style_elements$Style$Internal$Render$renderStyle(guard),
					mdgriffith$style_elements$Style$Internal$Render$preprocess),
				A2(
					mdgriffith$style_elements$Style$Internal$Render$reorderImportAddReset,
					reset,
					mdgriffith$style_elements$Style$Internal$Batchable$toList(batched))));
	});
var mdgriffith$style_elements$Style$styleSheetWith = F2(
	function (options, styles) {
		var unguard = A2(
			elm$core$List$any,
			elm$core$Basics$eq(mdgriffith$style_elements$Style$Unguarded),
			options);
		return mdgriffith$style_elements$Style$prepareSheet(
			A3(mdgriffith$style_elements$Style$Internal$Render$stylesheet, '', !unguard, styles));
	});
var mdgriffith$style_elements$Style$styleSheet = function (styles) {
	return A2(mdgriffith$style_elements$Style$styleSheetWith, _List_Nil, styles);
};
var mdgriffith$style_elements$Style$Internal$Model$Variation = F2(
	function (a, b) {
		return {$: 'Variation', a: a, b: b};
	});
var mdgriffith$style_elements$Style$variation = F2(
	function (v, variationProps) {
		return A2(mdgriffith$style_elements$Style$Internal$Model$Variation, v, variationProps);
	});
var mdgriffith$style_elements$Style$Internal$Model$Background = function (a) {
	return {$: 'Background', a: a};
};
var mdgriffith$style_elements$Style$Internal$Model$BackgroundLinearGradient = F2(
	function (a, b) {
		return {$: 'BackgroundLinearGradient', a: a, b: b};
	});
var mdgriffith$style_elements$Style$Internal$Model$ToLeft = {$: 'ToLeft'};
var mdgriffith$style_elements$Style$Background$gradientLeft = function (steps) {
	return mdgriffith$style_elements$Style$Internal$Model$Background(
		A2(mdgriffith$style_elements$Style$Internal$Model$BackgroundLinearGradient, mdgriffith$style_elements$Style$Internal$Model$ToLeft, steps));
};
var mdgriffith$style_elements$Style$Internal$Model$BackgroundSize = function (a) {
	return {$: 'BackgroundSize', a: a};
};
var mdgriffith$style_elements$Style$Background$size = mdgriffith$style_elements$Style$Internal$Model$BackgroundSize;
var mdgriffith$style_elements$Style$Internal$Model$Auto = {$: 'Auto'};
var mdgriffith$style_elements$Style$Background$natural = mdgriffith$style_elements$Style$Background$size(
	{height: mdgriffith$style_elements$Style$Internal$Model$Auto, width: mdgriffith$style_elements$Style$Internal$Model$Auto});
var mdgriffith$style_elements$Style$Internal$Model$NoRepeat = {$: 'NoRepeat'};
var mdgriffith$style_elements$Style$Background$noRepeat = mdgriffith$style_elements$Style$Internal$Model$NoRepeat;
var mdgriffith$style_elements$Style$Internal$Model$BackgroundImage = function (a) {
	return {$: 'BackgroundImage', a: a};
};
var mdgriffith$style_elements$Style$Background$image = function (src) {
	return mdgriffith$style_elements$Style$Internal$Model$Background(
		mdgriffith$style_elements$Style$Internal$Model$BackgroundImage(
			{
				position: _Utils_Tuple2(0, 0),
				repeat: mdgriffith$style_elements$Style$Background$noRepeat,
				size: mdgriffith$style_elements$Style$Background$natural,
				src: src
			}));
};
var mdgriffith$style_elements$Style$Internal$Model$PercentStep = F2(
	function (a, b) {
		return {$: 'PercentStep', a: a, b: b};
	});
var mdgriffith$style_elements$Style$Background$percent = F2(
	function (p, c) {
		return A2(mdgriffith$style_elements$Style$Internal$Model$PercentStep, c, p);
	});
var mdgriffith$style_elements$Style$Internal$Model$ColorStep = function (a) {
	return {$: 'ColorStep', a: a};
};
var mdgriffith$style_elements$Style$Background$step = mdgriffith$style_elements$Style$Internal$Model$ColorStep;
var mdgriffith$style_elements$Style$Border$bottom = function (l) {
	return A2(
		mdgriffith$style_elements$Style$Internal$Model$Exact,
		'border-bottom-width',
		elm$core$String$fromFloat(l) + 'px');
};
var mdgriffith$style_elements$Style$Border$left = function (l) {
	return A2(
		mdgriffith$style_elements$Style$Internal$Model$Exact,
		'border-left-width',
		elm$core$String$fromFloat(l) + 'px');
};
var mdgriffith$style_elements$Style$Border$right = function (l) {
	return A2(
		mdgriffith$style_elements$Style$Internal$Model$Exact,
		'border-right-width',
		elm$core$String$fromFloat(l) + 'px');
};
var mdgriffith$style_elements$Style$Border$solid = A2(mdgriffith$style_elements$Style$Internal$Model$Exact, 'border-style', 'solid');
var mdgriffith$style_elements$Style$Border$top = function (l) {
	return A2(
		mdgriffith$style_elements$Style$Internal$Model$Exact,
		'border-top-width',
		elm$core$String$fromFloat(l) + 'px');
};
var mdgriffith$style_elements$Style$Color$border = function (clr) {
	return A2(
		mdgriffith$style_elements$Style$Internal$Model$Exact,
		'border-color',
		mdgriffith$style_elements$Style$Internal$Render$Value$color(clr));
};
var mdgriffith$style_elements$Style$Font$bold = A2(mdgriffith$style_elements$Style$Internal$Model$Font, 'font-weight', '700');
var mdgriffith$style_elements$Style$Internal$Model$FontName = function (a) {
	return {$: 'FontName', a: a};
};
var mdgriffith$style_elements$Style$Font$font = mdgriffith$style_elements$Style$Internal$Model$FontName;
var mdgriffith$style_elements$Style$Internal$Model$SansSerif = {$: 'SansSerif'};
var mdgriffith$style_elements$Style$Font$sansSerif = mdgriffith$style_elements$Style$Internal$Model$SansSerif;
var mdgriffith$style_elements$Style$Internal$Model$FontFamily = function (a) {
	return {$: 'FontFamily', a: a};
};
var mdgriffith$style_elements$Style$Font$typeface = function (families) {
	return mdgriffith$style_elements$Style$Internal$Model$FontFamily(families);
};
var author$project$Styles$Style$styles = mdgriffith$style_elements$Style$styleSheet(
	_List_fromArray(
		[
			A2(
			mdgriffith$style_elements$Style$style,
			author$project$Styles$Style$App,
			_List_fromArray(
				[
					mdgriffith$style_elements$Style$Color$background(
					author$project$Styles$Style$styleElementsColor(author$project$Styles$Style$appBackground)),
					mdgriffith$style_elements$Style$Color$text(
					author$project$Styles$Style$styleElementsColor(author$project$Styles$Style$textColor)),
					mdgriffith$style_elements$Style$Font$typeface(
					_List_fromArray(
						[
							mdgriffith$style_elements$Style$Font$font('open sans'),
							mdgriffith$style_elements$Style$Font$sansSerif
						])),
					A2(mdgriffith$style_elements$Style$prop, 'background-position', 'center center'),
					A2(
					mdgriffith$style_elements$Style$variation,
					author$project$Styles$Style$Dragging,
					_Utils_ap(
						_List_fromArray(
							[
								mdgriffith$style_elements$Style$cursor('-webkit-grabbing'),
								mdgriffith$style_elements$Style$cursor('grabbing')
							]),
						author$project$Styles$Style$nonSelectable)),
					A2(
					mdgriffith$style_elements$Style$variation,
					author$project$Styles$Style$Crosshair,
					_List_fromArray(
						[
							mdgriffith$style_elements$Style$cursor('crosshair')
						]))
				])),
			A2(
			mdgriffith$style_elements$Style$style,
			author$project$Styles$Style$Dashboard,
			_List_fromArray(
				[
					mdgriffith$style_elements$Style$Background$gradientLeft(
					_List_fromArray(
						[
							mdgriffith$style_elements$Style$Background$step(
							author$project$Styles$Style$styleElementsColor(author$project$Styles$Style$appBackground)),
							A2(
							mdgriffith$style_elements$Style$Background$percent,
							50,
							author$project$Styles$Style$styleElementsColor(
								A2(author$project$Styles$Color$withAlpha, 0.8, author$project$Styles$Style$appBackground))),
							mdgriffith$style_elements$Style$Background$step(
							author$project$Styles$Style$styleElementsColor(
								A2(author$project$Styles$Color$withAlpha, 0, author$project$Styles$Style$appBackground)))
						])),
					author$project$Styles$Style$noPointerEvents
				])),
			A2(
			mdgriffith$style_elements$Style$style,
			author$project$Styles$Style$NoPointerEvents,
			_List_fromArray(
				[author$project$Styles$Style$noPointerEvents])),
			A2(
			mdgriffith$style_elements$Style$style,
			author$project$Styles$Style$DashboardButton(author$project$Styles$Style$Okay),
			author$project$Styles$Style$activeDashboardButton(author$project$Styles$Color$accent)),
			A2(
			mdgriffith$style_elements$Style$style,
			author$project$Styles$Style$DashboardButton(author$project$Styles$Style$WithError),
			author$project$Styles$Style$activeDashboardButton(author$project$Styles$Color$red)),
			A2(
			mdgriffith$style_elements$Style$style,
			author$project$Styles$Style$DashboardButton(author$project$Styles$Style$WithWarning),
			author$project$Styles$Style$activeDashboardButton(author$project$Styles$Color$yellow)),
			A2(
			mdgriffith$style_elements$Style$style,
			author$project$Styles$Style$DashboardButton(author$project$Styles$Style$NotEnoughData),
			author$project$Styles$Style$dashboardButton(author$project$Styles$Color$lighterGrey)),
			A2(
			mdgriffith$style_elements$Style$style,
			author$project$Styles$Style$DrawerButton,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$style_elements$Style$Color$text(
						author$project$Styles$Style$styleElementsColor(author$project$Styles$Color$darkGrey)),
						mdgriffith$style_elements$Style$Color$background(
						author$project$Styles$Style$styleElementsColor(author$project$Styles$Color$almostWhite)),
						mdgriffith$style_elements$Style$Font$size(14),
						mdgriffith$style_elements$Style$hover(
						_List_fromArray(
							[
								mdgriffith$style_elements$Style$opacity(0.9)
							])),
						A2(
						mdgriffith$style_elements$Style$pseudo,
						'active',
						_List_fromArray(
							[
								mdgriffith$style_elements$Style$opacity(0.7)
							]))
					]),
				author$project$Styles$Style$button)),
			A2(
			mdgriffith$style_elements$Style$style,
			author$project$Styles$Style$Drawer,
			_List_fromArray(
				[
					mdgriffith$style_elements$Style$Color$background(
					author$project$Styles$Style$styleElementsColor(
						A3(author$project$Color$Mixing$mix, 0.8 * 0.6, author$project$Color$black, author$project$Styles$Style$appBackground))),
					mdgriffith$style_elements$Style$Color$text(
					author$project$Styles$Style$styleElementsColor(author$project$Styles$Color$white)),
					mdgriffith$style_elements$Style$cursor('default'),
					mdgriffith$style_elements$Style$Background$image('assets/mock-backdrop-filter.png'),
					A2(mdgriffith$style_elements$Style$prop, 'background-position', 'bottom right'),
					A2(mdgriffith$style_elements$Style$prop, 'background-attachment', 'fixed')
				])),
			A2(mdgriffith$style_elements$Style$style, author$project$Styles$Style$ContextMenu, author$project$Styles$Style$contextMenu),
			A2(
			mdgriffith$style_elements$Style$style,
			author$project$Styles$Style$ContextMenuArrow,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$style_elements$Style$Border$top(0),
						mdgriffith$style_elements$Style$Border$right(author$project$Styles$Style$contextMenuArrowHeight),
						mdgriffith$style_elements$Style$Border$bottom(author$project$Styles$Style$contextMenuArrowHeight),
						mdgriffith$style_elements$Style$Border$left(author$project$Styles$Style$contextMenuArrowHeight),
						mdgriffith$style_elements$Style$Border$solid,
						mdgriffith$style_elements$Style$Color$border(
						author$project$Styles$Style$styleElementsColor(author$project$Styles$Style$appBackground)),
						A2(mdgriffith$style_elements$Style$prop, 'border-bottom-color', 'transparent')
					]),
				author$project$Styles$Style$contextMenu)),
			A2(
			mdgriffith$style_elements$Style$style,
			author$project$Styles$Style$ContextMenuOption,
			_List_fromArray(
				[mdgriffith$style_elements$Style$Font$uppercase])),
			A2(
			mdgriffith$style_elements$Style$style,
			author$project$Styles$Style$ContextMenuOptionButton(author$project$Styles$Style$Enabled),
			_List_fromArray(
				[
					mdgriffith$style_elements$Style$cursor('pointer'),
					mdgriffith$style_elements$Style$hover(
					_List_fromArray(
						[
							mdgriffith$style_elements$Style$Color$text(
							author$project$Styles$Style$styleElementsColor(
								author$project$Styles$Color$lighter(author$project$Styles$Style$textColor)))
						])),
					A2(
					mdgriffith$style_elements$Style$pseudo,
					'active',
					_List_fromArray(
						[
							mdgriffith$style_elements$Style$Color$text(
							author$project$Styles$Style$styleElementsColor(
								author$project$Styles$Color$aLotLighter(author$project$Styles$Style$textColor)))
						]))
				])),
			A2(
			mdgriffith$style_elements$Style$style,
			author$project$Styles$Style$ContextMenuOptionButton(author$project$Styles$Style$Disabled),
			_List_fromArray(
				[
					mdgriffith$style_elements$Style$cursor('default'),
					mdgriffith$style_elements$Style$opacity(0.2)
				])),
			A2(
			mdgriffith$style_elements$Style$style,
			author$project$Styles$Style$DrawerHeading,
			_List_fromArray(
				[
					mdgriffith$style_elements$Style$Font$size(38)
				])),
			A2(
			mdgriffith$style_elements$Style$style,
			author$project$Styles$Style$LargeEmoji,
			_List_fromArray(
				[
					mdgriffith$style_elements$Style$Font$size(64)
				])),
			A2(
			mdgriffith$style_elements$Style$style,
			author$project$Styles$Style$Link,
			_List_fromArray(
				[
					mdgriffith$style_elements$Style$Font$weight(600),
					mdgriffith$style_elements$Style$hover(
					_List_fromArray(
						[
							mdgriffith$style_elements$Style$opacity(0.5)
						]))
				])),
			A2(
			mdgriffith$style_elements$Style$style,
			author$project$Styles$Style$Interactive,
			_Utils_ap(
				_List_fromArray(
					[
						mdgriffith$style_elements$Style$cursor('pointer')
					]),
				author$project$Styles$Style$nonSelectable)),
			A2(
			mdgriffith$style_elements$Style$style,
			author$project$Styles$Style$Bold,
			_List_fromArray(
				[mdgriffith$style_elements$Style$Font$bold])),
			A2(
			mdgriffith$style_elements$Style$style,
			author$project$Styles$Style$BreakdownSum,
			_List_fromArray(
				[
					mdgriffith$style_elements$Style$Border$top(1),
					mdgriffith$style_elements$Style$Border$solid,
					A2(mdgriffith$style_elements$Style$prop, 'border-color', 'currentColor'),
					mdgriffith$style_elements$Style$Font$size(24),
					mdgriffith$style_elements$Style$Font$bold
				])),
			A2(
			mdgriffith$style_elements$Style$style,
			author$project$Styles$Style$DrawerHeading2,
			_List_fromArray(
				[
					mdgriffith$style_elements$Style$Font$uppercase,
					mdgriffith$style_elements$Style$Font$size(12),
					mdgriffith$style_elements$Style$Font$bold
				])),
			A2(mdgriffith$style_elements$Style$style, author$project$Styles$Style$Unstyled, _List_Nil)
		]));
var mdgriffith$style_elements$Element$Internal$Model$Right = {$: 'Right'};
var mdgriffith$style_elements$Element$Attributes$alignRight = mdgriffith$style_elements$Element$Internal$Model$HAlign(mdgriffith$style_elements$Element$Internal$Model$Right);
var author$project$Views$Dashboard$dashboard = F2(
	function (navigationLinks, controls) {
		var dashboardSpacing = 24;
		return A3(
			mdgriffith$style_elements$Element$el,
			author$project$Styles$Style$Dashboard,
			_List_fromArray(
				[
					mdgriffith$style_elements$Element$Attributes$alignRight,
					mdgriffith$style_elements$Element$Attributes$height(mdgriffith$style_elements$Element$Attributes$fill)
				]),
			A3(
				mdgriffith$style_elements$Element$column,
				author$project$Styles$Style$NoPointerEvents,
				_List_fromArray(
					[
						mdgriffith$style_elements$Element$Attributes$center,
						mdgriffith$style_elements$Element$Attributes$paddingTop(dashboardSpacing),
						mdgriffith$style_elements$Element$Attributes$paddingRight(dashboardSpacing),
						mdgriffith$style_elements$Element$Attributes$paddingBottom(dashboardSpacing),
						mdgriffith$style_elements$Element$Attributes$paddingLeft(3 * dashboardSpacing),
						mdgriffith$style_elements$Element$Attributes$spacing(dashboardSpacing),
						mdgriffith$style_elements$Element$Attributes$height(mdgriffith$style_elements$Element$Attributes$fill)
					]),
				_Utils_ap(
					navigationLinks,
					_Utils_ap(
						_List_fromArray(
							[
								A3(
								mdgriffith$style_elements$Element$el,
								author$project$Styles$Style$NoPointerEvents,
								_List_fromArray(
									[
										mdgriffith$style_elements$Element$Attributes$height(mdgriffith$style_elements$Element$Attributes$fill)
									]),
								mdgriffith$style_elements$Element$empty)
							]),
						controls))));
	});
var elm$html$Html$div = _VirtualDom_node('div');
var elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			elm$json$Json$Encode$string(string));
	});
var elm$html$Html$Attributes$class = elm$html$Html$Attributes$stringProperty('className');
var mdgriffith$style_elements$Element$Internal$Render$withFocus = '\n\n.style-elements em.el {\n    padding: 0;\n    padding-left: 0.2em;\n}\n\n.style-elements button.button-focus:focus {\n   outline: none;\n   box-shadow: 0 0 3px 3px rgba(155,203,255,1.0);\n   border-color: rgba(155,203,255,1.0);\n}\n\n.style-elements textarea:focus, .style-elements input:focus {\n   outline: none;\n   box-shadow: 0 0 2px 2px rgba(155,203,255,1.0);\n   border-color: rgba(155,203,255,1.0);\n}\n.style-elements input[type=\'checkbox\'] {\n    border-radius: 3px;\n}\n.style-elements input[type=\'radio\'] {\n    border-radius: 7px;\n}\n.style-elements input[type=\'radio\']:focus {\n    border-radius: 7px;\n    box-shadow: 0 0 4px 4px rgba(155,203,255,1.0);\n}\n\n.style-elements select.focus-override:focus, .style-elements input.focus-override:focus {\n    outline: none;\n    box-shadow: none;\n    border-color:transparent;\n}\n.style-elements input.focus-override:focus ~ .alt-icon {\n    box-shadow: 0 0 3px 3px rgba(155,203,255,1.0);\n    border-color: rgba(155,203,255,1.0);\n}\n.style-elements select.focus-override:focus ~ .alt-icon {\n    box-shadow: 0 0 3px 3px rgba(155,203,255,1.0);\n    border-color: rgba(155,203,255,1.0);\n}\n.style-elements .arrows {\n    display:block;\n    position: relative;\n    height: 10px;\n    width: 10px;\n}\n/*\n.style-elements .arrows::after {\n    content: " ";\n    position:absolute;\n    top:-2px;\n    left:0;\n    width: 0;\n    height: 0;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-bottom: 5px solid black;\n}\n*/\n\n.style-elements .arrows::before {\n    content: " ";\n    position:absolute;\n    top:2px;\n    left:0;\n    width: 0;\n    height: 0;\n    border-left: 5px solid transparent;\n    border-right: 5px solid transparent;\n    border-top: 5px solid black;\n}\n\n\n';
var mdgriffith$style_elements$Element$Internal$Render$miniNormalize = 'html{-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%;margin:0;padding:0;border:0}body{margin:0}.style-elements{display:block;position:relative;margin:0;padding:0;border:0;font-size:100%;font:inherit;box-sizing:border-box;line-height:1.2}.el{display:block;position:relative;margin:0;padding:0;border:0;border-style:solid;font-size:100%;font:inherit;box-sizing:border-box}em.el{font-style:italic}b.el,strong.el{font-weight:bolder}strike.el{text-decoration:line-through}u.el{text-decoration:underline}a.el{text-decoration:none;color:inherit}img.el{border-style:none}sub.el,sup.el{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub.el{bottom:-0.25em}sup.el{top:-0.5em}' + mdgriffith$style_elements$Element$Internal$Render$withFocus;
var mdgriffith$style_elements$Element$Internal$Render$embed = F2(
	function (full, stylesheet) {
		return _List_fromArray(
			[
				A3(
				elm$html$Html$node,
				'style',
				_List_Nil,
				_List_fromArray(
					[
						elm$html$Html$text(
						full ? ('html,body{width:100%;height:100%;}' + mdgriffith$style_elements$Element$Internal$Render$miniNormalize) : mdgriffith$style_elements$Element$Internal$Render$miniNormalize)
					])),
				A3(
				elm$html$Html$node,
				'style',
				_List_Nil,
				_List_fromArray(
					[
						elm$html$Html$text(stylesheet.css)
					]))
			]);
	});
var mdgriffith$style_elements$Element$Internal$Adjustments$tagIntermediates = false;
var mdgriffith$style_elements$Element$Internal$Adjustments$tag = function (str) {
	return mdgriffith$style_elements$Element$Internal$Adjustments$tagIntermediates ? mdgriffith$style_elements$Element$Internal$Model$Attr(
		elm$html$Html$Attributes$class(str)) : mdgriffith$style_elements$Element$Internal$Model$Attr(
		elm$html$Html$Attributes$class(''));
};
var mdgriffith$style_elements$Element$Internal$Model$PointerEvents = function (a) {
	return {$: 'PointerEvents', a: a};
};
var mdgriffith$style_elements$Element$Internal$Adjustments$centerTextLayout = function (elm) {
	if (elm.$ === 'Layout') {
		var layoutEl = elm.a;
		var attrs = layoutEl.attrs;
		var layout = layoutEl.layout;
		var _n1 = A2(
			elm$core$List$partition,
			function (attr) {
				return _Utils_eq(
					attr,
					mdgriffith$style_elements$Element$Internal$Model$HAlign(mdgriffith$style_elements$Element$Internal$Model$Center)) || _Utils_eq(
					attr,
					mdgriffith$style_elements$Element$Internal$Model$VAlign(mdgriffith$style_elements$Element$Internal$Model$VerticalCenter));
			},
			attrs);
		var centeredProps = _n1.a;
		var others = _n1.b;
		if (layout.$ === 'TextLayout') {
			return (!elm$core$List$isEmpty(centeredProps)) ? mdgriffith$style_elements$Element$Internal$Model$Layout(
				{
					absolutelyPositioned: elm$core$Maybe$Nothing,
					attrs: A2(
						elm$core$List$cons,
						mdgriffith$style_elements$Element$Internal$Adjustments$tag('center-text'),
						A2(
							elm$core$List$cons,
							mdgriffith$style_elements$Element$Internal$Model$PointerEvents(false),
							centeredProps)),
					children: mdgriffith$style_elements$Element$Internal$Model$Normal(
						_List_fromArray(
							[
								mdgriffith$style_elements$Element$Internal$Model$Layout(
								_Utils_update(
									layoutEl,
									{
										attrs: A2(
											elm$core$List$cons,
											mdgriffith$style_elements$Element$Internal$Model$PointerEvents(true),
											others)
									}))
							])),
					layout: A2(mdgriffith$style_elements$Style$Internal$Model$FlexLayout, mdgriffith$style_elements$Style$Internal$Model$GoRight, _List_Nil),
					node: 'div',
					style: elm$core$Maybe$Nothing
				}) : elm;
		} else {
			return elm;
		}
	} else {
		return elm;
	}
};
var mdgriffith$style_elements$Element$Internal$Model$Screen = {$: 'Screen'};
var mdgriffith$style_elements$Element$Internal$Adjustments$hoistFixedScreenElements = function (el) {
	var elementIsOnScreen = function (attrs) {
		return A2(
			elm$core$List$any,
			function (attr) {
				return _Utils_eq(
					attr,
					mdgriffith$style_elements$Element$Internal$Model$PositionFrame(mdgriffith$style_elements$Element$Internal$Model$Screen));
			},
			attrs);
	};
	switch (el.$) {
		case 'Element':
			var attrs = el.a.attrs;
			return elementIsOnScreen(attrs) ? _Utils_Tuple2(
				mdgriffith$style_elements$Element$Internal$Model$Empty,
				elm$core$Maybe$Just(
					_List_fromArray(
						[el]))) : _Utils_Tuple2(el, elm$core$Maybe$Nothing);
		case 'Layout':
			var attrs = el.a.attrs;
			return elementIsOnScreen(attrs) ? _Utils_Tuple2(
				mdgriffith$style_elements$Element$Internal$Model$Empty,
				elm$core$Maybe$Just(
					_List_fromArray(
						[el]))) : _Utils_Tuple2(el, elm$core$Maybe$Nothing);
		default:
			return _Utils_Tuple2(el, elm$core$Maybe$Nothing);
	}
};
var elm$core$Tuple$mapSecond = F2(
	function (func, _n0) {
		var x = _n0.a;
		var y = _n0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var mdgriffith$style_elements$Element$Internal$Model$Margin = F4(
	function (a, b, c, d) {
		return {$: 'Margin', a: a, b: b, c: c, d: d};
	});
var mdgriffith$style_elements$Element$Internal$Model$PhantomPadding = F4(
	function (a, b, c, d) {
		return {$: 'PhantomPadding', a: a, b: b, c: c, d: d};
	});
var mdgriffith$style_elements$Element$Internal$Model$Shrink = function (a) {
	return {$: 'Shrink', a: a};
};
var mdgriffith$style_elements$Style$Internal$Model$Calc = F2(
	function (a, b) {
		return {$: 'Calc', a: a, b: b};
	});
var mdgriffith$style_elements$Element$Internal$Adjustments$counterSpacing = function (elm) {
	if (elm.$ === 'Layout') {
		var layoutEl = elm.a;
		var node = layoutEl.node;
		var layout = layoutEl.layout;
		var style = layoutEl.style;
		var attrs = layoutEl.attrs;
		var children = layoutEl.children;
		var absolutelyPositioned = layoutEl.absolutelyPositioned;
		var forSpacing = function (posAttr) {
			if (posAttr.$ === 'Spacing') {
				var x = posAttr.a;
				var y = posAttr.b;
				return elm$core$Maybe$Just(
					_Utils_Tuple2(x, y));
			} else {
				return elm$core$Maybe$Nothing;
			}
		};
		var spacing = elm$core$List$head(
			elm$core$List$reverse(
				A2(elm$core$List$filterMap, forSpacing, attrs)));
		var hasSpacing = function () {
			if (spacing.$ === 'Nothing') {
				return false;
			} else {
				return true;
			}
		}();
		var forPhantomPadding = function (posAttr) {
			if (posAttr.$ === 'Padding') {
				var t = posAttr.a;
				var r = posAttr.b;
				var b = posAttr.c;
				var l = posAttr.d;
				return elm$core$Maybe$Just(
					A4(
						mdgriffith$style_elements$Element$Internal$Model$PhantomPadding,
						A2(elm$core$Maybe$withDefault, 0, t),
						A2(elm$core$Maybe$withDefault, 0, r),
						A2(elm$core$Maybe$withDefault, 0, b),
						A2(elm$core$Maybe$withDefault, 0, l)));
			} else {
				return elm$core$Maybe$Nothing;
			}
		};
		var phantomPadding = A2(
			elm$core$Maybe$withDefault,
			A4(mdgriffith$style_elements$Element$Internal$Model$PhantomPadding, 0, 0, 0, 0),
			elm$core$List$head(
				elm$core$List$reverse(
					A2(elm$core$List$filterMap, forPhantomPadding, attrs))));
		var _n1 = A2(
			elm$core$List$partition,
			function (attr) {
				return _Utils_eq(
					attr,
					mdgriffith$style_elements$Element$Internal$Model$HAlign(mdgriffith$style_elements$Element$Internal$Model$Center)) || _Utils_eq(
					attr,
					mdgriffith$style_elements$Element$Internal$Model$VAlign(mdgriffith$style_elements$Element$Internal$Model$VerticalCenter));
			},
			attrs);
		var centeredProps = _n1.a;
		var others = _n1.b;
		if (layout.$ === 'FlexLayout') {
			if (hasSpacing) {
				var forAlignment = function (attr) {
					switch (attr.$) {
						case 'HAlign':
							return true;
						case 'VAlign':
							return true;
						default:
							return false;
					}
				};
				var _n3 = A2(elm$core$List$partition, forAlignment, attrs);
				var aligned = _n3.a;
				var unaligned = _n3.b;
				var _n4 = function () {
					if (spacing.$ === 'Nothing') {
						return _Utils_Tuple3(
							A4(mdgriffith$style_elements$Element$Internal$Model$Margin, 0, 0, 0, 0),
							A2(mdgriffith$style_elements$Element$Internal$Model$Spacing, 0, 0),
							0);
					} else {
						var _n6 = spacing.a;
						var x = _n6.a;
						var y = _n6.b;
						return _Utils_Tuple3(
							A4(mdgriffith$style_elements$Element$Internal$Model$Margin, (-1) * y, (-1) * x, (-1) * y, (-1) * x),
							A2(mdgriffith$style_elements$Element$Internal$Model$Spacing, x, y),
							x);
					}
				}();
				var negativeMargin = _n4.a;
				var spacingAttr = _n4.b;
				var totalHSpacing = _n4.c;
				return mdgriffith$style_elements$Element$Internal$Model$Layout(
					{
						absolutelyPositioned: absolutelyPositioned,
						attrs: A2(
							elm$core$List$cons,
							mdgriffith$style_elements$Element$Internal$Adjustments$tag('counter-spacing-container'),
							A2(
								elm$core$List$cons,
								mdgriffith$style_elements$Element$Internal$Model$PointerEvents(true),
								unaligned)),
						children: mdgriffith$style_elements$Element$Internal$Model$Normal(
							_List_fromArray(
								[
									mdgriffith$style_elements$Element$Internal$Model$Layout(
									{
										absolutelyPositioned: elm$core$Maybe$Nothing,
										attrs: A2(
											elm$core$List$cons,
											mdgriffith$style_elements$Element$Internal$Adjustments$tag('counter-spacing'),
											A2(
												elm$core$List$cons,
												mdgriffith$style_elements$Element$Internal$Model$PointerEvents(false),
												A2(
													elm$core$List$cons,
													phantomPadding,
													A2(
														elm$core$List$cons,
														negativeMargin,
														A2(
															elm$core$List$cons,
															spacingAttr,
															A2(
																elm$core$List$cons,
																mdgriffith$style_elements$Element$Internal$Model$Width(
																	A2(mdgriffith$style_elements$Style$Internal$Model$Calc, 100, totalHSpacing)),
																A2(
																	elm$core$List$cons,
																	mdgriffith$style_elements$Element$Internal$Model$Shrink(1),
																	aligned))))))),
										children: function () {
											if (children.$ === 'Normal') {
												var childs = children.a;
												return mdgriffith$style_elements$Element$Internal$Model$Normal(
													A2(
														elm$core$List$map,
														mdgriffith$style_elements$Element$Internal$Modify$addAttr(
															mdgriffith$style_elements$Element$Internal$Model$PointerEvents(true)),
														childs));
											} else {
												var childs = children.a;
												return mdgriffith$style_elements$Element$Internal$Model$Keyed(
													A2(
														elm$core$List$map,
														elm$core$Tuple$mapSecond(
															mdgriffith$style_elements$Element$Internal$Modify$addAttr(
																mdgriffith$style_elements$Element$Internal$Model$PointerEvents(true))),
														childs));
											}
										}(),
										layout: layout,
										node: 'div',
										style: elm$core$Maybe$Nothing
									})
								])),
						layout: A2(mdgriffith$style_elements$Style$Internal$Model$FlexLayout, mdgriffith$style_elements$Style$Internal$Model$GoRight, _List_Nil),
						node: node,
						style: style
					});
			} else {
				return mdgriffith$style_elements$Element$Internal$Model$Layout(
					_Utils_update(
						layoutEl,
						{
							attrs: A2(
								elm$core$List$cons,
								mdgriffith$style_elements$Element$Internal$Model$PointerEvents(true),
								attrs)
						}));
			}
		} else {
			return elm;
		}
	} else {
		return elm;
	}
};
var mdgriffith$style_elements$Element$Internal$Model$Above = {$: 'Above'};
var mdgriffith$style_elements$Element$Internal$Model$Absolute = function (a) {
	return {$: 'Absolute', a: a};
};
var mdgriffith$style_elements$Element$Internal$Model$Below = {$: 'Below'};
var mdgriffith$style_elements$Element$Internal$Model$Bottom = {$: 'Bottom'};
var mdgriffith$style_elements$Element$Internal$Model$BottomLeft = {$: 'BottomLeft'};
var mdgriffith$style_elements$Element$Internal$Model$Relative = {$: 'Relative'};
var mdgriffith$style_elements$Element$Internal$Model$Top = {$: 'Top'};
var mdgriffith$style_elements$Element$Internal$Model$TopLeft = {$: 'TopLeft'};
var mdgriffith$style_elements$Element$Internal$Modify$addAttrList = F2(
	function (props, el) {
		switch (el.$) {
			case 'Empty':
				return mdgriffith$style_elements$Element$Internal$Model$Empty;
			case 'Spacer':
				var x = el.a;
				return mdgriffith$style_elements$Element$Internal$Model$Spacer(x);
			case 'Raw':
				var h = el.a;
				return mdgriffith$style_elements$Element$Internal$Model$Raw(h);
			case 'Layout':
				var elm = el.a;
				return mdgriffith$style_elements$Element$Internal$Model$Layout(
					_Utils_update(
						elm,
						{
							attrs: _Utils_ap(props, elm.attrs)
						}));
			case 'Element':
				var elm = el.a;
				return mdgriffith$style_elements$Element$Internal$Model$Element(
					_Utils_update(
						elm,
						{
							attrs: _Utils_ap(props, elm.attrs)
						}));
			default:
				var dec = el.a;
				var content = el.b;
				return mdgriffith$style_elements$Element$Internal$Model$Element(
					{
						absolutelyPositioned: elm$core$Maybe$Nothing,
						attrs: props,
						child: A2(mdgriffith$style_elements$Element$Internal$Model$Text, dec, content),
						node: 'div',
						style: elm$core$Maybe$Nothing
					});
		}
	});
var mdgriffith$style_elements$Element$Internal$Modify$addAttrPriority = F2(
	function (prop, el) {
		switch (el.$) {
			case 'Empty':
				return mdgriffith$style_elements$Element$Internal$Model$Empty;
			case 'Raw':
				var h = el.a;
				return mdgriffith$style_elements$Element$Internal$Model$Raw(h);
			case 'Spacer':
				var x = el.a;
				return mdgriffith$style_elements$Element$Internal$Model$Spacer(x);
			case 'Layout':
				var elm = el.a;
				return mdgriffith$style_elements$Element$Internal$Model$Layout(
					_Utils_update(
						elm,
						{
							attrs: _Utils_ap(
								elm.attrs,
								_List_fromArray(
									[prop]))
						}));
			case 'Element':
				var elm = el.a;
				return mdgriffith$style_elements$Element$Internal$Model$Element(
					_Utils_update(
						elm,
						{
							attrs: _Utils_ap(
								elm.attrs,
								_List_fromArray(
									[prop]))
						}));
			default:
				var dec = el.a;
				var content = el.b;
				return mdgriffith$style_elements$Element$Internal$Model$Element(
					{
						absolutelyPositioned: elm$core$Maybe$Nothing,
						attrs: _List_fromArray(
							[prop]),
						child: A2(mdgriffith$style_elements$Element$Internal$Model$Text, dec, content),
						node: 'div',
						style: elm$core$Maybe$Nothing
					});
		}
	});
var mdgriffith$style_elements$Element$Internal$Modify$setAttrs = F2(
	function (props, el) {
		switch (el.$) {
			case 'Empty':
				return mdgriffith$style_elements$Element$Internal$Model$Empty;
			case 'Spacer':
				var x = el.a;
				return mdgriffith$style_elements$Element$Internal$Model$Spacer(x);
			case 'Raw':
				var h = el.a;
				return mdgriffith$style_elements$Element$Internal$Model$Raw(h);
			case 'Layout':
				var elm = el.a;
				return mdgriffith$style_elements$Element$Internal$Model$Layout(
					_Utils_update(
						elm,
						{attrs: props}));
			case 'Element':
				var elm = el.a;
				return mdgriffith$style_elements$Element$Internal$Model$Element(
					_Utils_update(
						elm,
						{attrs: props}));
			default:
				var dec = el.a;
				var content = el.b;
				return A2(mdgriffith$style_elements$Element$Internal$Model$Text, dec, content);
		}
	});
var mdgriffith$style_elements$Style$Internal$Model$Percent = function (a) {
	return {$: 'Percent', a: a};
};
var mdgriffith$style_elements$Element$Internal$Adjustments$positionNearby = F2(
	function (parent, elm) {
		var setPosition = F3(
			function (nearbyPosition, _n24, el) {
				var aligned = _n24.a;
				var unaligned = _n24.b;
				var nearbyAlignment = function () {
					_n19$4:
					while (true) {
						if ((nearbyPosition.$ === 'Just') && (nearbyPosition.a.$ === 'Nearby')) {
							switch (nearbyPosition.a.a.$) {
								case 'Above':
									var _n20 = nearbyPosition.a.a;
									return _List_fromArray(
										[
											mdgriffith$style_elements$Element$Internal$Model$VAlign(mdgriffith$style_elements$Element$Internal$Model$Top)
										]);
								case 'Below':
									var _n21 = nearbyPosition.a.a;
									return _List_fromArray(
										[
											mdgriffith$style_elements$Element$Internal$Model$VAlign(mdgriffith$style_elements$Element$Internal$Model$Bottom)
										]);
								case 'OnRight':
									var _n22 = nearbyPosition.a.a;
									return _List_fromArray(
										[
											mdgriffith$style_elements$Element$Internal$Model$HAlign(mdgriffith$style_elements$Element$Internal$Model$Right)
										]);
								case 'OnLeft':
									var _n23 = nearbyPosition.a.a;
									return _List_fromArray(
										[
											mdgriffith$style_elements$Element$Internal$Model$HAlign(mdgriffith$style_elements$Element$Internal$Model$Left)
										]);
								default:
									break _n19$4;
							}
						} else {
							break _n19$4;
						}
					}
					return _List_Nil;
				}();
				var isLayout = function () {
					if (elm.$ === 'Layout') {
						return true;
					} else {
						return false;
					}
				}();
				var framed = function () {
					if (nearbyPosition.$ === 'Nothing') {
						return false;
					} else {
						return true;
					}
				}();
				var forWidth = function (prop) {
					if (prop.$ === 'Width') {
						return true;
					} else {
						return false;
					}
				};
				var width = elm$core$List$head(
					elm$core$List$reverse(
						A2(elm$core$List$filter, forWidth, unaligned)));
				var forHeight = function (prop) {
					if (prop.$ === 'Height') {
						return true;
					} else {
						return false;
					}
				};
				var height = elm$core$List$head(
					elm$core$List$reverse(
						A2(elm$core$List$filter, forHeight, unaligned)));
				var adjustWidthHeight = function (elem) {
					var adjustWidth = function (element) {
						if (width.$ === 'Nothing') {
							return element;
						} else {
							if ((width.a.$ === 'Width') && (width.a.a.$ === 'Percent')) {
								var percent = width.a.a.a;
								return A2(
									mdgriffith$style_elements$Element$Internal$Modify$addAttrPriority,
									mdgriffith$style_elements$Element$Internal$Model$Width(
										mdgriffith$style_elements$Style$Internal$Model$Percent(100)),
									element);
							} else {
								var x = width.a;
								return element;
							}
						}
					};
					var adjustHeight = function (element) {
						if (height.$ === 'Nothing') {
							return element;
						} else {
							if ((height.a.$ === 'Height') && (height.a.a.$ === 'Percent')) {
								var percent = height.a.a.a;
								return A2(
									mdgriffith$style_elements$Element$Internal$Modify$addAttrPriority,
									mdgriffith$style_elements$Element$Internal$Model$Width(
										mdgriffith$style_elements$Style$Internal$Model$Percent(100)),
									element);
							} else {
								var x = height.a;
								return element;
							}
						}
					};
					return adjustHeight(
						adjustWidth(elem));
				};
				var addWidthHeight = function (attrs) {
					var _n8 = _Utils_Tuple2(width, height);
					if (_n8.a.$ === 'Nothing') {
						if (_n8.b.$ === 'Nothing') {
							var _n9 = _n8.a;
							var _n10 = _n8.b;
							return attrs;
						} else {
							var _n11 = _n8.a;
							var h = _n8.b.a;
							return A2(elm$core$List$cons, h, attrs);
						}
					} else {
						if (_n8.b.$ === 'Just') {
							var w = _n8.a.a;
							var h = _n8.b.a;
							return A2(
								elm$core$List$cons,
								w,
								A2(elm$core$List$cons, h, attrs));
						} else {
							var w = _n8.a.a;
							var _n12 = _n8.b;
							return A2(elm$core$List$cons, w, attrs);
						}
					}
				};
				return (_Utils_eq(
					nearbyPosition,
					elm$core$Maybe$Just(
						mdgriffith$style_elements$Element$Internal$Model$Nearby(mdgriffith$style_elements$Element$Internal$Model$Above))) || _Utils_eq(
					nearbyPosition,
					elm$core$Maybe$Just(
						mdgriffith$style_elements$Element$Internal$Model$Nearby(mdgriffith$style_elements$Element$Internal$Model$Below)))) ? mdgriffith$style_elements$Element$Internal$Model$Layout(
					{
						absolutelyPositioned: elm$core$Maybe$Nothing,
						attrs: A2(
							elm$core$List$cons,
							mdgriffith$style_elements$Element$Internal$Adjustments$tag('above-below-intermediate-parent'),
							A2(
								elm$core$List$cons,
								mdgriffith$style_elements$Element$Internal$Model$PointerEvents(false),
								A2(
									elm$core$List$cons,
									mdgriffith$style_elements$Element$Internal$Model$Height(
										mdgriffith$style_elements$Style$Internal$Model$Px(0)),
									A2(
										elm$core$List$cons,
										mdgriffith$style_elements$Element$Internal$Model$Width(
											mdgriffith$style_elements$Style$Internal$Model$Percent(100)),
										A2(
											elm$core$List$cons,
											mdgriffith$style_elements$Element$Internal$Model$PositionFrame(
												mdgriffith$style_elements$Element$Internal$Model$Absolute(
													_Utils_eq(
														nearbyPosition,
														elm$core$Maybe$Just(
															mdgriffith$style_elements$Element$Internal$Model$Nearby(mdgriffith$style_elements$Element$Internal$Model$Above))) ? mdgriffith$style_elements$Element$Internal$Model$TopLeft : mdgriffith$style_elements$Element$Internal$Model$BottomLeft)),
											A2(
												elm$core$List$cons,
												A3(
													mdgriffith$style_elements$Element$Internal$Model$Position,
													elm$core$Maybe$Just(0),
													elm$core$Maybe$Just(0),
													elm$core$Maybe$Nothing),
												isLayout ? nearbyAlignment : _Utils_ap(nearbyAlignment, aligned))))))),
						children: mdgriffith$style_elements$Element$Internal$Model$Normal(
							_List_fromArray(
								[
									mdgriffith$style_elements$Element$Internal$Model$Element(
									{
										absolutelyPositioned: elm$core$Maybe$Nothing,
										attrs: function () {
											var addWidth = function (attrs) {
												return isLayout ? A2(
													elm$core$List$cons,
													mdgriffith$style_elements$Element$Internal$Model$Width(
														mdgriffith$style_elements$Style$Internal$Model$Percent(100)),
													attrs) : attrs;
											};
											return addWidth(
												_List_fromArray(
													[
														mdgriffith$style_elements$Element$Internal$Adjustments$tag('above-below-intermediate'),
														mdgriffith$style_elements$Element$Internal$Model$PointerEvents(false),
														mdgriffith$style_elements$Element$Internal$Model$PositionFrame(
														mdgriffith$style_elements$Element$Internal$Model$Absolute(
															_Utils_eq(
																nearbyPosition,
																elm$core$Maybe$Just(
																	mdgriffith$style_elements$Element$Internal$Model$Nearby(mdgriffith$style_elements$Element$Internal$Model$Above))) ? mdgriffith$style_elements$Element$Internal$Model$BottomLeft : mdgriffith$style_elements$Element$Internal$Model$TopLeft)),
														A3(
														mdgriffith$style_elements$Element$Internal$Model$Position,
														elm$core$Maybe$Nothing,
														elm$core$Maybe$Just(0),
														elm$core$Maybe$Nothing),
														mdgriffith$style_elements$Element$Internal$Model$VAlign(mdgriffith$style_elements$Element$Internal$Model$Bottom),
														mdgriffith$style_elements$Element$Internal$Model$Attr(
														A2(elm$html$Html$Attributes$style, 'z-index', '10'))
													]));
										}(),
										child: mdgriffith$style_elements$Element$Internal$Adjustments$counterSpacing(
											A2(
												mdgriffith$style_elements$Element$Internal$Modify$setAttrs,
												A2(
													elm$core$List$cons,
													mdgriffith$style_elements$Element$Internal$Model$PointerEvents(true),
													A2(
														elm$core$List$cons,
														mdgriffith$style_elements$Element$Internal$Model$PositionFrame(
															mdgriffith$style_elements$Element$Internal$Model$Absolute(mdgriffith$style_elements$Element$Internal$Model$TopLeft)),
														A2(
															elm$core$List$cons,
															A3(
																mdgriffith$style_elements$Element$Internal$Model$Position,
																elm$core$Maybe$Just(0),
																elm$core$Maybe$Just(0),
																elm$core$Maybe$Nothing),
															unaligned))),
												el)),
										node: 'div',
										style: elm$core$Maybe$Nothing
									})
								])),
						layout: A2(mdgriffith$style_elements$Style$Internal$Model$FlexLayout, mdgriffith$style_elements$Style$Internal$Model$GoRight, _List_Nil),
						node: 'div',
						style: elm$core$Maybe$Nothing
					}) : (framed ? mdgriffith$style_elements$Element$Internal$Model$Layout(
					{
						absolutelyPositioned: elm$core$Maybe$Nothing,
						attrs: A2(
							elm$core$List$cons,
							mdgriffith$style_elements$Element$Internal$Adjustments$tag('nearby-intermediate-parent'),
							A2(
								elm$core$List$cons,
								mdgriffith$style_elements$Element$Internal$Model$PointerEvents(false),
								A2(
									elm$core$List$cons,
									mdgriffith$style_elements$Element$Internal$Model$Height(
										mdgriffith$style_elements$Style$Internal$Model$Percent(100)),
									A2(
										elm$core$List$cons,
										mdgriffith$style_elements$Element$Internal$Model$Width(
											mdgriffith$style_elements$Style$Internal$Model$Percent(100)),
										A2(
											elm$core$List$cons,
											mdgriffith$style_elements$Element$Internal$Model$PositionFrame(
												mdgriffith$style_elements$Element$Internal$Model$Absolute(mdgriffith$style_elements$Element$Internal$Model$TopLeft)),
											A2(
												elm$core$List$cons,
												A3(
													mdgriffith$style_elements$Element$Internal$Model$Position,
													elm$core$Maybe$Just(0),
													elm$core$Maybe$Just(0),
													elm$core$Maybe$Nothing),
												isLayout ? nearbyAlignment : _Utils_ap(nearbyAlignment, aligned))))))),
						children: mdgriffith$style_elements$Element$Internal$Model$Normal(
							_List_fromArray(
								[
									mdgriffith$style_elements$Element$Internal$Model$Element(
									{
										absolutelyPositioned: elm$core$Maybe$Nothing,
										attrs: addWidthHeight(
											_List_fromArray(
												[
													mdgriffith$style_elements$Element$Internal$Model$PointerEvents(false),
													mdgriffith$style_elements$Element$Internal$Model$PositionFrame(mdgriffith$style_elements$Element$Internal$Model$Relative),
													A3(
													mdgriffith$style_elements$Element$Internal$Model$Position,
													elm$core$Maybe$Just(0),
													elm$core$Maybe$Just(0),
													elm$core$Maybe$Nothing),
													A4(
													mdgriffith$style_elements$Element$Internal$Model$Padding,
													elm$core$Maybe$Just(0),
													elm$core$Maybe$Just(0),
													elm$core$Maybe$Just(0),
													elm$core$Maybe$Just(0)),
													mdgriffith$style_elements$Element$Internal$Model$Attr(
													A2(elm$html$Html$Attributes$style, 'z-index', '10')),
													mdgriffith$style_elements$Element$Internal$Adjustments$tag('nearby-intermediate')
												])),
										child: mdgriffith$style_elements$Element$Internal$Adjustments$counterSpacing(
											adjustWidthHeight(
												A2(
													mdgriffith$style_elements$Element$Internal$Modify$addAttrList,
													A2(
														elm$core$List$cons,
														mdgriffith$style_elements$Element$Internal$Model$PointerEvents(true),
														A2(
															elm$core$List$cons,
															mdgriffith$style_elements$Element$Internal$Model$PositionFrame(
																mdgriffith$style_elements$Element$Internal$Model$Absolute(mdgriffith$style_elements$Element$Internal$Model$TopLeft)),
															A2(
																elm$core$List$cons,
																A3(
																	mdgriffith$style_elements$Element$Internal$Model$Position,
																	elm$core$Maybe$Just(0),
																	elm$core$Maybe$Just(0),
																	elm$core$Maybe$Nothing),
																_List_Nil))),
													el))),
										node: 'div',
										style: elm$core$Maybe$Nothing
									})
								])),
						layout: A2(mdgriffith$style_elements$Style$Internal$Model$FlexLayout, mdgriffith$style_elements$Style$Internal$Model$GoRight, _List_Nil),
						node: 'div',
						style: elm$core$Maybe$Nothing
					}) : ((!elm$core$List$isEmpty(aligned)) ? mdgriffith$style_elements$Element$Internal$Model$Layout(
					{
						absolutelyPositioned: elm$core$Maybe$Nothing,
						attrs: A2(
							elm$core$List$cons,
							mdgriffith$style_elements$Element$Internal$Adjustments$tag('nearby-aligned-intermediate-parent'),
							A2(
								elm$core$List$cons,
								mdgriffith$style_elements$Element$Internal$Model$PointerEvents(false),
								A2(
									elm$core$List$cons,
									mdgriffith$style_elements$Element$Internal$Model$Height(
										mdgriffith$style_elements$Style$Internal$Model$Percent(100)),
									A2(
										elm$core$List$cons,
										mdgriffith$style_elements$Element$Internal$Model$Width(
											mdgriffith$style_elements$Style$Internal$Model$Percent(100)),
										A2(
											elm$core$List$cons,
											mdgriffith$style_elements$Element$Internal$Model$PositionFrame(mdgriffith$style_elements$Element$Internal$Model$Relative),
											A2(
												elm$core$List$cons,
												A3(
													mdgriffith$style_elements$Element$Internal$Model$Position,
													elm$core$Maybe$Just(0),
													elm$core$Maybe$Just(0),
													elm$core$Maybe$Nothing),
												isLayout ? nearbyAlignment : _Utils_ap(nearbyAlignment, aligned))))))),
						children: mdgriffith$style_elements$Element$Internal$Model$Normal(
							_List_fromArray(
								[
									mdgriffith$style_elements$Element$Internal$Model$Element(
									{
										absolutelyPositioned: elm$core$Maybe$Nothing,
										attrs: addWidthHeight(
											_List_fromArray(
												[
													mdgriffith$style_elements$Element$Internal$Model$PointerEvents(false),
													mdgriffith$style_elements$Element$Internal$Model$PositionFrame(mdgriffith$style_elements$Element$Internal$Model$Relative),
													A3(
													mdgriffith$style_elements$Element$Internal$Model$Position,
													elm$core$Maybe$Just(0),
													elm$core$Maybe$Just(0),
													elm$core$Maybe$Nothing),
													A4(
													mdgriffith$style_elements$Element$Internal$Model$Padding,
													elm$core$Maybe$Just(0),
													elm$core$Maybe$Just(0),
													elm$core$Maybe$Just(0),
													elm$core$Maybe$Just(0)),
													mdgriffith$style_elements$Element$Internal$Adjustments$tag('nearby-aligned-intermediate')
												])),
										child: mdgriffith$style_elements$Element$Internal$Adjustments$counterSpacing(
											adjustWidthHeight(
												A2(
													mdgriffith$style_elements$Element$Internal$Modify$addAttrList,
													A2(
														elm$core$List$cons,
														mdgriffith$style_elements$Element$Internal$Model$PointerEvents(true),
														A2(
															elm$core$List$cons,
															mdgriffith$style_elements$Element$Internal$Model$PositionFrame(mdgriffith$style_elements$Element$Internal$Model$Relative),
															A2(
																elm$core$List$cons,
																A3(
																	mdgriffith$style_elements$Element$Internal$Model$Position,
																	elm$core$Maybe$Just(0),
																	elm$core$Maybe$Just(0),
																	elm$core$Maybe$Nothing),
																_List_Nil))),
													el))),
										node: 'div',
										style: elm$core$Maybe$Nothing
									})
								])),
						layout: A2(mdgriffith$style_elements$Style$Internal$Model$FlexLayout, mdgriffith$style_elements$Style$Internal$Model$GoRight, _List_Nil),
						node: 'div',
						style: elm$core$Maybe$Nothing
					}) : mdgriffith$style_elements$Element$Internal$Adjustments$counterSpacing(elm)));
			});
		var forAlignment = function (attr) {
			switch (attr.$) {
				case 'HAlign':
					return true;
				case 'VAlign':
					return true;
				default:
					return false;
			}
		};
		var separateAlignment = function (attrs) {
			return A2(elm$core$List$partition, forAlignment, attrs);
		};
		switch (elm.$) {
			case 'Element':
				var attrs = elm.a.attrs;
				var isFrame = function (attr) {
					if (attr.$ === 'PositionFrame') {
						var x = attr.a;
						return elm$core$Maybe$Just(x);
					} else {
						return elm$core$Maybe$Nothing;
					}
				};
				var frame = elm$core$List$head(
					A2(elm$core$List$filterMap, isFrame, attrs));
				var _n1 = separateAlignment(attrs);
				var aligned = _n1.a;
				var unaligned = _n1.b;
				if (parent.$ === 'Nothing') {
					return A3(
						setPosition,
						frame,
						_Utils_Tuple2(aligned, unaligned),
						elm);
				} else {
					return elm;
				}
			case 'Layout':
				var attrs = elm.a.attrs;
				var isFrame = function (attr) {
					if (attr.$ === 'PositionFrame') {
						var x = attr.a;
						return elm$core$Maybe$Just(x);
					} else {
						return elm$core$Maybe$Nothing;
					}
				};
				var frame = elm$core$List$head(
					A2(elm$core$List$filterMap, isFrame, attrs));
				var _n4 = separateAlignment(attrs);
				var aligned = _n4.a;
				var unaligned = _n4.b;
				if (parent.$ === 'Nothing') {
					return A3(
						setPosition,
						frame,
						_Utils_Tuple2(aligned, unaligned),
						elm);
				} else {
					return mdgriffith$style_elements$Element$Internal$Adjustments$counterSpacing(elm);
				}
			default:
				return mdgriffith$style_elements$Element$Internal$Adjustments$counterSpacing(elm);
		}
	});
var mdgriffith$style_elements$Element$Internal$Model$adjust = F3(
	function (fn, parent, elemen) {
		var merge = F2(
			function (el, current) {
				if (el.$ === 'Nothing') {
					return current;
				} else {
					var something = el.a;
					if (current.$ === 'Nothing') {
						return el;
					} else {
						var cur = current.a;
						return elm$core$Maybe$Just(
							_Utils_ap(something, cur));
					}
				}
			});
		var maybeOnEmptyList = function (list) {
			return elm$core$List$isEmpty(list) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(list);
		};
		switch (elemen.$) {
			case 'Element':
				var elm = elemen.a;
				var child = elm.child;
				var absolutelyPositioned = elm.absolutelyPositioned;
				var adjustAndMerge = F2(
					function (el, _n8) {
						var adjustedAggregate = _n8.a;
						var dataAggregate = _n8.b;
						var _n6 = A3(mdgriffith$style_elements$Element$Internal$Model$adjust, fn, elm$core$Maybe$Nothing, el);
						var adjusted = _n6.a;
						var data = _n6.b;
						if (data.$ === 'Nothing') {
							return _Utils_Tuple2(
								A2(elm$core$List$cons, adjusted, adjustedAggregate),
								dataAggregate);
						} else {
							var d = data.a;
							return _Utils_Tuple2(
								A2(elm$core$List$cons, adjusted, adjustedAggregate),
								_Utils_ap(d, dataAggregate));
						}
					});
				var _n1 = function () {
					if (absolutelyPositioned.$ === 'Nothing') {
						return _Utils_Tuple2(elm$core$Maybe$Nothing, elm$core$Maybe$Nothing);
					} else {
						var others = absolutelyPositioned.a;
						return function (_n3) {
							var children = _n3.a;
							var onScreen = _n3.b;
							return _Utils_Tuple2(
								maybeOnEmptyList(children),
								maybeOnEmptyList(onScreen));
						}(
							A3(
								elm$core$List$foldr,
								adjustAndMerge,
								_Utils_Tuple2(_List_Nil, _List_Nil),
								others));
					}
				}();
				var adjustedOthers = _n1.a;
				var otherChildrenData = _n1.b;
				var _n4 = A3(mdgriffith$style_elements$Element$Internal$Model$adjust, fn, elm$core$Maybe$Nothing, child);
				var adjustedChild = _n4.a;
				var childData = _n4.b;
				var _n5 = A2(
					fn,
					parent,
					mdgriffith$style_elements$Element$Internal$Model$Element(
						_Utils_update(
							elm,
							{absolutelyPositioned: adjustedOthers, child: adjustedChild})));
				var adjustedEl = _n5.a;
				var elData = _n5.b;
				return _Utils_Tuple2(
					adjustedEl,
					A3(
						elm$core$List$foldr,
						merge,
						elm$core$Maybe$Nothing,
						_List_fromArray(
							[childData, otherChildrenData, elData])));
			case 'Layout':
				var elm = elemen.a;
				var adjustAndMergeKeyed = F3(
					function (usingParent, _n22, _n23) {
						var key = _n22.a;
						var el = _n22.b;
						var adjustedAggregate = _n23.a;
						var dataAggregate = _n23.b;
						var _n20 = A3(mdgriffith$style_elements$Element$Internal$Model$adjust, fn, usingParent, el);
						var adjusted = _n20.a;
						var data = _n20.b;
						if (data.$ === 'Nothing') {
							return _Utils_Tuple2(
								A2(
									elm$core$List$cons,
									_Utils_Tuple2(key, adjusted),
									adjustedAggregate),
								dataAggregate);
						} else {
							var d = data.a;
							return _Utils_Tuple2(
								A2(
									elm$core$List$cons,
									_Utils_Tuple2(key, adjusted),
									adjustedAggregate),
								_Utils_ap(d, dataAggregate));
						}
					});
				var adjustAndMerge = F3(
					function (usingParent, el, _n19) {
						var adjustedAggregate = _n19.a;
						var dataAggregate = _n19.b;
						var _n17 = A3(mdgriffith$style_elements$Element$Internal$Model$adjust, fn, usingParent, el);
						var adjusted = _n17.a;
						var data = _n17.b;
						if (data.$ === 'Nothing') {
							return _Utils_Tuple2(
								A2(elm$core$List$cons, adjusted, adjustedAggregate),
								dataAggregate);
						} else {
							var d = data.a;
							return _Utils_Tuple2(
								A2(elm$core$List$cons, adjusted, adjustedAggregate),
								_Utils_ap(d, dataAggregate));
						}
					});
				var _n9 = function () {
					var _n10 = elm.absolutelyPositioned;
					if (_n10.$ === 'Nothing') {
						return _Utils_Tuple2(elm$core$Maybe$Nothing, elm$core$Maybe$Nothing);
					} else {
						var others = _n10.a;
						return function (_n11) {
							var children = _n11.a;
							var onScreen = _n11.b;
							return _Utils_Tuple2(
								maybeOnEmptyList(children),
								maybeOnEmptyList(onScreen));
						}(
							A3(
								elm$core$List$foldr,
								adjustAndMerge(elm$core$Maybe$Nothing),
								_Utils_Tuple2(_List_Nil, _List_Nil),
								others));
					}
				}();
				var adjustedOthers = _n9.a;
				var otherChildrenData = _n9.b;
				var _n12 = function () {
					var _n13 = elm.children;
					if (_n13.$ === 'Normal') {
						var normalChildren = _n13.a;
						var _n14 = A3(
							elm$core$List$foldr,
							adjustAndMerge(
								elm$core$Maybe$Just(elm.layout)),
							_Utils_Tuple2(_List_Nil, _List_Nil),
							normalChildren);
						var adjusted = _n14.a;
						var data = _n14.b;
						return _Utils_Tuple2(
							mdgriffith$style_elements$Element$Internal$Model$Normal(adjusted),
							maybeOnEmptyList(data));
					} else {
						var keyedChildren = _n13.a;
						var _n15 = A3(
							elm$core$List$foldr,
							adjustAndMergeKeyed(
								elm$core$Maybe$Just(elm.layout)),
							_Utils_Tuple2(_List_Nil, _List_Nil),
							keyedChildren);
						var adjusted = _n15.a;
						var data = _n15.b;
						return _Utils_Tuple2(
							mdgriffith$style_elements$Element$Internal$Model$Keyed(adjusted),
							maybeOnEmptyList(data));
					}
				}();
				var adjustedChildren = _n12.a;
				var childrenData = _n12.b;
				var _n16 = A2(
					fn,
					parent,
					mdgriffith$style_elements$Element$Internal$Model$Layout(
						_Utils_update(
							elm,
							{absolutelyPositioned: adjustedOthers, children: adjustedChildren})));
				var adjustedLayout = _n16.a;
				var layoutData = _n16.b;
				return _Utils_Tuple2(
					adjustedLayout,
					A3(
						elm$core$List$foldr,
						merge,
						elm$core$Maybe$Nothing,
						_List_fromArray(
							[layoutData, childrenData, otherChildrenData])));
			default:
				return A2(fn, elm$core$Maybe$Nothing, elemen);
		}
	});
var mdgriffith$style_elements$Element$Internal$Adjustments$apply = function (root) {
	var stack = F2(
		function (parent, el) {
			return A3(
				elm$core$Basics$composeR,
				mdgriffith$style_elements$Element$Internal$Adjustments$centerTextLayout,
				A2(
					elm$core$Basics$composeR,
					mdgriffith$style_elements$Element$Internal$Adjustments$positionNearby(parent),
					mdgriffith$style_elements$Element$Internal$Adjustments$hoistFixedScreenElements),
				el);
		});
	return A3(mdgriffith$style_elements$Element$Internal$Model$adjust, stack, elm$core$Maybe$Nothing, root);
};
var mdgriffith$style_elements$Element$Internal$Render$FirstAndLast = {$: 'FirstAndLast'};
var elm$html$Html$em = _VirtualDom_node('em');
var elm$html$Html$s = _VirtualDom_node('s');
var elm$html$Html$span = _VirtualDom_node('span');
var elm$html$Html$strong = _VirtualDom_node('strong');
var elm$html$Html$sub = _VirtualDom_node('sub');
var elm$html$Html$sup = _VirtualDom_node('sup');
var elm$html$Html$u = _VirtualDom_node('u');
var elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var elm$html$Html$Keyed$node = elm$virtual_dom$VirtualDom$keyedNode;
var mdgriffith$style_elements$Element$Internal$Model$Inline = {$: 'Inline'};
var mdgriffith$style_elements$Element$Internal$Render$LayoutElement = function (a) {
	return {$: 'LayoutElement', a: a};
};
var mdgriffith$style_elements$Element$Internal$Render$Single = {$: 'Single'};
var mdgriffith$style_elements$Style$Internal$Model$Box = F4(
	function (a, b, c, d) {
		return {$: 'Box', a: a, b: b, c: c, d: d};
	});
var mdgriffith$style_elements$Element$Internal$Render$defaultPadding = F2(
	function (_n0, _n1) {
		var mW = _n0.a;
		var mX = _n0.b;
		var mY = _n0.c;
		var mZ = _n0.d;
		var w = _n1.a;
		var x = _n1.b;
		var y = _n1.c;
		var z = _n1.d;
		return A4(
			mdgriffith$style_elements$Style$Internal$Model$Box,
			A2(elm$core$Maybe$withDefault, w, mW),
			A2(elm$core$Maybe$withDefault, x, mX),
			A2(elm$core$Maybe$withDefault, y, mY),
			A2(elm$core$Maybe$withDefault, z, mZ));
	});
var mdgriffith$style_elements$Element$Internal$Render$First = {$: 'First'};
var mdgriffith$style_elements$Element$Internal$Render$Last = {$: 'Last'};
var mdgriffith$style_elements$Element$Internal$Render$Middle = function (a) {
	return {$: 'Middle', a: a};
};
var mdgriffith$style_elements$Element$Internal$Render$detectOrder = F2(
	function (list, i) {
		var len = elm$core$List$length(list);
		return ((!i) && (len === 1)) ? mdgriffith$style_elements$Element$Internal$Render$FirstAndLast : ((!i) ? mdgriffith$style_elements$Element$Internal$Render$First : (_Utils_eq(i, len - 1) ? mdgriffith$style_elements$Element$Internal$Render$Last : mdgriffith$style_elements$Element$Internal$Render$Middle(i)));
	});
var mdgriffith$style_elements$Element$Internal$Render$emptyPositionable = {
	attrs: _List_Nil,
	expand: false,
	frame: elm$core$Maybe$Nothing,
	gridPosition: elm$core$Maybe$Nothing,
	height: elm$core$Maybe$Nothing,
	hidden: false,
	horizontal: elm$core$Maybe$Nothing,
	inline: false,
	margin: elm$core$Maybe$Nothing,
	opacity: elm$core$Maybe$Nothing,
	overflow: elm$core$Maybe$Nothing,
	padding: A4(mdgriffith$style_elements$Style$Internal$Model$Box, elm$core$Maybe$Nothing, elm$core$Maybe$Nothing, elm$core$Maybe$Nothing, elm$core$Maybe$Nothing),
	pointerevents: elm$core$Maybe$Nothing,
	positioned: _Utils_Tuple3(elm$core$Maybe$Nothing, elm$core$Maybe$Nothing, elm$core$Maybe$Nothing),
	shrink: elm$core$Maybe$Nothing,
	variations: _List_Nil,
	vertical: elm$core$Maybe$Nothing,
	width: elm$core$Maybe$Nothing
};
var mdgriffith$style_elements$Style$Internal$Render$Value$gridPosition = function (_n0) {
	var start = _n0.a.start;
	var width = _n0.a.width;
	var height = _n0.a.height;
	var _n1 = start;
	var x = _n1.a;
	var y = _n1.b;
	var _n2 = _Utils_Tuple2(y + 1, (y + 1) + height);
	var rowStart = _n2.a;
	var rowEnd = _n2.b;
	var _n3 = _Utils_Tuple2(x + 1, (x + 1) + width);
	var colStart = _n3.a;
	var colEnd = _n3.b;
	return ((!width) || (!height)) ? elm$core$Maybe$Nothing : elm$core$Maybe$Just(
		A2(
			elm$core$String$join,
			' / ',
			_List_fromArray(
				[
					elm$core$String$fromInt(rowStart),
					elm$core$String$fromInt(colStart),
					elm$core$String$fromInt(rowEnd),
					elm$core$String$fromInt(colEnd)
				])));
};
var mdgriffith$style_elements$Element$Internal$Render$makePositionable = F2(
	function (attribute, pos) {
		switch (attribute.$) {
			case 'Overflow':
				var x = attribute.a;
				return _Utils_update(
					pos,
					{
						overflow: elm$core$Maybe$Just(x)
					});
			case 'Shrink':
				var i = attribute.a;
				return _Utils_update(
					pos,
					{
						shrink: elm$core$Maybe$Just(i)
					});
			case 'Inline':
				return _Utils_update(
					pos,
					{inline: true});
			case 'Expand':
				return _Utils_update(
					pos,
					{expand: true});
			case 'Vary':
				var vary = attribute.a;
				var on = attribute.b;
				return _Utils_update(
					pos,
					{
						variations: A2(
							elm$core$List$cons,
							_Utils_Tuple2(vary, on),
							pos.variations)
					});
			case 'Height':
				var len = attribute.a;
				return _Utils_update(
					pos,
					{
						height: elm$core$Maybe$Just(len)
					});
			case 'Width':
				var len = attribute.a;
				return _Utils_update(
					pos,
					{
						width: elm$core$Maybe$Just(len)
					});
			case 'Position':
				var x = attribute.a;
				var y = attribute.b;
				var z = attribute.c;
				var _n1 = pos.positioned;
				var currentX = _n1.a;
				var currentY = _n1.b;
				var currentZ = _n1.c;
				var newX = function () {
					if (x.$ === 'Nothing') {
						return currentX;
					} else {
						var a = x.a;
						return elm$core$Maybe$Just(a);
					}
				}();
				var newY = function () {
					if (y.$ === 'Nothing') {
						return currentY;
					} else {
						var a = y.a;
						return elm$core$Maybe$Just(a);
					}
				}();
				var newZ = function () {
					if (z.$ === 'Nothing') {
						return currentZ;
					} else {
						var a = z.a;
						return elm$core$Maybe$Just(a);
					}
				}();
				return _Utils_update(
					pos,
					{
						positioned: _Utils_Tuple3(newX, newY, newZ)
					});
			case 'PositionFrame':
				var frame = attribute.a;
				return _Utils_update(
					pos,
					{
						frame: elm$core$Maybe$Just(frame)
					});
			case 'HAlign':
				var alignment = attribute.a;
				return _Utils_update(
					pos,
					{
						horizontal: elm$core$Maybe$Just(alignment)
					});
			case 'VAlign':
				var alignment = attribute.a;
				return _Utils_update(
					pos,
					{
						vertical: elm$core$Maybe$Just(alignment)
					});
			case 'Spacing':
				var spaceX = attribute.a;
				var spaceY = attribute.b;
				return pos;
			case 'Margin':
				var t = attribute.a;
				var r = attribute.b;
				var b = attribute.c;
				var l = attribute.d;
				return _Utils_update(
					pos,
					{
						margin: elm$core$Maybe$Just(
							A4(mdgriffith$style_elements$Style$Internal$Model$Box, t, r, b, l))
					});
			case 'PhantomPadding':
				return pos;
			case 'Padding':
				var top = attribute.a;
				var right = attribute.b;
				var bottom = attribute.c;
				var left = attribute.d;
				var _n5 = pos.padding;
				var currentTop = _n5.a;
				var currentRight = _n5.b;
				var currentBottom = _n5.c;
				var currentLeft = _n5.d;
				var newBottom = function () {
					if (bottom.$ === 'Nothing') {
						return currentBottom;
					} else {
						var a = bottom.a;
						return elm$core$Maybe$Just(a);
					}
				}();
				var newLeft = function () {
					if (left.$ === 'Nothing') {
						return currentLeft;
					} else {
						var a = left.a;
						return elm$core$Maybe$Just(a);
					}
				}();
				var newRight = function () {
					if (right.$ === 'Nothing') {
						return currentRight;
					} else {
						var a = right.a;
						return elm$core$Maybe$Just(a);
					}
				}();
				var newTop = function () {
					if (top.$ === 'Nothing') {
						return currentTop;
					} else {
						var a = top.a;
						return elm$core$Maybe$Just(a);
					}
				}();
				return _Utils_update(
					pos,
					{
						padding: A4(mdgriffith$style_elements$Style$Internal$Model$Box, newTop, newRight, newBottom, newLeft)
					});
			case 'Hidden':
				return _Utils_update(
					pos,
					{hidden: true});
			case 'Opacity':
				var t = attribute.a;
				return _Utils_update(
					pos,
					{
						opacity: elm$core$Maybe$Just(t)
					});
			case 'Event':
				var ev = attribute.a;
				return _Utils_update(
					pos,
					{
						attrs: A2(elm$core$List$cons, ev, pos.attrs)
					});
			case 'InputEvent':
				var ev = attribute.a;
				return _Utils_update(
					pos,
					{
						attrs: A2(elm$core$List$cons, ev, pos.attrs)
					});
			case 'Attr':
				var attr = attribute.a;
				return _Utils_update(
					pos,
					{
						attrs: A2(elm$core$List$cons, attr, pos.attrs)
					});
			case 'PointerEvents':
				var on = attribute.a;
				return _Utils_update(
					pos,
					{
						pointerevents: elm$core$Maybe$Just(on)
					});
			case 'GridArea':
				var name = attribute.a;
				return _Utils_update(
					pos,
					{
						gridPosition: elm$core$Maybe$Just(name)
					});
			default:
				var coords = attribute.a;
				var _n10 = mdgriffith$style_elements$Style$Internal$Render$Value$gridPosition(coords);
				if (_n10.$ === 'Nothing') {
					return _Utils_update(
						pos,
						{hidden: true});
				} else {
					var xy = _n10.a;
					return _Utils_update(
						pos,
						{
							gridPosition: elm$core$Maybe$Just(xy)
						});
				}
		}
	});
var mdgriffith$style_elements$Element$Internal$Render$gather = function (attrs) {
	return A3(elm$core$List$foldl, mdgriffith$style_elements$Element$Internal$Render$makePositionable, mdgriffith$style_elements$Element$Internal$Render$emptyPositionable, attrs);
};
var elm$html$Html$Attributes$classList = function (classes) {
	return elm$html$Html$Attributes$class(
		A2(
			elm$core$String$join,
			' ',
			A2(
				elm$core$List$map,
				elm$core$Tuple$first,
				A2(elm$core$List$filter, elm$core$Tuple$second, classes))));
};
var mdgriffith$style_elements$Style$Internal$Model$Bottom = {$: 'Bottom'};
var mdgriffith$style_elements$Style$Internal$Model$Center = {$: 'Center'};
var mdgriffith$style_elements$Style$Internal$Model$Grid = F2(
	function (a, b) {
		return {$: 'Grid', a: a, b: b};
	});
var mdgriffith$style_elements$Style$Internal$Model$GridH = function (a) {
	return {$: 'GridH', a: a};
};
var mdgriffith$style_elements$Style$Internal$Model$GridV = function (a) {
	return {$: 'GridV', a: a};
};
var mdgriffith$style_elements$Style$Internal$Model$Horz = function (a) {
	return {$: 'Horz', a: a};
};
var mdgriffith$style_elements$Style$Internal$Model$Justify = {$: 'Justify'};
var mdgriffith$style_elements$Style$Internal$Model$Left = {$: 'Left'};
var mdgriffith$style_elements$Style$Internal$Model$Other = function (a) {
	return {$: 'Other', a: a};
};
var mdgriffith$style_elements$Style$Internal$Model$Right = {$: 'Right'};
var mdgriffith$style_elements$Style$Internal$Model$TextLayout = function (a) {
	return {$: 'TextLayout', a: a};
};
var mdgriffith$style_elements$Style$Internal$Model$Top = {$: 'Top'};
var mdgriffith$style_elements$Style$Internal$Model$Vert = function (a) {
	return {$: 'Vert', a: a};
};
var mdgriffith$style_elements$Element$Internal$Render$alignLayout = F3(
	function (maybeHorizontal, maybeVertical, layout) {
		var alignGridVertical = function (align) {
			switch (align.$) {
				case 'Top':
					return mdgriffith$style_elements$Style$Internal$Model$GridV(
						mdgriffith$style_elements$Style$Internal$Model$Other(mdgriffith$style_elements$Style$Internal$Model$Top));
				case 'Bottom':
					return mdgriffith$style_elements$Style$Internal$Model$GridV(
						mdgriffith$style_elements$Style$Internal$Model$Other(mdgriffith$style_elements$Style$Internal$Model$Bottom));
				case 'VerticalCenter':
					return mdgriffith$style_elements$Style$Internal$Model$GridV(mdgriffith$style_elements$Style$Internal$Model$Center);
				default:
					return mdgriffith$style_elements$Style$Internal$Model$GridV(mdgriffith$style_elements$Style$Internal$Model$Justify);
			}
		};
		var alignGridHorizontal = function (align) {
			switch (align.$) {
				case 'Left':
					return mdgriffith$style_elements$Style$Internal$Model$GridH(
						mdgriffith$style_elements$Style$Internal$Model$Other(mdgriffith$style_elements$Style$Internal$Model$Left));
				case 'Right':
					return mdgriffith$style_elements$Style$Internal$Model$GridH(
						mdgriffith$style_elements$Style$Internal$Model$Other(mdgriffith$style_elements$Style$Internal$Model$Right));
				case 'Center':
					return mdgriffith$style_elements$Style$Internal$Model$GridH(mdgriffith$style_elements$Style$Internal$Model$Center);
				default:
					return mdgriffith$style_elements$Style$Internal$Model$GridH(mdgriffith$style_elements$Style$Internal$Model$Justify);
			}
		};
		var alignFlexboxVertical = function (align) {
			switch (align.$) {
				case 'Top':
					return mdgriffith$style_elements$Style$Internal$Model$Vert(
						mdgriffith$style_elements$Style$Internal$Model$Other(mdgriffith$style_elements$Style$Internal$Model$Top));
				case 'Bottom':
					return mdgriffith$style_elements$Style$Internal$Model$Vert(
						mdgriffith$style_elements$Style$Internal$Model$Other(mdgriffith$style_elements$Style$Internal$Model$Bottom));
				case 'VerticalCenter':
					return mdgriffith$style_elements$Style$Internal$Model$Vert(mdgriffith$style_elements$Style$Internal$Model$Center);
				default:
					return mdgriffith$style_elements$Style$Internal$Model$Vert(mdgriffith$style_elements$Style$Internal$Model$Justify);
			}
		};
		var alignFlexboxHorizontal = function (align) {
			switch (align.$) {
				case 'Left':
					return mdgriffith$style_elements$Style$Internal$Model$Horz(
						mdgriffith$style_elements$Style$Internal$Model$Other(mdgriffith$style_elements$Style$Internal$Model$Left));
				case 'Right':
					return mdgriffith$style_elements$Style$Internal$Model$Horz(
						mdgriffith$style_elements$Style$Internal$Model$Other(mdgriffith$style_elements$Style$Internal$Model$Right));
				case 'Center':
					return mdgriffith$style_elements$Style$Internal$Model$Horz(mdgriffith$style_elements$Style$Internal$Model$Center);
				default:
					return mdgriffith$style_elements$Style$Internal$Model$Horz(mdgriffith$style_elements$Style$Internal$Model$Justify);
			}
		};
		switch (layout.$) {
			case 'TextLayout':
				var clearfix = layout.a;
				return mdgriffith$style_elements$Style$Internal$Model$TextLayout(clearfix);
			case 'FlexLayout':
				var dir = layout.a;
				var els = layout.b;
				var _n1 = _Utils_Tuple2(maybeHorizontal, maybeVertical);
				if (_n1.a.$ === 'Nothing') {
					if (_n1.b.$ === 'Nothing') {
						var _n2 = _n1.a;
						var _n3 = _n1.b;
						return A2(mdgriffith$style_elements$Style$Internal$Model$FlexLayout, dir, els);
					} else {
						var _n5 = _n1.a;
						var v = _n1.b.a;
						return A2(
							mdgriffith$style_elements$Style$Internal$Model$FlexLayout,
							dir,
							A2(
								elm$core$List$cons,
								alignFlexboxVertical(v),
								els));
					}
				} else {
					if (_n1.b.$ === 'Nothing') {
						var h = _n1.a.a;
						var _n4 = _n1.b;
						return A2(
							mdgriffith$style_elements$Style$Internal$Model$FlexLayout,
							dir,
							A2(
								elm$core$List$cons,
								alignFlexboxHorizontal(h),
								els));
					} else {
						var h = _n1.a.a;
						var v = _n1.b.a;
						return A2(
							mdgriffith$style_elements$Style$Internal$Model$FlexLayout,
							dir,
							A2(
								elm$core$List$cons,
								alignFlexboxHorizontal(h),
								A2(
									elm$core$List$cons,
									alignFlexboxVertical(v),
									els)));
					}
				}
			default:
				var template = layout.a;
				var els = layout.b;
				var _n6 = _Utils_Tuple2(maybeHorizontal, maybeVertical);
				if (_n6.a.$ === 'Nothing') {
					if (_n6.b.$ === 'Nothing') {
						var _n7 = _n6.a;
						var _n8 = _n6.b;
						return A2(mdgriffith$style_elements$Style$Internal$Model$Grid, template, els);
					} else {
						var _n10 = _n6.a;
						var v = _n6.b.a;
						return A2(
							mdgriffith$style_elements$Style$Internal$Model$Grid,
							template,
							A2(
								elm$core$List$cons,
								alignGridVertical(v),
								els));
					}
				} else {
					if (_n6.b.$ === 'Nothing') {
						var h = _n6.a.a;
						var _n9 = _n6.b;
						return A2(
							mdgriffith$style_elements$Style$Internal$Model$Grid,
							template,
							A2(
								elm$core$List$cons,
								alignGridHorizontal(h),
								els));
					} else {
						var h = _n6.a.a;
						var v = _n6.b.a;
						return A2(
							mdgriffith$style_elements$Style$Internal$Model$Grid,
							template,
							A2(
								elm$core$List$cons,
								alignGridHorizontal(h),
								A2(
									elm$core$List$cons,
									alignGridVertical(v),
									els)));
					}
				}
		}
	});
var mdgriffith$style_elements$Element$Internal$Render$calcPosition = F2(
	function (frame, _n0) {
		var mx = _n0.a;
		var my = _n0.b;
		var mz = _n0.c;
		var z = A2(elm$core$Maybe$withDefault, 0, mz);
		var y = A2(elm$core$Maybe$withDefault, 0, my);
		var x = A2(elm$core$Maybe$withDefault, 0, mx);
		switch (frame.$) {
			case 'Relative':
				return _List_fromArray(
					[
						_Utils_Tuple2('position', 'relative'),
						_Utils_Tuple2(
						'left',
						elm$core$String$fromFloat(x) + 'px'),
						_Utils_Tuple2(
						'top',
						elm$core$String$fromFloat(y) + 'px')
					]);
			case 'Screen':
				return _List_fromArray(
					[
						_Utils_Tuple2('position', 'fixed'),
						_Utils_Tuple2(
						'left',
						elm$core$String$fromFloat(x) + 'px'),
						_Utils_Tuple2(
						'top',
						elm$core$String$fromFloat(y) + 'px'),
						_Utils_Tuple2('z-index', '1000')
					]);
			case 'Absolute':
				if (frame.a.$ === 'TopLeft') {
					var _n2 = frame.a;
					return A2(
						elm$core$List$filterMap,
						elm$core$Basics$identity,
						_List_fromArray(
							[
								elm$core$Maybe$Just(
								_Utils_Tuple2('position', 'absolute')),
								function () {
								if (mx.$ === 'Just') {
									var xVal = mx.a;
									return elm$core$Maybe$Just(
										_Utils_Tuple2(
											'left',
											elm$core$String$fromFloat(xVal) + 'px'));
								} else {
									return elm$core$Maybe$Nothing;
								}
							}(),
								function () {
								if (my.$ === 'Just') {
									var yVal = my.a;
									return elm$core$Maybe$Just(
										_Utils_Tuple2(
											'top',
											elm$core$String$fromFloat(yVal) + 'px'));
								} else {
									return elm$core$Maybe$Nothing;
								}
							}()
							]));
				} else {
					var _n5 = frame.a;
					return A2(
						elm$core$List$filterMap,
						elm$core$Basics$identity,
						_List_fromArray(
							[
								elm$core$Maybe$Just(
								_Utils_Tuple2('position', 'absolute')),
								function () {
								if (mx.$ === 'Just') {
									var xVal = mx.a;
									return elm$core$Maybe$Just(
										_Utils_Tuple2(
											'left',
											elm$core$String$fromFloat(xVal) + 'px'));
								} else {
									return elm$core$Maybe$Nothing;
								}
							}(),
								function () {
								if (my.$ === 'Just') {
									var yVal = my.a;
									return elm$core$Maybe$Just(
										_Utils_Tuple2(
											'bottom',
											elm$core$String$fromFloat(yVal) + 'px'));
								} else {
									return elm$core$Maybe$Nothing;
								}
							}()
							]));
				}
			default:
				switch (frame.a.$) {
					case 'Within':
						var _n8 = frame.a;
						return _List_fromArray(
							[
								_Utils_Tuple2('position', 'relative'),
								_Utils_Tuple2(
								'top',
								elm$core$String$fromFloat(y) + 'px'),
								_Utils_Tuple2(
								'left',
								elm$core$String$fromFloat(x) + 'px')
							]);
					case 'Above':
						var _n9 = frame.a;
						return _List_fromArray(
							[
								_Utils_Tuple2('position', 'relative'),
								_Utils_Tuple2(
								'top',
								elm$core$String$fromFloat(y) + 'px'),
								_Utils_Tuple2(
								'left',
								elm$core$String$fromFloat(x) + 'px')
							]);
					case 'Below':
						var _n10 = frame.a;
						return _List_fromArray(
							[
								_Utils_Tuple2('position', 'relative'),
								_Utils_Tuple2(
								'top',
								'calc(100% + ' + (elm$core$String$fromFloat(y) + 'px)')),
								_Utils_Tuple2(
								'left',
								elm$core$String$fromFloat(x) + 'px')
							]);
					case 'OnLeft':
						var _n11 = frame.a;
						return _List_fromArray(
							[
								_Utils_Tuple2('position', 'relative'),
								_Utils_Tuple2(
								'right',
								'calc(100% - ' + (elm$core$String$fromFloat(x) + 'px)')),
								_Utils_Tuple2(
								'top',
								elm$core$String$fromFloat(y) + 'px')
							]);
					default:
						var _n12 = frame.a;
						return _List_fromArray(
							[
								_Utils_Tuple2('position', 'relative'),
								_Utils_Tuple2(
								'left',
								'calc(100% + ' + (elm$core$String$fromFloat(x) + 'px)')),
								_Utils_Tuple2(
								'top',
								elm$core$String$fromFloat(y) + 'px')
							]);
				}
		}
	});
var mdgriffith$style_elements$Element$Internal$Render$flexboxHorizontalIndividualAlignment = F2(
	function (direction, alignment) {
		switch (direction.$) {
			case 'GoRight':
				switch (alignment.$) {
					case 'Left':
						return elm$core$Maybe$Nothing;
					case 'Right':
						return elm$core$Maybe$Nothing;
					case 'Center':
						return elm$core$Maybe$Nothing;
					default:
						return elm$core$Maybe$Nothing;
				}
			case 'GoLeft':
				switch (alignment.$) {
					case 'Left':
						return elm$core$Maybe$Nothing;
					case 'Right':
						return elm$core$Maybe$Nothing;
					case 'Center':
						return elm$core$Maybe$Nothing;
					default:
						return elm$core$Maybe$Nothing;
				}
			case 'Down':
				switch (alignment.$) {
					case 'Left':
						return elm$core$Maybe$Just(
							_Utils_Tuple2('align-self', 'flex-start'));
					case 'Right':
						return elm$core$Maybe$Just(
							_Utils_Tuple2('align-self', 'flex-end'));
					case 'Center':
						return elm$core$Maybe$Just(
							_Utils_Tuple2('align-self', 'center'));
					default:
						return elm$core$Maybe$Just(
							_Utils_Tuple2('align-self', 'stretch'));
				}
			default:
				switch (alignment.$) {
					case 'Left':
						return elm$core$Maybe$Just(
							_Utils_Tuple2('align-self', 'flex-start'));
					case 'Right':
						return elm$core$Maybe$Just(
							_Utils_Tuple2('align-self', 'flex-end'));
					case 'Center':
						return elm$core$Maybe$Just(
							_Utils_Tuple2('align-self', 'center'));
					default:
						return elm$core$Maybe$Just(
							_Utils_Tuple2('align-self', 'stretch'));
				}
		}
	});
var mdgriffith$style_elements$Element$Internal$Render$flexboxVerticalIndividualAlignment = F2(
	function (direction, alignment) {
		switch (direction.$) {
			case 'GoRight':
				switch (alignment.$) {
					case 'Top':
						return elm$core$Maybe$Just(
							_Utils_Tuple2('align-self', 'flex-start'));
					case 'Bottom':
						return elm$core$Maybe$Just(
							_Utils_Tuple2('align-self', 'flex-end'));
					case 'VerticalCenter':
						return elm$core$Maybe$Just(
							_Utils_Tuple2('align-self', 'center'));
					default:
						return elm$core$Maybe$Just(
							_Utils_Tuple2('align-self', 'center'));
				}
			case 'GoLeft':
				switch (alignment.$) {
					case 'Top':
						return elm$core$Maybe$Just(
							_Utils_Tuple2('align-self', 'flex-start'));
					case 'Bottom':
						return elm$core$Maybe$Just(
							_Utils_Tuple2('align-self', 'flex-end'));
					case 'VerticalCenter':
						return elm$core$Maybe$Just(
							_Utils_Tuple2('align-self', 'center'));
					default:
						return elm$core$Maybe$Just(
							_Utils_Tuple2('align-self', 'center'));
				}
			case 'Down':
				switch (alignment.$) {
					case 'Top':
						return elm$core$Maybe$Nothing;
					case 'Bottom':
						return elm$core$Maybe$Nothing;
					case 'VerticalCenter':
						return elm$core$Maybe$Nothing;
					default:
						return elm$core$Maybe$Nothing;
				}
			default:
				switch (alignment.$) {
					case 'Top':
						return elm$core$Maybe$Nothing;
					case 'Bottom':
						return elm$core$Maybe$Nothing;
					case 'VerticalCenter':
						return elm$core$Maybe$Nothing;
					default:
						return elm$core$Maybe$Nothing;
				}
		}
	});
var mdgriffith$style_elements$Element$Internal$Render$renderPadding = function (_n0) {
	var top = _n0.a;
	var right = _n0.b;
	var bottom = _n0.c;
	var left = _n0.d;
	var format = F2(
		function (name, x) {
			return _Utils_Tuple2(
				name,
				elm$core$String$fromFloat(x) + 'px');
		});
	return A2(
		elm$core$List$filterMap,
		elm$core$Basics$identity,
		_List_fromArray(
			[
				A2(
				elm$core$Maybe$map,
				format('padding-top'),
				top),
				A2(
				elm$core$Maybe$map,
				format('padding-bottom'),
				bottom),
				A2(
				elm$core$Maybe$map,
				format('padding-left'),
				left),
				A2(
				elm$core$Maybe$map,
				format('padding-right'),
				right)
			]));
};
var mdgriffith$style_elements$Style$Internal$Render$Property$flexHeight = function (l) {
	switch (l.$) {
		case 'Px':
			var x = l.a;
			return _List_fromArray(
				[
					_Utils_Tuple2(
					'height',
					elm$core$String$fromFloat(x) + 'px')
				]);
		case 'Percent':
			var x = l.a;
			return _List_fromArray(
				[
					_Utils_Tuple2(
					'height',
					elm$core$String$fromFloat(x) + '%')
				]);
		case 'Auto':
			return _List_fromArray(
				[
					_Utils_Tuple2('height', 'auto')
				]);
		case 'Fill':
			var i = l.a;
			return _List_fromArray(
				[
					_Utils_Tuple2(
					'flex-grow',
					elm$core$String$fromFloat(i)),
					_Utils_Tuple2('flex-basis', '0')
				]);
		default:
			var perc = l.a;
			var px = l.b;
			return _List_fromArray(
				[
					_Utils_Tuple2(
					'height',
					'calc(' + (elm$core$String$fromFloat(perc) + ('% + ' + (elm$core$String$fromFloat(px) + 'px)'))))
				]);
	}
};
var mdgriffith$style_elements$Style$Internal$Render$Property$flexWidth = F2(
	function (len, adjustment) {
		switch (len.$) {
			case 'Px':
				var x = len.a;
				return _List_fromArray(
					[
						_Utils_Tuple2(
						'width',
						elm$core$String$fromFloat(x) + 'px')
					]);
			case 'Percent':
				var x = len.a;
				return _List_fromArray(
					[
						_Utils_Tuple2(
						'width',
						'calc(' + (elm$core$String$fromFloat(x) + ('% - ' + (elm$core$String$fromFloat(adjustment) + 'px)'))))
					]);
			case 'Auto':
				return _List_fromArray(
					[
						_Utils_Tuple2('width', 'auto')
					]);
			case 'Fill':
				var i = len.a;
				return _List_fromArray(
					[
						_Utils_Tuple2(
						'flex-grow',
						elm$core$String$fromFloat(i)),
						_Utils_Tuple2('flex-basis', '0')
					]);
			default:
				var perc = len.a;
				var px = len.b;
				return _List_fromArray(
					[
						_Utils_Tuple2(
						'width',
						'calc(' + (elm$core$String$fromFloat(perc) + ('% + ' + (elm$core$String$fromFloat(px) + 'px)'))))
					]);
		}
	});
var mdgriffith$style_elements$Style$Internal$Render$Value$box = function (_n0) {
	var a = _n0.a;
	var b = _n0.b;
	var c = _n0.c;
	var d = _n0.d;
	return elm$core$String$fromFloat(a) + ('px ' + (elm$core$String$fromFloat(b) + ('px ' + (elm$core$String$fromFloat(c) + ('px ' + (elm$core$String$fromFloat(d) + 'px'))))));
};
var mdgriffith$style_elements$Style$Internal$Render$Value$parentAdjustedLength = F2(
	function (len, adjustment) {
		switch (len.$) {
			case 'Px':
				var x = len.a;
				return elm$core$String$fromFloat(x) + 'px';
			case 'Percent':
				var x = len.a;
				return 'calc(' + (elm$core$String$fromFloat(x) + ('% - ' + (elm$core$String$fromFloat(adjustment) + 'px)')));
			case 'Auto':
				return 'auto';
			case 'Fill':
				var i = len.a;
				return 'calc(100% - ' + (elm$core$String$fromFloat(adjustment) + 'px)');
			default:
				var perc = len.a;
				var px = len.b;
				return 'calc(' + (elm$core$String$fromFloat(perc) + ('% + ' + (elm$core$String$fromFloat(px) + 'px)')));
		}
	});
var mdgriffith$style_elements$Element$Internal$Render$renderAttributes = F6(
	function (elType, order, maybeElemID, parent, stylesheet, elem) {
		var width = function (attrs) {
			var _n62 = elem.width;
			if (_n62.$ === 'Nothing') {
				return attrs;
			} else {
				var len = _n62.a;
				if (parent.$ === 'Just') {
					var parentEl = parent.a;
					var _n64 = A2(
						elm$core$Maybe$withDefault,
						A4(mdgriffith$style_elements$Style$Internal$Model$Box, 0, 0, 0, 0),
						parentEl.parentSpecifiedSpacing);
					var rightPad = _n64.b;
					var leftPad = _n64.d;
					var paddingAdjustment = (rightPad + leftPad) / 2;
					var _n65 = parentEl.layout;
					_n65$2:
					while (true) {
						if (_n65.$ === 'FlexLayout') {
							switch (_n65.a.$) {
								case 'GoRight':
									var _n66 = _n65.a;
									return _Utils_ap(
										A2(mdgriffith$style_elements$Style$Internal$Render$Property$flexWidth, len, paddingAdjustment),
										attrs);
								case 'GoLeft':
									var _n67 = _n65.a;
									return _Utils_ap(
										A2(mdgriffith$style_elements$Style$Internal$Render$Property$flexWidth, len, paddingAdjustment),
										attrs);
								default:
									break _n65$2;
							}
						} else {
							break _n65$2;
						}
					}
					return A2(
						elm$core$List$cons,
						_Utils_Tuple2(
							'width',
							A2(mdgriffith$style_elements$Style$Internal$Render$Value$parentAdjustedLength, len, paddingAdjustment)),
						attrs);
				} else {
					return A2(
						elm$core$List$cons,
						_Utils_Tuple2(
							'width',
							mdgriffith$style_elements$Style$Internal$Render$Value$length(len)),
						attrs);
				}
			}
		};
		var vertical = function (attrs) {
			var _n57 = elem.vertical;
			if (_n57.$ === 'Nothing') {
				return attrs;
			} else {
				var align = _n57.a;
				if (elem.inline && _Utils_eq(elType, mdgriffith$style_elements$Element$Internal$Render$Single)) {
					return attrs;
				} else {
					if (elem.inline) {
						return attrs;
					} else {
						if (!_Utils_eq(elem.frame, elm$core$Maybe$Nothing)) {
							switch (align.$) {
								case 'Top':
									return A2(
										elm$core$List$cons,
										_Utils_Tuple2('top', '0'),
										attrs);
								case 'Bottom':
									return A2(
										elm$core$List$cons,
										_Utils_Tuple2('bottom', '0'),
										attrs);
								case 'VerticalCenter':
									return attrs;
								default:
									return attrs;
							}
						} else {
							if (parent.$ === 'Nothing') {
								return attrs;
							} else {
								var parentEl = parent.a;
								var _n60 = parentEl.layout;
								if (_n60.$ === 'FlexLayout') {
									var dir = _n60.a;
									var _n61 = A2(mdgriffith$style_elements$Element$Internal$Render$flexboxVerticalIndividualAlignment, dir, align);
									if (_n61.$ === 'Nothing') {
										return attrs;
									} else {
										var a = _n61.a;
										return A2(elm$core$List$cons, a, attrs);
									}
								} else {
									return attrs;
								}
							}
						}
					}
				}
			}
		};
		var shrink = function (attrs) {
			var _n41 = elem.shrink;
			if (_n41.$ === 'Just') {
				var i = _n41.a;
				return A2(
					elm$core$List$cons,
					_Utils_Tuple2(
						'flex-shrink',
						elm$core$String$fromInt(i)),
					attrs);
			} else {
				if (parent.$ === 'Nothing') {
					return attrs;
				} else {
					var parentEl = parent.a;
					var verticalOverflow = function () {
						var _n53 = elem.overflow;
						if (_n53.$ === 'Just') {
							switch (_n53.a.$) {
								case 'XAxis':
									var _n54 = _n53.a;
									return false;
								case 'YAxis':
									var _n55 = _n53.a;
									return true;
								default:
									var _n56 = _n53.a;
									return true;
							}
						} else {
							return false;
						}
					}();
					var isVertical = function (dir) {
						switch (dir.$) {
							case 'Up':
								return true;
							case 'Down':
								return true;
							default:
								return false;
						}
					};
					var isPx = function (x) {
						if ((x.$ === 'Just') && (x.a.$ === 'Px')) {
							return true;
						} else {
							return false;
						}
					};
					var isPercent = function (x) {
						if ((x.$ === 'Just') && (x.a.$ === 'Percent')) {
							return true;
						} else {
							return false;
						}
					};
					var isHorizontal = function (dir) {
						switch (dir.$) {
							case 'GoRight':
								return true;
							case 'GoLeft':
								return true;
							default:
								return false;
						}
					};
					var horizontalOverflow = function () {
						var _n45 = elem.overflow;
						if (_n45.$ === 'Just') {
							switch (_n45.a.$) {
								case 'XAxis':
									var _n46 = _n45.a;
									return true;
								case 'YAxis':
									var _n47 = _n45.a;
									return false;
								default:
									var _n48 = _n45.a;
									return true;
							}
						} else {
							return false;
						}
					}();
					var _n43 = parentEl.layout;
					if (_n43.$ === 'FlexLayout') {
						var dir = _n43.a;
						if (isHorizontal(dir) && isPx(elem.width)) {
							return A2(
								elm$core$List$cons,
								_Utils_Tuple2('flex-shrink', '0'),
								attrs);
						} else {
							if (isHorizontal(dir) && isPercent(elem.width)) {
								return A2(
									elm$core$List$cons,
									_Utils_Tuple2('flex-shrink', '0'),
									attrs);
							} else {
								if (isHorizontal(dir) && (!_Utils_eq(elem.width, elm$core$Maybe$Nothing))) {
									return A2(
										elm$core$List$cons,
										_Utils_Tuple2('flex-shrink', '1'),
										attrs);
								} else {
									if (isHorizontal(dir) && horizontalOverflow) {
										return A2(
											elm$core$List$cons,
											_Utils_Tuple2('flex-shrink', '1'),
											attrs);
									} else {
										if (isVertical(dir) && isPx(elem.height)) {
											return A2(
												elm$core$List$cons,
												_Utils_Tuple2('flex-shrink', '0'),
												attrs);
										} else {
											if (isVertical(dir) && isPercent(elem.height)) {
												return A2(
													elm$core$List$cons,
													_Utils_Tuple2('flex-shrink', '0'),
													attrs);
											} else {
												if (isVertical(dir) && (!_Utils_eq(elem.height, elm$core$Maybe$Nothing))) {
													return A2(
														elm$core$List$cons,
														_Utils_Tuple2('flex-shrink', '1'),
														attrs);
												} else {
													if (isVertical(dir) && verticalOverflow) {
														return A2(
															elm$core$List$cons,
															_Utils_Tuple2('flex-shrink', '1'),
															attrs);
													} else {
														if (isHorizontal(dir) && _Utils_eq(elem.width, elm$core$Maybe$Nothing)) {
															return A2(
																elm$core$List$cons,
																_Utils_Tuple2('flex-shrink', '1'),
																attrs);
														} else {
															if (isVertical(dir) && _Utils_eq(elem.height, elm$core$Maybe$Nothing)) {
																if (elType.$ === 'Single') {
																	return A2(
																		elm$core$List$cons,
																		_Utils_Tuple2('flex-shrink', '1'),
																		attrs);
																} else {
																	var elLayout = elType.a;
																	return A2(
																		elm$core$List$cons,
																		_Utils_Tuple2('flex-shrink', '0'),
																		attrs);
																}
															} else {
																return A2(
																	elm$core$List$cons,
																	_Utils_Tuple2('flex-shrink', '0'),
																	attrs);
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					} else {
						return attrs;
					}
				}
			}
		};
		var position = function (attrs) {
			return _Utils_ap(
				A2(
					mdgriffith$style_elements$Element$Internal$Render$calcPosition,
					A2(elm$core$Maybe$withDefault, mdgriffith$style_elements$Element$Internal$Model$Relative, elem.frame),
					elem.positioned),
				attrs);
		};
		var passthrough = function (attrs) {
			var _n40 = elem.pointerevents;
			if (_n40.$ === 'Nothing') {
				return attrs;
			} else {
				if (!_n40.a) {
					return A2(
						elm$core$List$cons,
						_Utils_Tuple2('pointer-events', 'none'),
						attrs);
				} else {
					return A2(
						elm$core$List$cons,
						_Utils_Tuple2('pointer-events', 'auto'),
						attrs);
				}
			}
		};
		var padding = function (attrs) {
			var paddings = mdgriffith$style_elements$Element$Internal$Render$renderPadding(elem.padding);
			return (elm$core$List$length(paddings) > 0) ? _Utils_ap(paddings, attrs) : attrs;
		};
		var overflow = function (attrs) {
			var _n38 = elem.overflow;
			if (_n38.$ === 'Nothing') {
				return attrs;
			} else {
				var o = _n38.a;
				switch (o.$) {
					case 'XAxis':
						return A2(
							elm$core$List$cons,
							_Utils_Tuple2('overflow-x', 'auto'),
							attrs);
					case 'YAxis':
						return A2(
							elm$core$List$cons,
							_Utils_Tuple2('overflow-y', 'auto'),
							attrs);
					default:
						return A2(
							elm$core$List$cons,
							_Utils_Tuple2('overflow', 'auto'),
							attrs);
				}
			}
		};
		var opacity = function (attrs) {
			var _n37 = elem.opacity;
			if (_n37.$ === 'Nothing') {
				return attrs;
			} else {
				var o = _n37.a;
				return A2(
					elm$core$List$cons,
					_Utils_Tuple2(
						'opacity',
						elm$core$String$fromFloat(o)),
					attrs);
			}
		};
		var layout = function (attrs) {
			if (elType.$ === 'Single') {
				return elem.inline ? A2(
					elm$core$List$cons,
					_Utils_Tuple2('display', 'inline'),
					attrs) : A2(
					elm$core$List$cons,
					_Utils_Tuple2('display', 'block'),
					attrs);
			} else {
				var lay = elType.a;
				return _Utils_ap(
					A2(
						mdgriffith$style_elements$Style$Internal$Render$Property$layout,
						elem.inline,
						A3(mdgriffith$style_elements$Element$Internal$Render$alignLayout, elem.horizontal, elem.vertical, lay)),
					attrs);
			}
		};
		var horizontal = function (attrs) {
			var _n28 = elem.horizontal;
			if (_n28.$ === 'Nothing') {
				return attrs;
			} else {
				var align = _n28.a;
				if (elem.inline && _Utils_eq(elType, mdgriffith$style_elements$Element$Internal$Render$Single)) {
					switch (align.$) {
						case 'Left':
							return A2(
								elm$core$List$cons,
								_Utils_Tuple2('z-index', '1'),
								A2(
									elm$core$List$cons,
									_Utils_Tuple2('float', 'left'),
									attrs));
						case 'Right':
							return A2(
								elm$core$List$cons,
								_Utils_Tuple2('z-index', '1'),
								A2(
									elm$core$List$cons,
									_Utils_Tuple2('float', 'right'),
									attrs));
						case 'Center':
							return attrs;
						default:
							return attrs;
					}
				} else {
					if (elem.inline) {
						return attrs;
					} else {
						if (!_Utils_eq(elem.frame, elm$core$Maybe$Nothing)) {
							switch (align.$) {
								case 'Left':
									return A2(
										elm$core$List$cons,
										_Utils_Tuple2('left', '0'),
										attrs);
								case 'Right':
									return A2(
										elm$core$List$cons,
										_Utils_Tuple2('right', '0'),
										attrs);
								case 'Center':
									return attrs;
								default:
									return attrs;
							}
						} else {
							if (elType.$ === 'LayoutElement') {
								return attrs;
							} else {
								if (parent.$ === 'Nothing') {
									return attrs;
								} else {
									var parentEl = parent.a;
									var _n33 = parentEl.layout;
									switch (_n33.$) {
										case 'TextLayout':
											switch (align.$) {
												case 'Left':
													return A2(
														elm$core$List$cons,
														_Utils_Tuple2('z-index', '1'),
														A2(
															elm$core$List$cons,
															_Utils_Tuple2('float', 'left'),
															attrs));
												case 'Right':
													return A2(
														elm$core$List$cons,
														_Utils_Tuple2('z-index', '1'),
														A2(
															elm$core$List$cons,
															_Utils_Tuple2('float', 'right'),
															attrs));
												case 'Center':
													return attrs;
												default:
													return attrs;
											}
										case 'FlexLayout':
											var dir = _n33.a;
											var _n35 = A2(mdgriffith$style_elements$Element$Internal$Render$flexboxHorizontalIndividualAlignment, dir, align);
											if (_n35.$ === 'Nothing') {
												return attrs;
											} else {
												var a = _n35.a;
												return A2(elm$core$List$cons, a, attrs);
											}
										default:
											return attrs;
									}
								}
							}
						}
					}
				}
			}
		};
		var height = function (attrs) {
			var _n19 = elem.height;
			if (_n19.$ === 'Nothing') {
				return attrs;
			} else {
				var len = _n19.a;
				if (parent.$ === 'Just') {
					var parentEl = parent.a;
					var hundredPercentOrFill = function (x) {
						switch (x.$) {
							case 'Percent':
								var p = x.a;
								return p === 100;
							case 'Fill':
								return true;
							case 'Calc':
								var perc = x.a;
								return perc === 100;
							default:
								return false;
						}
					};
					var _n21 = A2(
						elm$core$Maybe$withDefault,
						A4(mdgriffith$style_elements$Style$Internal$Model$Box, 0, 0, 0, 0),
						parentEl.parentSpecifiedSpacing);
					var topPad = _n21.a;
					var bottomPad = _n21.c;
					var paddingAdjustment = (topPad + bottomPad) / 2;
					var _n22 = parentEl.layout;
					if (_n22.$ === 'FlexLayout') {
						switch (_n22.a.$) {
							case 'Down':
								var _n23 = _n22.a;
								return _Utils_ap(
									mdgriffith$style_elements$Style$Internal$Render$Property$flexHeight(len),
									attrs);
							case 'Up':
								var _n24 = _n22.a;
								return _Utils_ap(
									mdgriffith$style_elements$Style$Internal$Render$Property$flexHeight(len),
									attrs);
							case 'GoRight':
								var _n25 = _n22.a;
								return hundredPercentOrFill(len) ? A2(
									elm$core$List$cons,
									_Utils_Tuple2('height', 'auto'),
									attrs) : A2(
									elm$core$List$cons,
									_Utils_Tuple2(
										'height',
										A2(mdgriffith$style_elements$Style$Internal$Render$Value$parentAdjustedLength, len, paddingAdjustment)),
									attrs);
							default:
								var _n26 = _n22.a;
								return hundredPercentOrFill(len) ? A2(
									elm$core$List$cons,
									_Utils_Tuple2('height', 'auto'),
									attrs) : A2(
									elm$core$List$cons,
									_Utils_Tuple2(
										'height',
										A2(mdgriffith$style_elements$Style$Internal$Render$Value$parentAdjustedLength, len, paddingAdjustment)),
									attrs);
						}
					} else {
						return A2(
							elm$core$List$cons,
							_Utils_Tuple2(
								'height',
								A2(mdgriffith$style_elements$Style$Internal$Render$Value$parentAdjustedLength, len, paddingAdjustment)),
							attrs);
					}
				} else {
					return A2(
						elm$core$List$cons,
						_Utils_Tuple2(
							'height',
							mdgriffith$style_elements$Style$Internal$Render$Value$length(len)),
						attrs);
				}
			}
		};
		var gridPos = function (attrs) {
			var _n18 = elem.gridPosition;
			if (_n18.$ === 'Nothing') {
				return attrs;
			} else {
				var area = _n18.a;
				return A2(
					elm$core$List$cons,
					_Utils_Tuple2('grid-area', area),
					attrs);
			}
		};
		var defaults = _List_fromArray(
			[
				_Utils_Tuple2('box-sizing', 'border-box')
			]);
		var attributes = function () {
			if (maybeElemID.$ === 'Nothing') {
				return elem.attrs;
			} else {
				var elemID = maybeElemID.a;
				return (elm$core$List$length(elem.variations) > 0) ? A2(
					elm$core$List$cons,
					elm$html$Html$Attributes$classList(
						A2(stylesheet.variations, elemID, elem.variations)),
					elem.attrs) : A2(
					elm$core$List$cons,
					elm$html$Html$Attributes$class(
						stylesheet.style(elemID)),
					elem.attrs);
			}
		}();
		var adjustspacing = function (_n16) {
			var top = _n16.a;
			var right = _n16.b;
			var bottom = _n16.c;
			var left = _n16.d;
			var onScreen = function () {
				var _n14 = elem.frame;
				if ((_n14.$ === 'Just') && (_n14.a.$ === 'Screen')) {
					var _n15 = _n14.a;
					return true;
				} else {
					return false;
				}
			}();
			var halved = A4(mdgriffith$style_elements$Style$Internal$Model$Box, top / 2, right / 2, bottom / 2, left / 2);
			if (onScreen) {
				return A4(mdgriffith$style_elements$Style$Internal$Model$Box, 0, 0, 0, 0);
			} else {
				if (parent.$ === 'Nothing') {
					return A4(mdgriffith$style_elements$Style$Internal$Model$Box, top, right, bottom, left);
				} else {
					var parentEl = parent.a;
					var _n11 = parentEl.layout;
					if (_n11.$ === 'TextLayout') {
						var _n12 = elem.horizontal;
						if (_n12.$ === 'Nothing') {
							return (_Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$Last) || _Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$FirstAndLast)) ? A4(mdgriffith$style_elements$Style$Internal$Model$Box, 0, 0, 0, 0) : (elem.inline ? A4(mdgriffith$style_elements$Style$Internal$Model$Box, 0, right, 0, 0) : A4(mdgriffith$style_elements$Style$Internal$Model$Box, 0, 0, bottom, 0));
						} else {
							var align = _n12.a;
							if ((!elem.inline) && _Utils_eq(elem.frame, elm$core$Maybe$Nothing)) {
								switch (align.$) {
									case 'Left':
										return _Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$First) ? A4(mdgriffith$style_elements$Style$Internal$Model$Box, 0, right, bottom, 0) : (_Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$FirstAndLast) ? A4(mdgriffith$style_elements$Style$Internal$Model$Box, 0, right, 0, 0) : (_Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$Last) ? A4(mdgriffith$style_elements$Style$Internal$Model$Box, 0, right, 0, 0) : A4(mdgriffith$style_elements$Style$Internal$Model$Box, 0, right, bottom, 0)));
									case 'Right':
										return _Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$First) ? A4(mdgriffith$style_elements$Style$Internal$Model$Box, 0, 0, bottom, left) : (_Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$FirstAndLast) ? A4(mdgriffith$style_elements$Style$Internal$Model$Box, 0, 0, 0, left) : (_Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$Last) ? A4(mdgriffith$style_elements$Style$Internal$Model$Box, 0, 0, 0, left) : A4(mdgriffith$style_elements$Style$Internal$Model$Box, 0, 0, bottom, left)));
									default:
										return (_Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$Last) || _Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$FirstAndLast)) ? A4(mdgriffith$style_elements$Style$Internal$Model$Box, 0, 0, 0, 0) : A4(mdgriffith$style_elements$Style$Internal$Model$Box, 0, 0, bottom, 0);
								}
							} else {
								return A4(mdgriffith$style_elements$Style$Internal$Model$Box, top, right, bottom, left);
							}
						}
					} else {
						return halved;
					}
				}
			}
		};
		var spacing = function (attrs) {
			var _n9 = elem.margin;
			if (_n9.$ === 'Nothing') {
				return attrs;
			} else {
				var space = _n9.a;
				return A2(
					elm$core$List$cons,
					_Utils_Tuple2(
						'margin',
						mdgriffith$style_elements$Style$Internal$Render$Value$box(
							adjustspacing(space))),
					attrs);
			}
		};
		if (elem.hidden) {
			return A2(
				elm$core$List$cons,
				A2(elm$html$Html$Attributes$style, 'display', 'none'),
				attributes);
		} else {
			if (elem.expand) {
				var expandedProps = function () {
					if (parent.$ === 'Nothing') {
						return _List_fromArray(
							[
								_Utils_Tuple2('width', '100%'),
								_Utils_Tuple2('height', '100%'),
								_Utils_Tuple2('margin', '0')
							]);
					} else {
						var parentEl = parent.a;
						var _n2 = parentEl.layout;
						switch (_n2.$) {
							case 'TextLayout':
								var borders = elm$core$List$concat(
									_List_fromArray(
										[
											_Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$Last) ? _List_fromArray(
											[
												_Utils_Tuple2('border-top-right-radius', '0'),
												_Utils_Tuple2('border-top-left-radius', '0')
											]) : (_Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$First) ? _List_fromArray(
											[
												_Utils_Tuple2('border-bottom-right-radius', '0'),
												_Utils_Tuple2('border-bottom-left-radius', '0')
											]) : (_Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$FirstAndLast) ? _List_fromArray(
											[
												_Utils_Tuple2('border-top-right-radius', '0'),
												_Utils_Tuple2('border-top-left-radius', '0'),
												_Utils_Tuple2('border-bottom-right-radius', '0'),
												_Utils_Tuple2('border-bottom-left-radius', '0')
											]) : _List_Nil))
										]));
								var _n3 = parentEl.parentPadding;
								var top = _n3.a;
								var right = _n3.b;
								var bottom = _n3.c;
								var left = _n3.d;
								return _Utils_ap(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'width',
											'calc(100% + ' + (elm$core$String$fromFloat(right + left) + 'px')),
											_Utils_Tuple2('margin', '0'),
											_Utils_Tuple2(
											'margin-left',
											elm$core$String$fromFloat((-1) * left) + 'px'),
											(_Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$First) || _Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$FirstAndLast)) ? _Utils_Tuple2(
											'margin-top',
											elm$core$String$fromFloat((-1) * top) + 'px') : _Utils_Tuple2('margin-top', '0'),
											(_Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$Last) || _Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$FirstAndLast)) ? _Utils_Tuple2(
											'margin-bottom',
											elm$core$String$fromFloat((-1) * bottom) + 'px') : _Utils_Tuple2('margin-bottom', '0'),
											_Utils_Tuple2(
											'padding',
											mdgriffith$style_elements$Style$Internal$Render$Value$box(
												A2(mdgriffith$style_elements$Element$Internal$Render$defaultPadding, elem.padding, parentEl.parentPadding)))
										]),
									borders);
							case 'FlexLayout':
								var dir = _n2.a;
								var flex = _n2.b;
								var _n4 = function () {
									var _n5 = parentEl.parentSpecifiedSpacing;
									if (_n5.$ === 'Nothing') {
										return A4(mdgriffith$style_elements$Style$Internal$Model$Box, 0, 0, 0, 0);
									} else {
										var p = _n5.a;
										return p;
									}
								}();
								var parentSpaceTop = _n4.a;
								var parentSpaceRight = _n4.b;
								var parentSpaceBottom = _n4.c;
								var parentSpaceLeft = _n4.d;
								var _n6 = parentEl.parentPadding;
								var top = _n6.a;
								var right = _n6.b;
								var bottom = _n6.c;
								var left = _n6.d;
								switch (dir.$) {
									case 'GoRight':
										return width(
											_List_fromArray(
												[
													_Utils_Tuple2(
													'height',
													'calc(100% + ' + (elm$core$String$fromFloat((top + bottom) - ((parentSpaceTop + parentSpaceBottom) / 2)) + 'px')),
													_Utils_Tuple2('margin', '0'),
													_Utils_Tuple2(
													'margin-top',
													elm$core$String$fromFloat(((-1) * top) + (parentSpaceTop / 2)) + 'px'),
													(_Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$First) || _Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$FirstAndLast)) ? _Utils_Tuple2(
													'margin-left',
													elm$core$String$fromFloat((-1) * left) + 'px') : _Utils_Tuple2(
													'margin-left',
													elm$core$String$fromFloat(parentSpaceLeft / 2) + 'px'),
													(_Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$Last) || _Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$FirstAndLast)) ? _Utils_Tuple2(
													'margin-right',
													elm$core$String$fromFloat((-1) * right) + 'px') : _Utils_Tuple2(
													'margin-right',
													elm$core$String$fromFloat(parentSpaceRight / 2) + 'px')
												]));
									case 'GoLeft':
										return width(
											_List_fromArray(
												[
													_Utils_Tuple2(
													'height',
													'calc(100% + ' + (elm$core$String$fromFloat((top + bottom) - ((parentSpaceTop + parentSpaceBottom) / 2)) + 'px')),
													_Utils_Tuple2('margin', '0'),
													_Utils_Tuple2(
													'margin-top',
													elm$core$String$fromFloat(((-1) * top) + (parentSpaceTop / 2)) + 'px'),
													(_Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$First) || _Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$FirstAndLast)) ? _Utils_Tuple2(
													'margin-right',
													elm$core$String$fromFloat((-1) * right) + 'px') : _Utils_Tuple2(
													'margin-right',
													elm$core$String$fromFloat(parentSpaceRight / 2) + 'px'),
													(_Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$Last) || _Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$FirstAndLast)) ? _Utils_Tuple2(
													'margin-left',
													elm$core$String$fromFloat((-1) * left) + 'px') : _Utils_Tuple2(
													'margin-left',
													elm$core$String$fromFloat(parentSpaceLeft / 2) + 'px')
												]));
									case 'Up':
										return height(
											_List_fromArray(
												[
													_Utils_Tuple2(
													'width',
													'calc(100% + ' + (elm$core$String$fromFloat((left + right) - ((parentSpaceLeft + parentSpaceRight) / 2)) + 'px')),
													_Utils_Tuple2('margin', '0'),
													_Utils_Tuple2(
													'margin-left',
													elm$core$String$fromFloat(((-1) * left) + (parentSpaceLeft / 2)) + 'px'),
													(_Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$First) || _Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$FirstAndLast)) ? _Utils_Tuple2(
													'margin-bottom',
													elm$core$String$fromFloat((-1) * top) + 'px') : _Utils_Tuple2(
													'margin-bottom',
													elm$core$String$fromFloat(parentSpaceBottom / 2) + 'px'),
													(_Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$Last) || _Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$FirstAndLast)) ? _Utils_Tuple2(
													'margin-top',
													elm$core$String$fromFloat((-1) * bottom) + 'px') : _Utils_Tuple2(
													'margin-top',
													elm$core$String$fromFloat(parentSpaceTop / 2) + 'px')
												]));
									default:
										return height(
											_List_fromArray(
												[
													_Utils_Tuple2(
													'width',
													'calc(100% + ' + (elm$core$String$fromFloat((left + right) - ((parentSpaceLeft + parentSpaceRight) / 2)) + 'px')),
													_Utils_Tuple2('margin', '0'),
													_Utils_Tuple2(
													'margin-left',
													elm$core$String$fromFloat(((-1) * left) + (parentSpaceLeft / 2)) + 'px'),
													(_Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$First) || _Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$FirstAndLast)) ? _Utils_Tuple2(
													'margin-top',
													elm$core$String$fromFloat((-1) * top) + 'px') : _Utils_Tuple2(
													'margin-top',
													elm$core$String$fromFloat(parentSpaceTop / 2) + 'px'),
													(_Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$Last) || _Utils_eq(order, mdgriffith$style_elements$Element$Internal$Render$FirstAndLast)) ? _Utils_Tuple2(
													'margin-bottom',
													elm$core$String$fromFloat((-1) * bottom) + 'px') : _Utils_Tuple2(
													'margin-bottom',
													elm$core$String$fromFloat(parentSpaceBottom / 2) + 'px')
												]));
								}
							default:
								return _List_Nil;
						}
					}
				}();
				return _Utils_ap(
					A2(
						elm$core$List$map,
						function (_n0) {
							var name = _n0.a;
							var val = _n0.b;
							return A2(elm$html$Html$Attributes$style, name, val);
						},
						_Utils_ap(
							defaults,
							A3(
								elm$core$Basics$composeL,
								A2(
									elm$core$Basics$composeL,
									A2(
										elm$core$Basics$composeL,
										A2(
											elm$core$Basics$composeL,
											A2(
												elm$core$Basics$composeL,
												A2(
													elm$core$Basics$composeL,
													A2(
														elm$core$Basics$composeL,
														A2(elm$core$Basics$composeL, passthrough, gridPos),
														layout),
													spacing),
												opacity),
											shrink),
										padding),
									position),
								overflow,
								expandedProps))),
					attributes);
			} else {
				return _Utils_ap(
					A2(
						elm$core$List$map,
						function (_n8) {
							var name = _n8.a;
							var val = _n8.b;
							return A2(elm$html$Html$Attributes$style, name, val);
						},
						A3(
							elm$core$Basics$composeL,
							A2(
								elm$core$Basics$composeL,
								A2(
									elm$core$Basics$composeL,
									A2(
										elm$core$Basics$composeL,
										A2(
											elm$core$Basics$composeL,
											A2(
												elm$core$Basics$composeL,
												A2(
													elm$core$Basics$composeL,
													A2(
														elm$core$Basics$composeL,
														A2(
															elm$core$Basics$composeL,
															A2(
																elm$core$Basics$composeL,
																A2(
																	elm$core$Basics$composeL,
																	A2(elm$core$Basics$composeL, passthrough, gridPos),
																	layout),
																spacing),
															opacity),
														shrink),
													width),
												height),
											padding),
										horizontal),
									vertical),
								position),
							overflow,
							defaults)),
					attributes);
			}
		}
	});
var mdgriffith$style_elements$Element$Internal$Render$renderSyleAttributes = function (styles) {
	return A2(
		elm$core$List$map,
		function (_n0) {
			var name = _n0.a;
			var val = _n0.b;
			return A2(elm$html$Html$Attributes$style, name, val);
		},
		styles);
};
var mdgriffith$style_elements$Element$Internal$Render$spacingToMargin = function (attrs) {
	var spaceToMarg = function (a) {
		if (a.$ === 'Spacing') {
			var x = a.a;
			var y = a.b;
			return A4(mdgriffith$style_elements$Element$Internal$Model$Margin, y, x, y, x);
		} else {
			var other = a;
			return other;
		}
	};
	return A2(elm$core$List$map, spaceToMarg, attrs);
};
var mdgriffith$style_elements$Element$Internal$Render$renderElement = F4(
	function (parent, stylesheet, order, elm) {
		switch (elm.$) {
			case 'Empty':
				return elm$html$Html$text('');
			case 'Raw':
				var html = elm.a;
				return html;
			case 'Spacer':
				var x = elm.a;
				var forSpacing = function (posAttr) {
					if (posAttr.$ === 'Spacing') {
						var spaceX = posAttr.a;
						var spaceY = posAttr.b;
						return elm$core$Maybe$Just(
							_Utils_Tuple2(spaceX, spaceY));
					} else {
						return elm$core$Maybe$Nothing;
					}
				};
				var _n1 = function () {
					if (parent.$ === 'Just') {
						var ctxt = parent.a;
						return A2(
							elm$core$Maybe$withDefault,
							A4(mdgriffith$style_elements$Style$Internal$Model$Box, 0, 0, 0, 0),
							ctxt.parentSpecifiedSpacing);
					} else {
						return A4(mdgriffith$style_elements$Style$Internal$Model$Box, 0, 0, 0, 0);
					}
				}();
				var spacingX = _n1.a;
				var spacingY = _n1.b;
				var inline = _List_fromArray(
					[
						_Utils_Tuple2(
						'width',
						elm$core$String$fromFloat(x * spacingX) + 'px'),
						_Utils_Tuple2(
						'height',
						elm$core$String$fromFloat(x * spacingY) + 'px'),
						_Utils_Tuple2('visibility', 'hidden')
					]);
				return A2(
					elm$html$Html$div,
					mdgriffith$style_elements$Element$Internal$Render$renderSyleAttributes(inline),
					_List_Nil);
			case 'Text':
				var decoration = elm.a.decoration;
				var inline = elm.a.inline;
				var str = elm.b;
				var attrs = inline ? mdgriffith$style_elements$Element$Internal$Render$renderSyleAttributes(
					_List_fromArray(
						[
							_Utils_Tuple2('display', 'inline')
						])) : mdgriffith$style_elements$Element$Internal$Render$renderSyleAttributes(
					_List_fromArray(
						[
							_Utils_Tuple2('white-space', 'pre'),
							_Utils_Tuple2('text-overflow', 'ellipsis'),
							_Utils_Tuple2('overflow', 'hidden'),
							_Utils_Tuple2('display', 'block')
						]));
				switch (decoration.$) {
					case 'NoDecoration':
						return A2(
							elm$html$Html$span,
							A2(
								elm$core$List$cons,
								elm$html$Html$Attributes$class('el'),
								attrs),
							_List_fromArray(
								[
									elm$html$Html$text(str)
								]));
					case 'RawText':
						return elm$html$Html$text(str);
					case 'Bold':
						return A2(
							elm$html$Html$strong,
							A2(
								elm$core$List$cons,
								elm$html$Html$Attributes$class('el'),
								attrs),
							_List_fromArray(
								[
									elm$html$Html$text(str)
								]));
					case 'Italic':
						return A2(
							elm$html$Html$em,
							A2(
								elm$core$List$cons,
								elm$html$Html$Attributes$class('el'),
								attrs),
							_List_fromArray(
								[
									elm$html$Html$text(str)
								]));
					case 'Underline':
						return A2(
							elm$html$Html$u,
							A2(
								elm$core$List$cons,
								elm$html$Html$Attributes$class('el'),
								attrs),
							_List_fromArray(
								[
									elm$html$Html$text(str)
								]));
					case 'Strike':
						return A2(
							elm$html$Html$s,
							A2(
								elm$core$List$cons,
								elm$html$Html$Attributes$class('el'),
								attrs),
							_List_fromArray(
								[
									elm$html$Html$text(str)
								]));
					case 'Super':
						return A2(
							elm$html$Html$sup,
							A2(
								elm$core$List$cons,
								elm$html$Html$Attributes$class('el'),
								attrs),
							_List_fromArray(
								[
									elm$html$Html$text(str)
								]));
					default:
						return A2(
							elm$html$Html$sub,
							A2(
								elm$core$List$cons,
								elm$html$Html$Attributes$class('el'),
								attrs),
							_List_fromArray(
								[
									elm$html$Html$text(str)
								]));
				}
			case 'Element':
				var node = elm.a.node;
				var style = elm.a.style;
				var attrs = elm.a.attrs;
				var child = elm.a.child;
				var absolutelyPositioned = elm.a.absolutelyPositioned;
				var parentTextLayout = function (layout) {
					if (layout.$ === 'TextLayout') {
						return true;
					} else {
						return false;
					}
				};
				var childHtml = function () {
					if (absolutelyPositioned.$ === 'Nothing') {
						return _List_fromArray(
							[
								A4(mdgriffith$style_elements$Element$Internal$Render$renderElement, elm$core$Maybe$Nothing, stylesheet, mdgriffith$style_elements$Element$Internal$Render$FirstAndLast, child)
							]);
					} else {
						var absol = absolutelyPositioned.a;
						return A2(
							elm$core$List$map,
							A3(mdgriffith$style_elements$Element$Internal$Render$renderElement, elm$core$Maybe$Nothing, stylesheet, mdgriffith$style_elements$Element$Internal$Render$FirstAndLast),
							A2(elm$core$List$cons, child, absol));
					}
				}();
				var attributes = function () {
					if (parent.$ === 'Nothing') {
						return mdgriffith$style_elements$Element$Internal$Render$spacingToMargin(attrs);
					} else {
						var ctxt = parent.a;
						var _n6 = ctxt.parentSpecifiedSpacing;
						if (_n6.$ === 'Nothing') {
							return (parentTextLayout(ctxt.layout) || A2(
								elm$core$List$any,
								elm$core$Basics$eq(mdgriffith$style_elements$Element$Internal$Model$Inline),
								attrs)) ? mdgriffith$style_elements$Element$Internal$Render$spacingToMargin(attrs) : attrs;
						} else {
							var _n7 = _n6.a;
							var top = _n7.a;
							var right = _n7.b;
							var bottom = _n7.c;
							var left = _n7.d;
							return (parentTextLayout(ctxt.layout) || A2(
								elm$core$List$any,
								elm$core$Basics$eq(mdgriffith$style_elements$Element$Internal$Model$Inline),
								attrs)) ? A2(
								elm$core$List$cons,
								A4(mdgriffith$style_elements$Element$Internal$Model$Margin, top, right, bottom, left),
								mdgriffith$style_elements$Element$Internal$Render$spacingToMargin(attrs)) : A2(
								elm$core$List$cons,
								A4(mdgriffith$style_elements$Element$Internal$Model$Margin, top, right, bottom, left),
								attrs);
						}
					}
				}();
				var htmlAttrs = A6(
					mdgriffith$style_elements$Element$Internal$Render$renderAttributes,
					mdgriffith$style_elements$Element$Internal$Render$Single,
					order,
					style,
					parent,
					stylesheet,
					mdgriffith$style_elements$Element$Internal$Render$gather(attributes));
				return A3(
					elm$html$Html$node,
					node,
					A2(
						elm$core$List$cons,
						elm$html$Html$Attributes$class('el'),
						htmlAttrs),
					childHtml);
			default:
				var node = elm.a.node;
				var layout = elm.a.layout;
				var style = elm.a.style;
				var attrs = elm.a.attrs;
				var children = elm.a.children;
				var absolutelyPositioned = elm.a.absolutelyPositioned;
				var isFlexbox = function (layoutType) {
					if (layoutType.$ === 'FlexLayout') {
						return true;
					} else {
						return false;
					}
				};
				var forPadding = function (posAttr) {
					switch (posAttr.$) {
						case 'Padding':
							var t = posAttr.a;
							var r = posAttr.b;
							var b = posAttr.c;
							var l = posAttr.d;
							return elm$core$Maybe$Just(
								A2(
									mdgriffith$style_elements$Element$Internal$Render$defaultPadding,
									A4(mdgriffith$style_elements$Style$Internal$Model$Box, t, r, b, l),
									A4(mdgriffith$style_elements$Style$Internal$Model$Box, 0, 0, 0, 0)));
						case 'PhantomPadding':
							var t = posAttr.a;
							var r = posAttr.b;
							var b = posAttr.c;
							var l = posAttr.d;
							return elm$core$Maybe$Just(
								A4(mdgriffith$style_elements$Style$Internal$Model$Box, t, r, b, l));
						default:
							return elm$core$Maybe$Nothing;
					}
				};
				var findSpacing = function (posAttr) {
					if (posAttr.$ === 'Spacing') {
						var x = posAttr.a;
						var y = posAttr.b;
						return elm$core$Maybe$Just(
							A4(mdgriffith$style_elements$Style$Internal$Model$Box, y, x, y, x));
					} else {
						return elm$core$Maybe$Nothing;
					}
				};
				var forSpacing = A2(
					elm$core$Basics$composeL,
					function (x) {
						return !_Utils_eq(x, elm$core$Maybe$Nothing);
					},
					findSpacing);
				var clearfix = function (allAttrs) {
					if (layout.$ === 'TextLayout') {
						var fix = layout.a;
						return fix ? A2(
							elm$core$List$cons,
							elm$html$Html$Attributes$class('clearfix'),
							allAttrs) : allAttrs;
					} else {
						return allAttrs;
					}
				};
				var attributes = function () {
					if (parent.$ === 'Nothing') {
						return attrs;
					} else {
						var ctxt = parent.a;
						var _n18 = ctxt.parentSpecifiedSpacing;
						if (_n18.$ === 'Nothing') {
							return attrs;
						} else {
							var _n19 = _n18.a;
							var t = _n19.a;
							var r = _n19.b;
							var b = _n19.c;
							var l = _n19.d;
							return A2(
								elm$core$List$cons,
								A4(mdgriffith$style_elements$Element$Internal$Model$Margin, t, r, b, l),
								attrs);
						}
					}
				}();
				var htmlAttrs = clearfix(
					A6(
						mdgriffith$style_elements$Element$Internal$Render$renderAttributes,
						mdgriffith$style_elements$Element$Internal$Render$LayoutElement(layout),
						order,
						style,
						parent,
						stylesheet,
						mdgriffith$style_elements$Element$Internal$Render$gather(attributes)));
				var padding = function () {
					var _n16 = elm$core$List$head(
						A2(elm$core$List$filterMap, forPadding, attributes));
					if (_n16.$ === 'Nothing') {
						return A4(mdgriffith$style_elements$Style$Internal$Model$Box, 0, 0, 0, 0);
					} else {
						var pad = _n16.a;
						return pad;
					}
				}();
				var inherit = {
					layout: layout,
					parentPadding: padding,
					parentSpecifiedSpacing: elm$core$List$head(
						A2(elm$core$List$filterMap, findSpacing, attrs))
				};
				var adjacentFlexboxCorrection = function (htmlNode) {
					if (parent.$ === 'Nothing') {
						return htmlNode;
					} else {
						var p = parent.a;
						return (isFlexbox(p.layout) && isFlexbox(layout)) ? htmlNode : htmlNode;
					}
				};
				var _n10 = A2(elm$core$List$partition, forSpacing, attrs);
				var spacingAttr = _n10.a;
				var _n11 = A2(
					elm$core$List$partition,
					function (attr) {
						return _Utils_eq(
							attr,
							mdgriffith$style_elements$Element$Internal$Model$HAlign(mdgriffith$style_elements$Element$Internal$Model$Center)) || _Utils_eq(
							attr,
							mdgriffith$style_elements$Element$Internal$Model$VAlign(mdgriffith$style_elements$Element$Internal$Model$VerticalCenter));
					},
					attrs);
				var centeredProps = _n11.a;
				var others = _n11.b;
				if (children.$ === 'Normal') {
					var childList = children.a;
					var childHtml = A2(
						elm$core$List$indexedMap,
						F2(
							function (i, child) {
								return A4(
									mdgriffith$style_elements$Element$Internal$Render$renderElement,
									elm$core$Maybe$Just(inherit),
									stylesheet,
									A2(mdgriffith$style_elements$Element$Internal$Render$detectOrder, childList, i),
									child);
							}),
						childList);
					var allChildren = function () {
						if (absolutelyPositioned.$ === 'Nothing') {
							return childHtml;
						} else {
							var absol = absolutelyPositioned.a;
							return _Utils_ap(
								childHtml,
								A2(
									elm$core$List$map,
									A3(mdgriffith$style_elements$Element$Internal$Render$renderElement, elm$core$Maybe$Nothing, stylesheet, mdgriffith$style_elements$Element$Internal$Render$FirstAndLast),
									absol));
						}
					}();
					return adjacentFlexboxCorrection(
						A3(
							elm$html$Html$node,
							node,
							A2(
								elm$core$List$cons,
								elm$html$Html$Attributes$class('el'),
								htmlAttrs),
							allChildren));
				} else {
					var keyed = children.a;
					var childHtml = A2(
						elm$core$List$indexedMap,
						F2(
							function (i, _n14) {
								var key = _n14.a;
								var child = _n14.b;
								return _Utils_Tuple2(
									key,
									A4(
										mdgriffith$style_elements$Element$Internal$Render$renderElement,
										elm$core$Maybe$Just(inherit),
										stylesheet,
										A2(mdgriffith$style_elements$Element$Internal$Render$detectOrder, keyed, i),
										child));
							}),
						keyed);
					return adjacentFlexboxCorrection(
						A3(
							elm$html$Html$Keyed$node,
							node,
							A2(
								elm$core$List$cons,
								elm$html$Html$Attributes$class('el'),
								htmlAttrs),
							childHtml));
				}
		}
	});
var mdgriffith$style_elements$Element$Internal$Render$render = F2(
	function (stylesheet, elm) {
		var _n0 = mdgriffith$style_elements$Element$Internal$Adjustments$apply(elm);
		var adjusted = _n0.a;
		var onScreen = _n0.b;
		var fixedScreenElements = function () {
			if (onScreen.$ === 'Nothing') {
				return _List_Nil;
			} else {
				var screenEls = onScreen.a;
				return A2(
					elm$core$List$map,
					A3(mdgriffith$style_elements$Element$Internal$Render$renderElement, elm$core$Maybe$Nothing, stylesheet, mdgriffith$style_elements$Element$Internal$Render$FirstAndLast),
					screenEls);
			}
		}();
		return A2(
			elm$core$List$cons,
			A4(mdgriffith$style_elements$Element$Internal$Render$renderElement, elm$core$Maybe$Nothing, stylesheet, mdgriffith$style_elements$Element$Internal$Render$FirstAndLast, adjusted),
			fixedScreenElements);
	});
var mdgriffith$style_elements$Element$Internal$Render$viewport = F2(
	function (stylesheet, elm) {
		return A2(
			elm$html$Html$div,
			_List_fromArray(
				[
					elm$html$Html$Attributes$class('style-elements'),
					A2(elm$html$Html$Attributes$style, 'width', '100%'),
					A2(elm$html$Html$Attributes$style, 'height', '100%')
				]),
			_Utils_ap(
				A2(mdgriffith$style_elements$Element$Internal$Render$embed, true, stylesheet),
				A2(mdgriffith$style_elements$Element$Internal$Render$render, stylesheet, elm)));
	});
var mdgriffith$style_elements$Element$viewport = mdgriffith$style_elements$Element$Internal$Render$viewport;
var mdgriffith$style_elements$Element$Attributes$clip = mdgriffith$style_elements$Element$Internal$Model$Attr(
	A2(elm$virtual_dom$VirtualDom$style, 'overflow', 'hidden'));
var author$project$Views$Dashboard$appWithDashboard = F2(
	function (appAtributes, _n0) {
		var belowDashboard = _n0.belowDashboard;
		var navigationLinks = _n0.navigationLinks;
		var controls = _n0.controls;
		var aboveDashboard = _n0.aboveDashboard;
		return A2(
			mdgriffith$style_elements$Element$viewport,
			author$project$Styles$Style$styles,
			A2(
				mdgriffith$style_elements$Element$within,
				_Utils_ap(
					belowDashboard,
					_Utils_ap(
						_List_fromArray(
							[
								A2(author$project$Views$Dashboard$dashboard, navigationLinks, controls)
							]),
						aboveDashboard)),
				A3(
					mdgriffith$style_elements$Element$el,
					author$project$Styles$Style$App,
					_Utils_ap(
						_List_fromArray(
							[
								mdgriffith$style_elements$Element$Attributes$height(mdgriffith$style_elements$Element$Attributes$fill),
								mdgriffith$style_elements$Element$Attributes$width(mdgriffith$style_elements$Element$Attributes$fill),
								mdgriffith$style_elements$Element$Attributes$clip
							]),
						appAtributes),
					mdgriffith$style_elements$Element$empty)));
	});
var author$project$Views$Dashboard$dashboardButton = author$project$Views$Dashboard$dashboardButtonWithOptions(
	{buttonType: author$project$Styles$Style$Okay, overlay: _List_Nil});
var author$project$Views$Dashboard$dashboardIconButton = author$project$Views$Dashboard$dashboardIconButtonWithOptions(
	{buttonType: author$project$Styles$Style$Okay, overlay: _List_Nil});
var author$project$Views$Icon$bed = author$project$Views$Icon$icon('M 6 6 C 4.355469 6 3 7.355469 3 9 L 3 15.78125 C 2.390625 16.332031 2 17.121094 2 18 L 2 27 L 7 27 L 7 25 L 25 25 L 25 27 L 30 27 L 30 18 C 30 17.121094 29.609375 16.332031 29 15.78125 L 29 9 C 29 7.355469 27.644531 6 26 6 Z M 6 8 L 26 8 C 26.554688 8 27 8.445313 27 9 L 27 15 L 25 15 L 25 14 C 25 12.355469 23.644531 11 22 11 L 18 11 C 17.234375 11 16.53125 11.300781 16 11.78125 C 15.46875 11.300781 14.765625 11 14 11 L 10 11 C 8.355469 11 7 12.355469 7 14 L 7 15 L 5 15 L 5 9 C 5 8.445313 5.445313 8 6 8 Z M 10 13 L 14 13 C 14.554688 13 15 13.445313 15 14 L 15 15 L 9 15 L 9 14 C 9 13.445313 9.445313 13 10 13 Z M 18 13 L 22 13 C 22.554688 13 23 13.445313 23 14 L 23 15 L 17 15 L 17 14 C 17 13.445313 17.445313 13 18 13 Z M 5 17 L 27 17 C 27.554688 17 28 17.445313 28 18 L 28 25 L 27 25 L 27 23 L 5 23 L 5 25 L 4 25 L 4 18 C 4 17.445313 4.445313 17 5 17 Z');
var author$project$Views$Icon$chair = author$project$Views$Icon$icon('M 11 4 L 11 16.4375 C 10.898438 16.464844 10.777344 16.503906 10.6875 16.53125 C 10.203125 16.679688 9.867188 16.835938 9.625 17 C 9.503906 17.082031 9.390625 17.167969 9.3125 17.25 C 9.234375 17.332031 9.125 17.5 9.125 17.5 L 9 17.71875 L 9 20 L 10 20 L 10 28 L 12 28 L 12 20 L 20 20 L 20 28 L 22 28 L 22 20 L 23 20 L 23 17.71875 L 22.875 17.5 C 22.875 17.5 22.765625 17.332031 22.6875 17.25 C 22.609375 17.167969 22.496094 17.082031 22.375 17 C 22.132813 16.835938 21.796875 16.679688 21.3125 16.53125 C 21.222656 16.503906 21.101563 16.464844 21 16.4375 L 21 4 L 19 4 L 19 5 L 13 5 L 13 4 Z M 13 7 L 15 7 L 15 16.03125 C 14.242188 16.050781 13.5625 16.070313 13 16.125 Z M 17 7 L 19 7 L 19 16.125 C 18.4375 16.070313 17.757813 16.050781 17 16.03125 Z');
var author$project$Views$Icon$checkboxChecked = author$project$Views$Icon$icon('M 5 5 L 5 27 L 27 27 L 27 5 Z M 7 7 L 25 7 L 25 25 L 7 25 Z M 21.28125 11.28125 L 14 18.5625 L 10.71875 15.28125 L 9.28125 16.71875 L 13.28125 20.71875 L 14 21.40625 L 14.71875 20.71875 L 22.71875 12.71875 Z');
var author$project$Views$Icon$checkboxUnchecked = author$project$Views$Icon$icon('M 5 5 L 5 27 L 27 27 L 27 5 Z M 7 7 L 25 7 L 25 25 L 7 25 Z');
var author$project$Views$Icon$checkmark = author$project$Views$Icon$icon('M 28.28125 6.28125 L 11 23.5625 L 3.71875 16.28125 L 2.28125 17.71875 L 10.28125 25.71875 L 11 26.40625 L 11.71875 25.71875 L 29.71875 7.71875 Z');
var author$project$Views$Icon$finger = author$project$Views$Icon$icon('M 12 4 C 10.355469 4 9 5.355469 9 7 L 9 16.65625 L 6.90625 19.34375 C 5.628906 20.996094 5.714844 23.367188 7.09375 24.9375 L 9.46875 27.625 C 10.796875 29.136719 12.707031 30 14.71875 30 L 20 30 C 23.855469 30 27 26.855469 27 23 L 27 14 C 27 12.355469 25.644531 11 24 11 C 23.464844 11 22.96875 11.15625 22.53125 11.40625 C 21.996094 10.5625 21.0625 10 20 10 C 19.464844 10 18.96875 10.15625 18.53125 10.40625 C 17.996094 9.5625 17.0625 9 16 9 C 15.648438 9 15.316406 9.074219 15 9.1875 L 15 7 C 15 5.355469 13.644531 4 12 4 Z M 12 6 C 12.566406 6 13 6.433594 13 7 L 13 15 L 15 15 L 15 12 C 15 11.433594 15.433594 11 16 11 C 16.566406 11 17 11.433594 17 12 L 17 15 L 19 15 L 19 13 C 19 12.433594 19.433594 12 20 12 C 20.566406 12 21 12.433594 21 13 L 21 15 L 23 15 L 23 14 C 23 13.433594 23.433594 13 24 13 C 24.566406 13 25 13.433594 25 14 L 25 23 C 25 25.773438 22.773438 28 20 28 L 14.71875 28 C 13.28125 28 11.917969 27.394531 10.96875 26.3125 L 8.59375 23.59375 C 7.839844 22.734375 7.800781 21.5 8.5 20.59375 L 9 19.9375 L 9 21 L 11 21 L 11 7 C 11 6.433594 11.433594 6 12 6 Z');
var author$project$Views$Icon$magnifyingGlassMinus = author$project$Views$Icon$icon('M 19 3 C 13.488281 3 9 7.488281 9 13 C 9 15.394531 9.839844 17.589844 11.25 19.3125 L 3.28125 27.28125 L 4.71875 28.71875 L 12.6875 20.75 C 14.410156 22.160156 16.605469 23 19 23 C 24.511719 23 29 18.511719 29 13 C 29 7.488281 24.511719 3 19 3 Z M 19 5 C 23.429688 5 27 8.570313 27 13 C 27 17.429688 23.429688 21 19 21 C 14.570313 21 11 17.429688 11 13 C 11 8.570313 14.570313 5 19 5 Z M 15 12 L 15 14 L 23 14 L 23 12 Z');
var author$project$Views$Icon$plus = author$project$Views$Icon$icon('m 17,10 0,5 5,0 0,2 -5,0 0,5 -2,0 0,-5 -5,0 0,-2 5,0 0,-5 z M 16,3 C 8.832031,3 3,8.832031 3,16 3,23.167969 8.832031,29 16,29 23.167969,29 29,23.167969 29,16 29,8.832031 23.167969,3 16,3 Z');
var author$project$Views$Icon$radioButtonDeselected = author$project$Views$Icon$icon('M 16 4 C 9.382813 4 4 9.382813 4 16 C 4 22.617188 9.382813 28 16 28 C 22.617188 28 28 22.617188 28 16 C 28 9.382813 22.617188 4 16 4 Z M 16 6 C 21.535156 6 26 10.464844 26 16 C 26 21.535156 21.535156 26 16 26 C 10.464844 26 6 21.535156 6 16 C 6 10.464844 10.464844 6 16 6 Z');
var author$project$Views$Icon$radioButtonSelected = author$project$Views$Icon$icon('M 16 4 C 9.382813 4 4 9.382813 4 16 C 4 22.617188 9.382813 28 16 28 C 22.617188 28 28 22.617188 28 16 C 28 9.382813 22.617188 4 16 4 Z M 16 6 C 21.535156 6 26 10.464844 26 16 C 26 21.535156 21.535156 26 16 26 C 10.464844 26 6 21.535156 6 16 C 6 10.464844 10.464844 6 16 6 Z M 16 13 C 14.34375 13 13 14.34375 13 16 C 13 17.65625 14.34375 19 16 19 C 17.65625 19 19 17.65625 19 16 C 19 14.34375 17.65625 13 16 13 Z');
var author$project$Views$Icon$rightArrow = author$project$Views$Icon$icon('M 18.71875 6.78125 L 17.28125 8.21875 L 24.0625 15 L 4 15 L 4 17 L 24.0625 17 L 17.28125 23.78125 L 18.71875 25.21875 L 27.21875 16.71875 L 27.90625 16 L 27.21875 15.28125 Z');
var author$project$Views$Icon$stairsDown = author$project$Views$Icon$icon('M 20 5 L 20 10 L 15 10 L 15 15 L 10 15 L 10 20 L 5 20 L 5 27 L 7 27 L 7 22 L 12 22 L 12 17 L 17 17 L 17 12 L 22 12 L 22 7 L 27 7 L 27 5 Z M 25.28125 18.28125 L 20 23.5625 L 20 20 L 18 20 L 18 27 L 25 27 L 25 25 L 21.4375 25 L 26.71875 19.71875 Z');
var author$project$Views$Icon$stairsUp = author$project$Views$Icon$icon('M 20 5 L 20 10 L 15 10 L 15 15 L 10 15 L 10 20 L 5 20 L 5 27 L 7 27 L 7 22 L 12 22 L 12 17 L 17 17 L 17 12 L 22 12 L 22 7 L 27 7 L 27 5 Z M 20 18 L 20 20 L 23.5625 20 L 18.28125 25.28125 L 19.71875 26.71875 L 25 21.4375 L 25 25 L 27 25 L 27 18 Z');
var author$project$Views$Icon$tapeMeasure = author$project$Views$Icon$icon('M 16 5 C 12.578125 5 9.464844 5.546875 7.09375 6.65625 C 4.722656 7.765625 3 9.601563 3 12 L 3 21 C 3 22.015625 3.511719 22.929688 4.25 23.65625 C 4.988281 24.382813 5.957031 24.980469 7.125 25.46875 C 9.464844 26.441406 12.574219 27 16 27 C 19.425781 27 22.535156 26.441406 24.875 25.46875 C 26.042969 24.980469 27.011719 24.382813 27.75 23.65625 C 28.488281 22.929688 29 22.015625 29 21 L 29 11 L 27 11 L 27 12 C 27 12.890625 26.546875 13.492188 25.59375 14.09375 C 24.640625 14.695313 23.246094 15.144531 21.8125 15.4375 C 18.945313 16.019531 16 16 16 16 C 12.800781 16 9.910156 15.460938 7.90625 14.625 C 6.902344 14.207031 6.132813 13.6875 5.65625 13.21875 C 5.179688 12.75 5 12.367188 5 12 C 5 10.523438 5.964844 9.359375 7.9375 8.4375 C 9.910156 7.515625 12.792969 7 16 7 C 19.207031 7 21.035156 7.515625 21.96875 8.0625 C 22.902344 8.609375 23 9.082031 23 9.40625 C 23 9.867188 22.898438 10.175781 22.65625 10.46875 C 22.414063 10.761719 22.003906 11.042969 21.40625 11.28125 C 20.210938 11.757813 18.289063 12 16 12 C 16 12 14.566406 11.996094 13.1875 11.71875 C 12.5 11.578125 11.835938 11.359375 11.4375 11.125 C 11.132813 10.945313 11.125 10.859375 11.09375 10.75 C 11.285156 10.636719 11.664063 10.496094 12.15625 10.375 C 13.167969 10.128906 14.613281 9.980469 16 10 L 16 8 C 14.46875 7.976563 12.914063 8.101563 11.65625 8.40625 C 11.027344 8.558594 10.484375 8.765625 10 9.0625 C 9.515625 9.359375 9 9.878906 9 10.625 C 9 11.636719 9.710938 12.414063 10.4375 12.84375 C 11.164063 13.273438 12 13.492188 12.8125 13.65625 C 14.433594 13.984375 16 14 16 14 C 18.417969 14 20.5 13.773438 22.125 13.125 C 22.9375 12.800781 23.664063 12.378906 24.1875 11.75 C 24.710938 11.121094 25 10.277344 25 9.40625 C 25 8.394531 24.410156 7.171875 23 6.34375 C 21.589844 5.515625 19.417969 5 16 5 Z M 5 15.28125 C 5.609375 15.734375 6.3125 16.128906 7.125 16.46875 C 9.464844 17.441406 12.574219 18 16 18 C 16 18 19.054688 18.042969 22.1875 17.40625 C 23.753906 17.089844 25.359375 16.597656 26.65625 15.78125 C 26.773438 15.707031 26.886719 15.613281 27 15.53125 L 27 21 C 27 21.367188 26.820313 21.75 26.34375 22.21875 C 26.023438 22.535156 25.570313 22.871094 25 23.1875 L 25 19 L 23 19 L 23 24 C 22.378906 24.1875 21.71875 24.355469 21 24.5 L 21 22 L 19 22 L 19 24.8125 C 18.351563 24.882813 17.691406 24.945313 17 24.96875 L 17 20 L 15 20 L 15 24.96875 C 14.3125 24.945313 13.648438 24.882813 13 24.8125 L 13 22 L 11 22 L 11 24.53125 C 10.269531 24.390625 9.621094 24.199219 9 24 L 9 19 L 7 19 L 7 23.1875 C 6.429688 22.871094 5.976563 22.535156 5.65625 22.21875 C 5.179688 21.75 5 21.367188 5 21 Z');
var cuducos$elm_format_number$Helpers$FormattedNumber = F5(
	function (original, integers, decimals, prefix, suffix) {
		return {decimals: decimals, integers: integers, original: original, prefix: prefix, suffix: suffix};
	});
var cuducos$elm_format_number$Helpers$Negative = {$: 'Negative'};
var cuducos$elm_format_number$Helpers$Positive = {$: 'Positive'};
var cuducos$elm_format_number$Helpers$Zero = {$: 'Zero'};
var cuducos$elm_format_number$Helpers$classify = function (formatted) {
	var onlyZeros = A2(
		elm$core$String$all,
		function (_char) {
			return _Utils_eq(
				_char,
				_Utils_chr('0'));
		},
		elm$core$String$concat(
			A2(
				elm$core$List$append,
				formatted.integers,
				elm$core$List$singleton(
					A2(elm$core$Maybe$withDefault, '', formatted.decimals)))));
	return onlyZeros ? cuducos$elm_format_number$Helpers$Zero : ((formatted.original < 0) ? cuducos$elm_format_number$Helpers$Negative : cuducos$elm_format_number$Helpers$Positive);
};
var elm$core$String$dropRight = F2(
	function (n, string) {
		return (n < 1) ? string : A3(elm$core$String$slice, 0, -n, string);
	});
var elm$core$String$right = F2(
	function (n, string) {
		return (n < 1) ? '' : A3(
			elm$core$String$slice,
			-n,
			elm$core$String$length(string),
			string);
	});
var cuducos$elm_format_number$Helpers$splitThousands = function (integers) {
	var reversedSplitThousands = function (value) {
		return (elm$core$String$length(value) > 3) ? A2(
			elm$core$List$cons,
			A2(elm$core$String$right, 3, value),
			reversedSplitThousands(
				A2(elm$core$String$dropRight, 3, value))) : _List_fromArray(
			[value]);
	};
	return elm$core$List$reverse(
		reversedSplitThousands(integers));
};
var elm$core$String$filter = _String_filter;
var elm$core$Basics$isInfinite = _Basics_isInfinite;
var elm$core$Basics$isNaN = _Basics_isNaN;
var elm$core$String$padRight = F3(
	function (n, _char, string) {
		return _Utils_ap(
			string,
			A2(
				elm$core$String$repeat,
				n - elm$core$String$length(string),
				elm$core$String$fromChar(_char)));
	});
var elm$core$String$reverse = _String_reverse;
var myrho$elm_round$Round$addSign = F2(
	function (signed, str) {
		var isNotZero = A2(
			elm$core$List$any,
			function (c) {
				return (!_Utils_eq(
					c,
					_Utils_chr('0'))) && (!_Utils_eq(
					c,
					_Utils_chr('.')));
			},
			elm$core$String$toList(str));
		return _Utils_ap(
			(signed && isNotZero) ? '-' : '',
			str);
	});
var myrho$elm_round$Round$increaseNum = function (_n0) {
	var head = _n0.a;
	var tail = _n0.b;
	if (_Utils_eq(
		head,
		_Utils_chr('9'))) {
		var _n1 = elm$core$String$uncons(tail);
		if (_n1.$ === 'Nothing') {
			return '01';
		} else {
			var headtail = _n1.a;
			return A2(
				elm$core$String$cons,
				_Utils_chr('0'),
				myrho$elm_round$Round$increaseNum(headtail));
		}
	} else {
		var c = elm$core$Char$toCode(head);
		return ((c >= 48) && (c < 57)) ? A2(
			elm$core$String$cons,
			elm$core$Char$fromCode(c + 1),
			tail) : '0';
	}
};
var myrho$elm_round$Round$splitComma = function (str) {
	var _n0 = A2(elm$core$String$split, '.', str);
	if (_n0.b) {
		if (_n0.b.b) {
			var before = _n0.a;
			var _n1 = _n0.b;
			var after = _n1.a;
			return _Utils_Tuple2(before, after);
		} else {
			var before = _n0.a;
			return _Utils_Tuple2(before, '0');
		}
	} else {
		return _Utils_Tuple2('0', '0');
	}
};
var myrho$elm_round$Round$toDecimal = function (fl) {
	var _n0 = A2(
		elm$core$String$split,
		'e',
		elm$core$String$fromFloat(
			elm$core$Basics$abs(fl)));
	if (_n0.b) {
		if (_n0.b.b) {
			var num = _n0.a;
			var _n1 = _n0.b;
			var exp = _n1.a;
			var e = A2(
				elm$core$Maybe$withDefault,
				0,
				elm$core$String$toInt(
					A2(elm$core$String$startsWith, '+', exp) ? A2(elm$core$String$dropLeft, 1, exp) : exp));
			var _n2 = myrho$elm_round$Round$splitComma(num);
			var before = _n2.a;
			var after = _n2.b;
			var total = _Utils_ap(before, after);
			var zeroed = (e < 0) ? A2(
				elm$core$Maybe$withDefault,
				'0',
				A2(
					elm$core$Maybe$map,
					function (_n3) {
						var a = _n3.a;
						var b = _n3.b;
						return a + ('.' + b);
					},
					A2(
						elm$core$Maybe$map,
						elm$core$Tuple$mapFirst(elm$core$String$fromChar),
						elm$core$String$uncons(
							_Utils_ap(
								A2(
									elm$core$String$repeat,
									elm$core$Basics$abs(e),
									'0'),
								total))))) : A3(
				elm$core$String$padRight,
				e + 1,
				_Utils_chr('0'),
				total);
			return _Utils_ap(
				(fl < 0) ? '-' : '',
				zeroed);
		} else {
			var num = _n0.a;
			return _Utils_ap(
				(fl < 0) ? '-' : '',
				num);
		}
	} else {
		return '';
	}
};
var myrho$elm_round$Round$roundFun = F3(
	function (functor, s, fl) {
		if (elm$core$Basics$isInfinite(fl) || elm$core$Basics$isNaN(fl)) {
			return elm$core$String$fromFloat(fl);
		} else {
			var signed = fl < 0;
			var _n0 = myrho$elm_round$Round$splitComma(
				myrho$elm_round$Round$toDecimal(
					elm$core$Basics$abs(fl)));
			var before = _n0.a;
			var after = _n0.b;
			var r = elm$core$String$length(before) + s;
			var normalized = _Utils_ap(
				A2(elm$core$String$repeat, (-r) + 1, '0'),
				A3(
					elm$core$String$padRight,
					r,
					_Utils_chr('0'),
					_Utils_ap(before, after)));
			var totalLen = elm$core$String$length(normalized);
			var roundDigitIndex = A2(elm$core$Basics$max, 1, r);
			var increase = A2(
				functor,
				signed,
				A3(elm$core$String$slice, roundDigitIndex, totalLen, normalized));
			var remains = A3(elm$core$String$slice, 0, roundDigitIndex, normalized);
			var num = increase ? elm$core$String$reverse(
				A2(
					elm$core$Maybe$withDefault,
					'1',
					A2(
						elm$core$Maybe$map,
						myrho$elm_round$Round$increaseNum,
						elm$core$String$uncons(
							elm$core$String$reverse(remains))))) : remains;
			var numLen = elm$core$String$length(num);
			var numZeroed = (num === '0') ? num : ((s <= 0) ? _Utils_ap(
				num,
				A2(
					elm$core$String$repeat,
					elm$core$Basics$abs(s),
					'0')) : ((_Utils_cmp(
				s,
				elm$core$String$length(after)) < 0) ? (A3(elm$core$String$slice, 0, numLen - s, num) + ('.' + A3(elm$core$String$slice, numLen - s, numLen, num))) : _Utils_ap(
				before + '.',
				A3(
					elm$core$String$padRight,
					s,
					_Utils_chr('0'),
					after))));
			return A2(myrho$elm_round$Round$addSign, signed, numZeroed);
		}
	});
var myrho$elm_round$Round$round = myrho$elm_round$Round$roundFun(
	F2(
		function (signed, str) {
			var _n0 = elm$core$String$uncons(str);
			if (_n0.$ === 'Nothing') {
				return false;
			} else {
				if ('5' === _n0.a.a.valueOf()) {
					if (_n0.a.b === '') {
						var _n1 = _n0.a;
						return !signed;
					} else {
						var _n2 = _n0.a;
						return true;
					}
				} else {
					var _n3 = _n0.a;
					var _int = _n3.a;
					return function (i) {
						return ((i > 53) && signed) || ((i >= 53) && (!signed));
					}(
						elm$core$Char$toCode(_int));
				}
			}
		}));
var cuducos$elm_format_number$Helpers$parse = F2(
	function (locale, original) {
		var parts = A2(
			elm$core$String$split,
			'.',
			A2(myrho$elm_round$Round$round, locale.decimals, original));
		var integers = cuducos$elm_format_number$Helpers$splitThousands(
			A2(
				elm$core$String$filter,
				elm$core$Char$isDigit,
				A2(
					elm$core$Maybe$withDefault,
					'0',
					elm$core$List$head(parts))));
		var decimals = elm$core$List$head(
			A2(elm$core$List$drop, 1, parts));
		var partial = A5(cuducos$elm_format_number$Helpers$FormattedNumber, original, integers, decimals, '', '');
		var _n0 = cuducos$elm_format_number$Helpers$classify(partial);
		switch (_n0.$) {
			case 'Negative':
				return _Utils_update(
					partial,
					{prefix: locale.negativePrefix, suffix: locale.negativeSuffix});
			case 'Positive':
				return _Utils_update(
					partial,
					{prefix: locale.positivePrefix, suffix: locale.positiveSuffix});
			default:
				return partial;
		}
	});
var cuducos$elm_format_number$Helpers$stringfy = F2(
	function (locale, formatted) {
		var integers = A2(elm$core$String$join, locale.thousandSeparator, formatted.integers);
		var decimals = function () {
			var _n0 = formatted.decimals;
			if (_n0.$ === 'Just') {
				var digits = _n0.a;
				return _Utils_ap(locale.decimalSeparator, digits);
			} else {
				return '';
			}
		}();
		return elm$core$String$concat(
			_List_fromArray(
				[formatted.prefix, integers, decimals, formatted.suffix]));
	});
var cuducos$elm_format_number$FormatNumber$format = F2(
	function (locale, number_) {
		return A2(
			cuducos$elm_format_number$Helpers$stringfy,
			locale,
			A2(cuducos$elm_format_number$Helpers$parse, locale, number_));
	});
var cuducos$elm_format_number$FormatNumber$Locales$Locale = F7(
	function (decimals, thousandSeparator, decimalSeparator, negativePrefix, negativeSuffix, positivePrefix, positiveSuffix) {
		return {decimalSeparator: decimalSeparator, decimals: decimals, negativePrefix: negativePrefix, negativeSuffix: negativeSuffix, positivePrefix: positivePrefix, positiveSuffix: positiveSuffix, thousandSeparator: thousandSeparator};
	});
var cuducos$elm_format_number$FormatNumber$Locales$usLocale = A7(cuducos$elm_format_number$FormatNumber$Locales$Locale, 2, ',', '.', '−', '', '', '');
var elm$json$Json$Decode$bool = _Json_decodeBool;
var elm$json$Json$Decode$map3 = _Json_map3;
var elm$virtual_dom$VirtualDom$keyedNodeNS = F2(
	function (namespace, tag) {
		return A2(
			_VirtualDom_keyedNodeNS,
			namespace,
			_VirtualDom_noScript(tag));
	});
var elm$svg$Svg$Keyed$node = elm$virtual_dom$VirtualDom$keyedNodeNS('http://www.w3.org/2000/svg');
var elm$core$Char$toUpper = _Char_toUpper;
var elm_community$string_extra$String$Extra$changeCase = F2(
	function (mutator, word) {
		return A2(
			elm$core$Maybe$withDefault,
			'',
			A2(
				elm$core$Maybe$map,
				function (_n0) {
					var head = _n0.a;
					var tail = _n0.b;
					return A2(
						elm$core$String$cons,
						mutator(head),
						tail);
				},
				elm$core$String$uncons(word)));
	});
var elm_community$string_extra$String$Extra$toSentenceCase = function (word) {
	return A2(elm_community$string_extra$String$Extra$changeCase, elm$core$Char$toUpper, word);
};
var ianmackenzie$elm_geometry$Frame2d$atOrigin = ianmackenzie$elm_geometry$Frame2d$atPoint(ianmackenzie$elm_geometry$Point2d$origin);
var ianmackenzie$elm_geometry$Bootstrap$Direction2d$unsafe = ianmackenzie$elm_geometry$Geometry$Types$Direction2d;
var ianmackenzie$elm_geometry$Bootstrap$Direction2d$reverse = function (direction) {
	var _n0 = ianmackenzie$elm_geometry$Bootstrap$Direction2d$components(direction);
	var x = _n0.a;
	var y = _n0.b;
	return ianmackenzie$elm_geometry$Bootstrap$Direction2d$unsafe(
		_Utils_Tuple2(-x, -y));
};
var ianmackenzie$elm_geometry$Direction2d$reverse = ianmackenzie$elm_geometry$Bootstrap$Direction2d$reverse;
var ianmackenzie$elm_geometry$Frame2d$reverseY = function (frame) {
	return ianmackenzie$elm_geometry$Frame2d$unsafe(
		{
			originPoint: ianmackenzie$elm_geometry$Frame2d$originPoint(frame),
			xDirection: ianmackenzie$elm_geometry$Frame2d$xDirection(frame),
			yDirection: ianmackenzie$elm_geometry$Direction2d$reverse(
				ianmackenzie$elm_geometry$Frame2d$yDirection(frame))
		});
};
var ianmackenzie$elm_geometry$Vector2d$componentIn = F2(
	function (direction_, vector) {
		var _n0 = ianmackenzie$elm_geometry$Vector2d$components(vector);
		var vx = _n0.a;
		var vy = _n0.b;
		var _n1 = ianmackenzie$elm_geometry$Bootstrap$Direction2d$components(direction_);
		var dx = _n1.a;
		var dy = _n1.b;
		return (vx * dx) + (vy * dy);
	});
var ianmackenzie$elm_geometry$Vector2d$relativeTo = F2(
	function (frame, vector) {
		return ianmackenzie$elm_geometry$Vector2d$fromComponents(
			_Utils_Tuple2(
				A2(
					ianmackenzie$elm_geometry$Vector2d$componentIn,
					ianmackenzie$elm_geometry$Bootstrap$Frame2d$xDirection(frame),
					vector),
				A2(
					ianmackenzie$elm_geometry$Vector2d$componentIn,
					ianmackenzie$elm_geometry$Bootstrap$Frame2d$yDirection(frame),
					vector)));
	});
var ianmackenzie$elm_geometry$Direction2d$relativeTo = F2(
	function (frame, direction) {
		return ianmackenzie$elm_geometry$Direction2d$toDirection(
			A2(
				ianmackenzie$elm_geometry$Vector2d$relativeTo,
				frame,
				ianmackenzie$elm_geometry$Direction2d$toVector(direction)));
	});
var ianmackenzie$elm_geometry$Point2d$relativeTo = F2(
	function (frame, point) {
		return ianmackenzie$elm_geometry$Point2d$fromCoordinates(
			ianmackenzie$elm_geometry$Vector2d$components(
				A2(
					ianmackenzie$elm_geometry$Vector2d$relativeTo,
					frame,
					A2(
						ianmackenzie$elm_geometry$Vector2d$from,
						ianmackenzie$elm_geometry$Bootstrap$Frame2d$originPoint(frame),
						point))));
	});
var ianmackenzie$elm_geometry$Frame2d$relativeTo = function (otherFrame) {
	var relativePoint = ianmackenzie$elm_geometry$Point2d$relativeTo(otherFrame);
	var relativeDirection = ianmackenzie$elm_geometry$Direction2d$relativeTo(otherFrame);
	return function (frame) {
		return ianmackenzie$elm_geometry$Frame2d$unsafe(
			{
				originPoint: relativePoint(
					ianmackenzie$elm_geometry$Frame2d$originPoint(frame)),
				xDirection: relativeDirection(
					ianmackenzie$elm_geometry$Frame2d$xDirection(frame)),
				yDirection: relativeDirection(
					ianmackenzie$elm_geometry$Frame2d$yDirection(frame))
			});
	};
};
var ianmackenzie$elm_geometry$Frame2d$xy = ianmackenzie$elm_geometry$Frame2d$atOrigin;
var elm$svg$Svg$g = elm$svg$Svg$trustedNode('g');
var ianmackenzie$elm_geometry_svg$Geometry$Svg$placeIn = F2(
	function (frame, element) {
		var _n0 = ianmackenzie$elm_geometry$Direction2d$components(
			ianmackenzie$elm_geometry$Frame2d$yDirection(frame));
		var x2 = _n0.a;
		var y2 = _n0.b;
		var _n1 = ianmackenzie$elm_geometry$Direction2d$components(
			ianmackenzie$elm_geometry$Frame2d$xDirection(frame));
		var x1 = _n1.a;
		var y1 = _n1.b;
		var _n2 = ianmackenzie$elm_geometry$Point2d$coordinates(
			ianmackenzie$elm_geometry$Frame2d$originPoint(frame));
		var px = _n2.a;
		var py = _n2.b;
		var components = A2(
			elm$core$List$map,
			elm$core$String$fromFloat,
			_List_fromArray(
				[x1, y1, x2, y2, px, py]));
		var transform = 'matrix(' + (A2(elm$core$String$join, ' ', components) + ')');
		return A2(
			elm$svg$Svg$g,
			_List_fromArray(
				[
					elm$svg$Svg$Attributes$transform(transform)
				]),
			_List_fromArray(
				[element]));
	});
var ianmackenzie$elm_geometry_svg$Geometry$Svg$relativeTo = function (frame) {
	return ianmackenzie$elm_geometry_svg$Geometry$Svg$placeIn(
		A2(ianmackenzie$elm_geometry$Frame2d$relativeTo, frame, ianmackenzie$elm_geometry$Frame2d$xy));
};
var elm$html$Html$Attributes$href = function (url) {
	return A2(
		elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var elm$html$Html$Attributes$rel = _VirtualDom_attribute('rel');
var mdgriffith$style_elements$Element$link = F2(
	function (src, elem) {
		return mdgriffith$style_elements$Element$Internal$Model$Element(
			{
				absolutelyPositioned: elm$core$Maybe$Nothing,
				attrs: _List_fromArray(
					[
						mdgriffith$style_elements$Element$Internal$Model$Attr(
						elm$html$Html$Attributes$href(src)),
						mdgriffith$style_elements$Element$Internal$Model$Attr(
						elm$html$Html$Attributes$rel('noopener noreferrer'))
					]),
				child: elem,
				node: 'a',
				style: elm$core$Maybe$Nothing
			});
	});
var mdgriffith$style_elements$Element$Internal$Modify$makeInline = function (el) {
	switch (el.$) {
		case 'Empty':
			return mdgriffith$style_elements$Element$Internal$Model$Empty;
		case 'Raw':
			var h = el.a;
			return mdgriffith$style_elements$Element$Internal$Model$Raw(h);
		case 'Spacer':
			var x = el.a;
			return mdgriffith$style_elements$Element$Internal$Model$Spacer(x);
		case 'Layout':
			var elm = el.a;
			return mdgriffith$style_elements$Element$Internal$Model$Layout(
				_Utils_update(
					elm,
					{
						attrs: A2(elm$core$List$cons, mdgriffith$style_elements$Element$Internal$Model$Inline, elm.attrs)
					}));
		case 'Element':
			var elm = el.a;
			return mdgriffith$style_elements$Element$Internal$Model$Element(
				_Utils_update(
					elm,
					{
						attrs: A2(elm$core$List$cons, mdgriffith$style_elements$Element$Internal$Model$Inline, elm.attrs),
						child: mdgriffith$style_elements$Element$Internal$Modify$makeInline(elm.child)
					}));
		default:
			var decoration = el.a;
			var content = el.b;
			return A2(
				mdgriffith$style_elements$Element$Internal$Model$Text,
				_Utils_update(
					decoration,
					{inline: true}),
				content);
	}
};
var mdgriffith$style_elements$Element$paragraph = F3(
	function (style, attrs, children) {
		return mdgriffith$style_elements$Element$Internal$Model$Layout(
			{
				absolutelyPositioned: elm$core$Maybe$Nothing,
				attrs: attrs,
				children: mdgriffith$style_elements$Element$Internal$Model$Normal(
					A2(elm$core$List$map, mdgriffith$style_elements$Element$Internal$Modify$makeInline, children)),
				layout: mdgriffith$style_elements$Style$Internal$Model$TextLayout(false),
				node: 'p',
				style: elm$core$Maybe$Just(style)
			});
	});
var mdgriffith$style_elements$Element$when = F2(
	function (bool, elm) {
		return bool ? elm : mdgriffith$style_elements$Element$empty;
	});
var mdgriffith$style_elements$Style$Internal$Model$Wrap = function (a) {
	return {$: 'Wrap', a: a};
};
var mdgriffith$style_elements$Element$wrappedRow = F3(
	function (style, attrs, children) {
		return mdgriffith$style_elements$Element$Internal$Model$Layout(
			{
				absolutelyPositioned: elm$core$Maybe$Nothing,
				attrs: attrs,
				children: mdgriffith$style_elements$Element$Internal$Model$Normal(children),
				layout: A2(
					mdgriffith$style_elements$Style$Internal$Model$FlexLayout,
					mdgriffith$style_elements$Style$Internal$Model$GoRight,
					_List_fromArray(
						[
							mdgriffith$style_elements$Style$Internal$Model$Wrap(true)
						])),
				node: 'div',
				style: elm$core$Maybe$Just(style)
			});
	});
var mdgriffith$style_elements$Element$Attributes$padding = function (x) {
	return A4(
		mdgriffith$style_elements$Element$Internal$Model$Padding,
		elm$core$Maybe$Just(x),
		elm$core$Maybe$Just(x),
		elm$core$Maybe$Just(x),
		elm$core$Maybe$Just(x));
};
var mdgriffith$style_elements$Element$Internal$Model$Justify = {$: 'Justify'};
var mdgriffith$style_elements$Element$Attributes$spread = mdgriffith$style_elements$Element$Internal$Model$HAlign(mdgriffith$style_elements$Element$Internal$Model$Justify);
var mdgriffith$style_elements$Element$Internal$Model$Vary = F2(
	function (a, b) {
		return {$: 'Vary', a: a, b: b};
	});
var mdgriffith$style_elements$Element$Attributes$vary = mdgriffith$style_elements$Element$Internal$Model$Vary;
var mdgriffith$style_elements$Element$Internal$Model$Overflow = function (a) {
	return {$: 'Overflow', a: a};
};
var mdgriffith$style_elements$Element$Internal$Model$YAxis = {$: 'YAxis'};
var mdgriffith$style_elements$Element$Attributes$yScrollbar = mdgriffith$style_elements$Element$Internal$Model$Overflow(mdgriffith$style_elements$Element$Internal$Model$YAxis);
var elm$virtual_dom$VirtualDom$Custom = function (a) {
	return {$: 'Custom', a: a};
};
var elm$html$Html$Events$custom = F2(
	function (event, decoder) {
		return A2(
			elm$virtual_dom$VirtualDom$on,
			event,
			elm$virtual_dom$VirtualDom$Custom(decoder));
	});
var mdgriffith$style_elements$Element$Events$custom = F2(
	function (ev, decode) {
		return mdgriffith$style_elements$Element$Internal$Model$Event(
			A2(elm$html$Html$Events$custom, ev, decode));
	});
var elm$html$Html$Events$onMouseDown = function (msg) {
	return A2(
		elm$html$Html$Events$on,
		'mousedown',
		elm$json$Json$Decode$succeed(msg));
};
var mdgriffith$style_elements$Element$Events$onMouseDown = A2(elm$core$Basics$composeL, mdgriffith$style_elements$Element$Internal$Model$Event, elm$html$Html$Events$onMouseDown);
var mgold$elm_nonempty_list$List$Nonempty$map = F2(
	function (f, _n0) {
		var x = _n0.a;
		var xs = _n0.b;
		return A2(
			mgold$elm_nonempty_list$List$Nonempty$Nonempty,
			f(x),
			A2(elm$core$List$map, f, xs));
	});
var author$project$Pages$Interior$view = function (model) {
	var windowWidth = 1.8;
	var warpRatio = 1.18;
	var wallsControlsButton = author$project$Session$RtckLoft$customWallsEnabled ? _List_fromArray(
		[
			A3(
			author$project$Views$Dashboard$dashboardIconButton,
			_List_fromArray(
				[
					author$project$Utilities$onMouseUpWithoutPropagation(author$project$Pages$Interior$Ignore),
					author$project$Utilities$onClickWithoutPropagation(
					author$project$Pages$Interior$OpenDrawer(author$project$Pages$Interior$BuildWalls))
				]),
			author$project$Views$Icon$bed,
			author$project$Pages$Interior$buildWalls)
		]) : _List_Nil;
	var wallTypeRadioOption = F2(
		function (wallType, label) {
			return A3(
				mdgriffith$style_elements$Element$row,
				author$project$Styles$Style$Interactive,
				_List_fromArray(
					[
						mdgriffith$style_elements$Element$Attributes$verticalCenter,
						mdgriffith$style_elements$Element$Attributes$spacing(8),
						mdgriffith$style_elements$Element$Events$onClick(
						author$project$Pages$Interior$ChangeWallType(wallType))
					]),
				_List_fromArray(
					[
						_Utils_eq(
						model.uiMode,
						author$project$Pages$Interior$BuildingWalls(wallType)) ? author$project$Views$Icon$radioButtonSelected(24) : author$project$Views$Icon$radioButtonDeselected(24),
						mdgriffith$style_elements$Element$text(label)
					]));
		});
	var valueControl = F3(
		function (showIf, clickAction, icon) {
			return showIf ? A3(
				mdgriffith$style_elements$Element$el,
				author$project$Styles$Style$Interactive,
				_List_fromArray(
					[
						mdgriffith$style_elements$Element$Events$onClick(clickAction)
					]),
				icon(24)) : A3(
				mdgriffith$style_elements$Element$el,
				author$project$Styles$Style$Unstyled,
				_List_fromArray(
					[
						mdgriffith$style_elements$Element$Attributes$width(
						mdgriffith$style_elements$Element$Attributes$px(24)),
						mdgriffith$style_elements$Element$Attributes$height(
						mdgriffith$style_elements$Element$Attributes$px(24))
					]),
				mdgriffith$style_elements$Element$empty);
		});
	var turnRadius = 0.4;
	var toScrollHandler = F3(
		function (ctrlKey, deltaX, deltaY) {
			return {
				message: author$project$Pages$Interior$GotScroll(
					{deltaX: deltaX, deltaY: deltaY, isPinchGesture: ctrlKey}),
				preventDefault: true,
				stopPropagation: true
			};
		});
	var svgCoordinates = ianmackenzie$elm_geometry$Frame2d$reverseY(ianmackenzie$elm_geometry$Frame2d$atOrigin);
	var numberOfWideSills = 2;
	var numberOfSkylights = 5;
	var numberOfNarrowSills = 10;
	var noAccessToEdgeMessage = function (_n35) {
		var item = _n35.item;
		var locationPreposition = _n35.locationPreposition;
		var locationLabel = _n35.locationLabel;
		return locationPreposition + (' the ' + (author$project$Architecture$Item$name(item) + (', there’s not enough space ' + (locationLabel + '.'))));
	};
	var loftWidth = 17.7;
	var loftLength = 14.8;
	var loftHeight = 3.2;
	var itemsOnCurrentLevel = author$project$Pages$Interior$items(model);
	var itemsOnPlan = function () {
		var _n33 = model.dragAndDropState;
		if ((_n33.$ === 'DraggingOrTapping') && (_n33.a.$ === 'GrabbedFromPlan')) {
			var _n34 = _n33.a;
			var item = _n33.b;
			return A2(elm$core$List$cons, item, itemsOnCurrentLevel);
		} else {
			return itemsOnCurrentLevel;
		}
	}();
	var otherItemsBoundingBoxes = A2(
		elm$core$List$map,
		author$project$Grid$Footprint$toBoundingBoxes,
		A2(elm$core$List$map, author$project$Architecture$Item$footprint, itemsOnPlan));
	var spacesOnPlan = A2(elm$core$List$filterMap, author$project$Architecture$Item$getEquipment, itemsOnPlan);
	var numberOfConferenceTables = elm$core$List$length(
		A2(
			elm$core$List$filter,
			function (equipment) {
				var _n32 = author$project$Architecture$Equipment$equipmentType(equipment);
				if ((_n32.$ === 'TableWithoutSeatsAtHead') && (_n32.a.$ === 'DiningTable')) {
					return true;
				} else {
					return false;
				}
			},
			spacesOnPlan));
	var numberOfConferenceChairs = numberOfConferenceTables * 6;
	var wallsOnPlan = function (expectedWallType) {
		return A2(
			elm$core$List$filter,
			function (wall) {
				return _Utils_eq(
					author$project$Architecture$Wall$wallType(wall),
					expectedWallType);
			},
			A2(elm$core$List$filterMap, author$project$Architecture$Item$getWall, itemsOnPlan));
	};
	var numberOfInteriorDoors = F2(
		function (expectedWallType, expedtedDoorType) {
			return elm$core$List$length(
				A2(
					elm$core$List$filter,
					function (door) {
						return _Utils_eq(
							author$project$Architecture$Door$doorType(door),
							expedtedDoorType);
					},
					elm$core$List$concat(
						A2(
							elm$core$List$map,
							author$project$Architecture$Wall$doors,
							wallsOnPlan(expectedWallType)))));
		});
	var totalNumberOfInteriorDoors = A2(numberOfInteriorDoors, author$project$Architecture$Wall$DividingWall, author$project$Architecture$Door$Basic) + A2(numberOfInteriorDoors, author$project$Architecture$Wall$DividingWall, author$project$Architecture$Door$GlassFullHeight);
	var itemsDisplayed = function () {
		var _n29 = A4(author$project$Pages$Interior$ItemsViewData, model.uiMode, model.dragAndDropState, model.lastMouseDownPosition, model.currentMouseMovePosition);
		_n29$2:
		while (true) {
			switch (_n29.b.$) {
				case 'DrawingWall':
					if (((_n29.a.$ === 'BuildingWalls') && (_n29.c.$ === 'Just')) && (_n29.d.$ === 'Just')) {
						var wallType = _n29.a.a;
						var _n30 = _n29.b;
						var startPosition = _n29.c.a;
						var endPosition = _n29.d.a;
						return A2(
							elm$core$List$cons,
							A4(author$project$Architecture$Item$drawWall, model, wallType, startPosition, endPosition),
							itemsOnCurrentLevel);
					} else {
						break _n29$2;
					}
				case 'DraggingOrTapping':
					var _n31 = _n29.b;
					var item = _n31.b;
					return A2(elm$core$List$cons, item, itemsOnCurrentLevel);
				default:
					break _n29$2;
			}
		}
		return itemsOnCurrentLevel;
	}();
	var formatCurrency = function (price) {
		return A2(
			cuducos$elm_format_number$FormatNumber$format,
			_Utils_update(
				cuducos$elm_format_number$FormatNumber$Locales$usLocale,
				{decimals: 0}),
			price) + ' PLN';
	};
	var floorArea = loftLength * loftWidth;
	var exteriorWallsInnerArea = ((2 * loftLength) + (2 * loftWidth)) * loftHeight;
	var existingItemsBoundingBoxes = A2(elm$core$List$map, author$project$Architecture$ExistingItem$boundingBoxes, model.session.existingItems);
	var itemBoundingBoxes = elm$core$List$concat(
		_Utils_ap(otherItemsBoundingBoxes, existingItemsBoundingBoxes));
	var existingItems = author$project$Architecture$ExistingItem$planView(model.session.existingItems);
	var drawerHeading2 = function (heading) {
		return A3(
			mdgriffith$style_elements$Element$el,
			author$project$Styles$Style$DrawerHeading2,
			_List_fromArray(
				[
					mdgriffith$style_elements$Element$Attributes$paddingTop(16)
				]),
			mdgriffith$style_elements$Element$text(heading));
	};
	var drawerHeading = function (content) {
		return A3(
			mdgriffith$style_elements$Element$el,
			author$project$Styles$Style$DrawerHeading,
			_List_fromArray(
				[mdgriffith$style_elements$Element$Attributes$alignLeft]),
			mdgriffith$style_elements$Element$text(content));
	};
	var curtainDimensions = A2(
		elm$core$List$filterMap,
		function (equipment) {
			var _n28 = author$project$Architecture$Equipment$equipmentType(equipment);
			if (_n28.$ === 'Curtain') {
				var dimensions = _n28.a;
				return elm$core$Maybe$Just(dimensions);
			} else {
				return elm$core$Maybe$Nothing;
			}
		},
		spacesOnPlan);
	var cumulativeLengthOfWalls = function (expectedWallType) {
		return author$project$Grid$Units$toMeters(
			A3(
				elm$core$List$foldl,
				F2(
					function (wall, totalLength) {
						return author$project$Architecture$Wall$length(wall) + totalLength;
					}),
				0,
				wallsOnPlan(expectedWallType)));
	};
	var cumulativeLengthOfCurtains = A3(
		elm$core$List$foldl,
		F2(
			function (_n27, totalLength) {
				var lengthAcrossRoom = _n27.lengthAcrossRoom;
				return ((totalLength + author$project$Grid$Units$toMeters(lengthAcrossRoom)) + (((elm$core$Basics$pi / 2) - 1) * turnRadius)) * warpRatio;
			}),
		0,
		curtainDimensions);
	var cumulativeLengthOfCurtainTracks = author$project$Grid$Units$toMeters(
		A3(
			elm$core$List$foldl,
			F2(
				function (_n26, totalLength) {
					var lengthAcrossRoom = _n26.lengthAcrossRoom;
					var lengthOverWindow = _n26.lengthOverWindow;
					return (totalLength + lengthAcrossRoom) + lengthOverWindow;
				}),
			0,
			curtainDimensions));
	var countOfEquipment = function (expectedEquipmentType) {
		return elm$core$List$length(
			A2(
				elm$core$List$filter,
				function (equipment) {
					return _Utils_eq(
						author$project$Architecture$Equipment$equipmentType(equipment),
						expectedEquipmentType);
				},
				spacesOnPlan));
	};
	var numberOfBarTables = countOfEquipment(
		author$project$Architecture$Equipment$TableWithoutSeatsAtHead(author$project$Architecture$Equipment$BarTable));
	var numberOfBarStools = numberOfBarTables * 6;
	var numberOfLounges = countOfEquipment(author$project$Architecture$Equipment$LoungeWithSofaAndTwoArmchairs);
	var numberOfSideTables = countOfEquipment(author$project$Architecture$Equipment$LoungeChairWithSideTable);
	var costOfWindowSillsMaterial = 450 * (((numberOfNarrowSills * windowWidth) * 0.2) + ((numberOfWideSills * windowWidth) * 0.3));
	var costOfWindowSillsAssembly = 40 * (numberOfNarrowSills + numberOfWideSills);
	var costOfWindowSills = model.hasWindowSills ? (costOfWindowSillsMaterial + costOfWindowSillsAssembly) : 0;
	var costOfVentilation = 400 * 12;
	var costOfSofas = 1750 * numberOfLounges;
	var costOfSkylights = numberOfSkylights * 2500;
	var costOfSignage = (4 * 340) + 200;
	var costOfSideTables = numberOfSideTables * 370;
	var costOfSanitaryOpinion = 500;
	var costOfPlumbingProject = 1500;
	var costOfLoungeTables = 750 * numberOfLounges;
	var costOfLights = 60 * 120;
	var costOfInteriorDoors = (800 * A2(numberOfInteriorDoors, author$project$Architecture$Wall$DividingWall, author$project$Architecture$Door$Basic)) + (2600 * A2(numberOfInteriorDoors, author$project$Architecture$Wall$DividingWall, author$project$Architecture$Door$GlassFullHeight));
	var costOfHeating = 500 * 17;
	var costOfGlassPartitions = (650 * loftHeight) * cumulativeLengthOfWalls(author$project$Architecture$Wall$GlassPartition);
	var costOfFloorScreed = 35 * floorArea;
	var costOfFloorImpregnation = 80 * floorArea;
	var costOfFireProtectionOpinion = 500;
	var costOfFieldSupervision = 15 * floorArea;
	var costOfExteriorWallsFinish = 22 * exteriorWallsInnerArea;
	var costOfElectricalProject = 1500;
	var costOfElectricalInstallation = ((200 * 32) + (7 * 170)) + (16 * (200 + 90));
	var costOfDividingWalls = ((200 * loftHeight) * cumulativeLengthOfWalls(author$project$Architecture$Wall$DividingWall)) + ((50 * loftHeight) * 13.2);
	var costOfDetailedDesign = 15 * floorArea;
	var costOfCurtainSystem = (((loftHeight - 0.6) * cumulativeLengthOfCurtains) * 220) + (cumulativeLengthOfCurtainTracks * 350);
	var costOfConferenceTables = numberOfConferenceTables * 800;
	var costOfConferenceChairs = numberOfConferenceChairs * 150;
	var costOfConceptualDesign = 30 * floorArea;
	var costOfBarTables = numberOfBarTables * 1800;
	var costOfBarStools = numberOfBarStools * 180;
	var controlsRow = F2(
		function (label, controls) {
			return A3(
				mdgriffith$style_elements$Element$row,
				author$project$Styles$Style$Unstyled,
				_List_fromArray(
					[
						mdgriffith$style_elements$Element$Attributes$spread,
						mdgriffith$style_elements$Element$Attributes$verticalCenter,
						mdgriffith$style_elements$Element$Attributes$spacing(8)
					]),
				_List_fromArray(
					[
						mdgriffith$style_elements$Element$text(label),
						A3(
						mdgriffith$style_elements$Element$row,
						author$project$Styles$Style$Unstyled,
						_List_fromArray(
							[
								mdgriffith$style_elements$Element$Attributes$verticalCenter,
								mdgriffith$style_elements$Element$Attributes$spacing(8)
							]),
						controls)
					]));
		});
	var conjunctions = _List_fromArray(
		['Also,', 'As well as that,', 'Don’t forget that', 'In addition,', 'Moreover,', 'Keep in mind that']);
	var comfortUi = function () {
		var _n25 = model.comfortIssueCache;
		if (_n25.$ === 'Just') {
			var edges = _n25.a.a;
			return {
				buttonType: author$project$Styles$Style$WithWarning,
				icon: author$project$Views$Icon$tapeMeasure,
				items: A2(
					elm$core$List$map,
					function ($) {
						return $.item;
					},
					mgold$elm_nonempty_list$List$Nonempty$toList(edges)),
				itemsClass: author$project$Styles$SvgStyle$withWarning,
				message: 'Yikes! ' + elm_community$string_extra$String$Extra$toSentenceCase(
					A2(
						elm$core$String$join,
						' ',
						A2(
							author$project$Utilities$interweaveInfinitely,
							conjunctions,
							A2(mgold$elm_nonempty_list$List$Nonempty$map, noAccessToEdgeMessage, edges))))
			};
		} else {
			return {buttonType: author$project$Styles$Style$NotEnoughData, icon: author$project$Views$Icon$chair, items: _List_Nil, itemsClass: '', message: 'Wow, your new home is looking pretty snug! Keep up the great work.'};
		}
	}();
	var breakdownRow = F2(
		function (label, price) {
			return A3(
				mdgriffith$style_elements$Element$row,
				author$project$Styles$Style$Unstyled,
				_List_fromArray(
					[
						mdgriffith$style_elements$Element$Attributes$spread,
						mdgriffith$style_elements$Element$Attributes$verticalCenter,
						mdgriffith$style_elements$Element$Attributes$spacing(8)
					]),
				_List_fromArray(
					[
						mdgriffith$style_elements$Element$text(label),
						mdgriffith$style_elements$Element$text(
						formatCurrency(price))
					]));
		});
	var itemizedBreakdownRow = F3(
		function (singularLabel, numberOfItems, price) {
			switch (numberOfItems) {
				case 0:
					return mdgriffith$style_elements$Element$empty;
				case 1:
					return A2(breakdownRow, singularLabel, price);
				default:
					return A2(breakdownRow, singularLabel + 's', price);
			}
		});
	var _n0 = A3(
		elm$core$List$foldl,
		F2(
			function (unitLength, _n2) {
				var number = _n2.a;
				var price = _n2.b;
				return _Utils_Tuple2(
					number + 1,
					price + (elm$core$Basics$ceiling(unitLength / 4) * 180));
			}),
		_Utils_Tuple2(0, 0),
		A2(
			elm$core$List$filterMap,
			function (equipment) {
				var _n1 = author$project$Architecture$Equipment$equipmentType(equipment);
				if (_n1.$ === 'Shelving') {
					var width = _n1.a;
					return elm$core$Maybe$Just(width);
				} else {
					return elm$core$Maybe$Nothing;
				}
			},
			spacesOnPlan));
	var numberOfStorageUnits = _n0.a;
	var costOfStorage = _n0.b;
	var _n3 = A3(
		elm$core$List$foldl,
		F2(
			function (pegwallLength, _n5) {
				var number = _n5.a;
				var price = _n5.b;
				return _Utils_Tuple2(
					number + 1,
					price + (elm$core$Basics$ceiling(pegwallLength / 10) * 600));
			}),
		_Utils_Tuple2(0, 0),
		A2(
			elm$core$List$filterMap,
			function (equipment) {
				var _n4 = author$project$Architecture$Equipment$equipmentType(equipment);
				if (_n4.$ === 'Pegwall') {
					var length = _n4.a;
					return elm$core$Maybe$Just(length);
				} else {
					return elm$core$Maybe$Nothing;
				}
			},
			spacesOnPlan));
	var numberOfPegwalls = _n3.a;
	var costOfPegwalls = _n3.b;
	var _n6 = A3(
		elm$core$List$foldl,
		F2(
			function (_n8, _n9) {
				var number = _n8.number;
				var price = _n8.price;
				var currentNumber = _n9.a;
				var currentCost = _n9.b;
				return _Utils_Tuple2(currentNumber + number, currentCost + price);
			}),
		_Utils_Tuple2(0, 0),
		A2(
			elm$core$List$filterMap,
			function (equipment) {
				var _n7 = author$project$Architecture$Equipment$equipmentType(equipment);
				switch (_n7.$) {
					case 'LoungeWithSofaAndTwoArmchairs':
						return elm$core$Maybe$Just(
							{number: 2, price: 2 * 850});
					case 'LoungeChairWithSideTable':
						return elm$core$Maybe$Just(
							{number: 1, price: 2030});
					default:
						return elm$core$Maybe$Nothing;
				}
			},
			spacesOnPlan));
	var numberOfLoungeChairs = _n6.a;
	var costOfLoungeChairs = _n6.b;
	var _n10 = A3(
		elm$core$List$foldl,
		F2(
			function (_n12, _n13) {
				var counterLength = _n12.a;
				var equipment = _n12.b;
				var number = _n13.a;
				var price = _n13.b;
				return _Utils_Tuple2(
					number + 1,
					((price + (elm$core$Basics$ceiling((counterLength - 10) / 4) * 460)) + (counterLength * 10)) + A3(
						elm$core$List$foldl,
						F2(
							function (equipmentType, equimpentPrice) {
								return equimpentPrice + function () {
									switch (equipmentType.$) {
										case 'Sink':
											return 300 + 300;
										case 'Stove':
											return 900 + 100;
										case 'LargeStove':
											return 1500 + 100;
										case 'Oven':
											return 900 + 100;
										case 'Dishwasher':
											return 1000 + 200;
										case 'BuiltInFridge':
											return (1100 + 700) + 100;
										default:
											return 999999999999999;
									}
								}();
							}),
						0,
						equipment));
			}),
		_Utils_Tuple2(0, 0),
		A2(
			elm$core$List$filterMap,
			function (equipment) {
				var _n11 = author$project$Architecture$Equipment$equipmentType(equipment);
				if (_n11.$ === 'Kitchenette') {
					var counterLength = _n11.a.counterLength;
					var kitchenEquipment = _n11.a.kitchenEquipment;
					return elm$core$Maybe$Just(
						_Utils_Tuple2(counterLength, kitchenEquipment));
				} else {
					return elm$core$Maybe$Nothing;
				}
			},
			spacesOnPlan));
	var numberOfKitchens = _n10.a;
	var costOfKitchens = _n10.b;
	var _n15 = A3(
		elm$core$List$foldl,
		F2(
			function (_n17, _n18) {
				var length = _n17.length;
				var chairOffsets = _n17.chairOffsets;
				var deskPanelType = _n17.deskPanelType;
				var currentNumberOfDesks = _n18.a;
				var currentNumberOfDeskChairs = _n18.b;
				var price = _n18.c;
				return _Utils_Tuple3(
					currentNumberOfDesks + 1,
					currentNumberOfDeskChairs + elm$core$List$length(chairOffsets),
					(price + (elm$core$Basics$ceiling(length / 20) * 600)) + function () {
						if (deskPanelType.$ === 'VerticalDeskPanel') {
							return 500;
						} else {
							return 0;
						}
					}());
			}),
		_Utils_Tuple3(0, 0, 0),
		A2(
			elm$core$List$filterMap,
			function (equipment) {
				var _n16 = author$project$Architecture$Equipment$equipmentType(equipment);
				if (_n16.$ === 'Desk') {
					var deskPanelType = _n16.a;
					var length = _n16.b.length;
					var chairOffsets = _n16.b.chairOffsets;
					return elm$core$Maybe$Just(
						{chairOffsets: chairOffsets, deskPanelType: deskPanelType, length: length});
				} else {
					return elm$core$Maybe$Nothing;
				}
			},
			spacesOnPlan));
	var numberOfDesks = _n15.a;
	var numberOfDeskChairs = _n15.b;
	var costOfDesks = _n15.c;
	var costOfDeskChairs = numberOfDeskChairs * 800;
	var totalPrice = (((((((((((((((((((((((((((((((((0 + costOfFloorScreed) + costOfFloorImpregnation) + costOfSkylights) + costOfExteriorWallsFinish) + costOfWindowSills) + costOfDividingWalls) + costOfGlassPartitions) + costOfInteriorDoors) + costOfCurtainSystem) + costOfSignage) + costOfElectricalProject) + costOfPlumbingProject) + costOfElectricalInstallation) + costOfHeating) + costOfVentilation) + costOfLights) + costOfConferenceTables) + costOfConferenceChairs) + costOfBarTables) + costOfBarStools) + costOfKitchens) + costOfStorage) + costOfPegwalls) + costOfDesks) + costOfDeskChairs) + costOfSofas) + costOfLoungeTables) + costOfLoungeChairs) + costOfSideTables) + costOfConceptualDesign) + costOfDetailedDesign) + costOfFieldSupervision) + costOfSanitaryOpinion) + costOfFireProtectionOpinion;
	var costButton = author$project$Session$RtckLoft$costPaneEnabled ? _List_fromArray(
		[
			A3(
			author$project$Views$Dashboard$dashboardButton,
			_List_fromArray(
				[
					author$project$Utilities$onMouseUpWithoutPropagation(author$project$Pages$Interior$Ignore),
					author$project$Utilities$onClickWithoutPropagation(
					author$project$Pages$Interior$OpenDrawer(author$project$Pages$Interior$Cost))
				]),
			mdgriffith$style_elements$Element$html(
				A2(
					elm$html$Html$div,
					_List_fromArray(
						[
							A2(elm$html$Html$Attributes$style, 'font-family', '\'open sans condensed\''),
							A2(elm$html$Html$Attributes$style, 'font-weight', '700'),
							A2(elm$html$Html$Attributes$style, 'text-align', 'center'),
							A2(elm$html$Html$Attributes$style, 'font-size', '30px'),
							A2(elm$html$Html$Attributes$style, 'text-transform', 'none'),
							A2(elm$html$Html$Attributes$style, 'line-height', '48px'),
							A2(elm$html$Html$Attributes$style, 'letter-spacing', '-0.02em')
						]),
					_List_fromArray(
						[
							elm$html$Html$text(
							elm$core$String$fromInt(
								elm$core$Basics$round(totalPrice / 1000))),
							A2(
							elm$html$Html$span,
							_List_fromArray(
								[
									A2(elm$html$Html$Attributes$style, 'font-size', '16px'),
									A2(elm$html$Html$Attributes$style, 'margin-left', '0.05em')
								]),
							_List_fromArray(
								[
									elm$html$Html$text('k')
								]))
						]))),
			author$project$Pages$Interior$cost)
		]) : _List_Nil;
	var drawerContent = function () {
		var _n23 = model.latestDrawerContent;
		switch (_n23.$) {
			case 'AddEquipment':
				return _List_fromArray(
					[
						drawerHeading(author$project$Pages$Interior$addEquipment),
						A3(
						mdgriffith$style_elements$Element$wrappedRow,
						author$project$Styles$Style$Unstyled,
						_List_fromArray(
							[
								mdgriffith$style_elements$Element$Attributes$spacing(16)
							]),
						A2(elm$core$List$map, author$project$Pages$Interior$equipmentViewInDrawer, author$project$Architecture$Equipment$allAvailable))
					]);
			case 'BuildWalls':
				return _List_fromArray(
					[
						drawerHeading(author$project$Pages$Interior$buildWalls),
						A3(
						mdgriffith$style_elements$Element$column,
						author$project$Styles$Style$Unstyled,
						_List_fromArray(
							[
								mdgriffith$style_elements$Element$Attributes$spacing(16),
								mdgriffith$style_elements$Element$Attributes$paddingTop(32)
							]),
						_List_fromArray(
							[
								A3(
								mdgriffith$style_elements$Element$row,
								author$project$Styles$Style$Unstyled,
								_List_Nil,
								_List_fromArray(
									[
										author$project$Views$Icon$finger(64),
										author$project$Views$Icon$rightArrow(64)
									])),
								mdgriffith$style_elements$Element$text('Tap, hold and drag to add some walls to the layout of your new home.')
							])),
						A3(
						mdgriffith$style_elements$Element$column,
						author$project$Styles$Style$Unstyled,
						_List_fromArray(
							[
								mdgriffith$style_elements$Element$Attributes$spacing(12)
							]),
						_List_fromArray(
							[
								drawerHeading2('wall type'),
								A2(wallTypeRadioOption, author$project$Architecture$Wall$DividingWall, 'dividing wall'),
								A2(wallTypeRadioOption, author$project$Architecture$Wall$GlassPartition, 'glass partition')
							])),
						A3(
						mdgriffith$style_elements$Element$el,
						author$project$Styles$Style$Unstyled,
						_List_fromArray(
							[
								mdgriffith$style_elements$Element$Attributes$paddingTop(32)
							]),
						A3(
							mdgriffith$style_elements$Element$row,
							author$project$Styles$Style$DrawerButton,
							_List_fromArray(
								[
									mdgriffith$style_elements$Element$Attributes$paddingTop(8),
									mdgriffith$style_elements$Element$Attributes$paddingRight(16),
									mdgriffith$style_elements$Element$Attributes$paddingBottom(8),
									mdgriffith$style_elements$Element$Attributes$paddingLeft(16),
									mdgriffith$style_elements$Element$Attributes$spacing(8),
									mdgriffith$style_elements$Element$Attributes$verticalCenter,
									mdgriffith$style_elements$Element$Events$onClick(author$project$Pages$Interior$FinishBuilding)
								]),
							_List_fromArray(
								[
									author$project$Views$Icon$checkmark(32),
									mdgriffith$style_elements$Element$text('I’m done building')
								])))
					]);
			case 'Cost':
				return _List_fromArray(
					[
						drawerHeading(author$project$Pages$Interior$cost),
						A3(
						mdgriffith$style_elements$Element$column,
						author$project$Styles$Style$Unstyled,
						_List_fromArray(
							[
								mdgriffith$style_elements$Element$Attributes$spacing(8)
							]),
						_List_fromArray(
							[
								drawerHeading2('floor'),
								A2(breakdownRow, 'concrete screed', costOfFloorScreed),
								A2(breakdownRow, 'impregnation', costOfFloorImpregnation),
								drawerHeading2('ceiling'),
								A3(itemizedBreakdownRow, 'skylight', numberOfSkylights, costOfSkylights),
								drawerHeading2('exterior walls'),
								A2(breakdownRow, 'undercoat + paint', costOfExteriorWallsFinish),
								A2(
								mdgriffith$style_elements$Element$when,
								model.hasWindowSills,
								A2(breakdownRow, 'window sills', costOfWindowSills)),
								drawerHeading2('interior walls'),
								A2(breakdownRow, 'dividing walls', costOfDividingWalls),
								A2(breakdownRow, 'glass partitions', costOfGlassPartitions),
								A3(itemizedBreakdownRow, 'interior door', totalNumberOfInteriorDoors, costOfInteriorDoors),
								A2(breakdownRow, 'acoustic curtain system', costOfCurtainSystem),
								A2(breakdownRow, 'LED sign', costOfSignage),
								drawerHeading2('systems'),
								A2(breakdownRow, 'heating', costOfHeating),
								A2(breakdownRow, 'ventilation', costOfVentilation),
								A2(breakdownRow, 'plumbing project', costOfPlumbingProject),
								A2(breakdownRow, 'electrical installation', costOfElectricalInstallation),
								A2(breakdownRow, 'electrical project', costOfElectricalProject),
								drawerHeading2('furnishings'),
								A2(breakdownRow, 'lights', costOfLights),
								A3(itemizedBreakdownRow, 'kitchen', numberOfKitchens, costOfKitchens),
								A3(itemizedBreakdownRow, 'conference table', numberOfConferenceTables, costOfConferenceTables),
								A3(itemizedBreakdownRow, 'conference chair', numberOfConferenceChairs, costOfConferenceChairs),
								A3(itemizedBreakdownRow, 'bar table', numberOfBarTables, costOfBarTables),
								A3(itemizedBreakdownRow, 'bar stool', numberOfBarStools, costOfBarStools),
								A3(itemizedBreakdownRow, 'storage unit', numberOfStorageUnits, costOfStorage),
								A3(itemizedBreakdownRow, 'pegwall', numberOfPegwalls, costOfPegwalls),
								A3(itemizedBreakdownRow, 'desk', numberOfDesks, costOfDesks),
								A3(itemizedBreakdownRow, 'desk chair', numberOfDeskChairs, costOfDeskChairs),
								A3(itemizedBreakdownRow, 'sofa', numberOfLounges, costOfSofas),
								A3(itemizedBreakdownRow, 'lounge table', numberOfLounges, costOfLoungeTables),
								A3(itemizedBreakdownRow, 'lounge chair', numberOfLoungeChairs, costOfLoungeChairs),
								A3(itemizedBreakdownRow, 'side table', numberOfSideTables, costOfSideTables),
								drawerHeading2('design'),
								A2(breakdownRow, 'conceptual design', costOfConceptualDesign),
								A2(breakdownRow, 'detailed design', costOfDetailedDesign),
								A2(breakdownRow, 'field supervision', costOfFieldSupervision),
								A2(breakdownRow, 'sanitary opinion', costOfSanitaryOpinion),
								A2(breakdownRow, 'fire protection opinion', costOfFireProtectionOpinion),
								A3(
								mdgriffith$style_elements$Element$row,
								author$project$Styles$Style$BreakdownSum,
								_List_fromArray(
									[
										mdgriffith$style_elements$Element$Attributes$alignRight,
										mdgriffith$style_elements$Element$Attributes$paddingTop(8)
									]),
								_List_fromArray(
									[
										mdgriffith$style_elements$Element$text(
										formatCurrency(totalPrice))
									]))
							])),
						A3(
						mdgriffith$style_elements$Element$el,
						author$project$Styles$Style$Unstyled,
						_List_fromArray(
							[
								mdgriffith$style_elements$Element$Attributes$height(
								mdgriffith$style_elements$Element$Attributes$px(64))
							]),
						mdgriffith$style_elements$Element$empty),
						A2(
						controlsRow,
						'window sills',
						_List_fromArray(
							[
								A3(
								mdgriffith$style_elements$Element$el,
								author$project$Styles$Style$Interactive,
								_List_fromArray(
									[
										mdgriffith$style_elements$Element$Events$onClick(author$project$Pages$Interior$ToggleHasWindowSills)
									]),
								model.hasWindowSills ? author$project$Views$Icon$checkboxChecked(32) : author$project$Views$Icon$checkboxUnchecked(32))
							]))
					]);
			default:
				return _List_fromArray(
					[
						drawerHeading(author$project$Pages$Interior$comfort),
						A3(
						mdgriffith$style_elements$Element$column,
						author$project$Styles$Style$Unstyled,
						_List_fromArray(
							[
								mdgriffith$style_elements$Element$Attributes$spacing(16),
								mdgriffith$style_elements$Element$Attributes$paddingTop(32)
							]),
						_List_fromArray(
							[
								comfortUi.icon(128),
								A3(
								mdgriffith$style_elements$Element$paragraph,
								author$project$Styles$Style$Unstyled,
								_List_Nil,
								_List_fromArray(
									[
										mdgriffith$style_elements$Element$text(comfortUi.message)
									]))
							]))
					]);
		}
	}();
	var drawer = A3(
		mdgriffith$style_elements$Element$el,
		author$project$Styles$Style$Drawer,
		_Utils_ap(
			A2(
				author$project$Utilities$withAnimation,
				model.drawerAnimationState,
				_List_fromArray(
					[
						mdgriffith$style_elements$Element$Attributes$alignRight,
						mdgriffith$style_elements$Element$Attributes$height(mdgriffith$style_elements$Element$Attributes$fill),
						mdgriffith$style_elements$Element$Attributes$width(
						mdgriffith$style_elements$Element$Attributes$px(author$project$Pages$Interior$drawerWidth)),
						mdgriffith$style_elements$Element$Events$onMouseDown(author$project$Pages$Interior$GotMouseDownWithinDrawer),
						A2(author$project$Utilities$onWithoutPropagation, 'mouseup', author$project$Pages$Interior$Ignore),
						A2(author$project$Utilities$onWithoutPropagation, 'mousewheel', author$project$Pages$Interior$Ignore),
						mdgriffith$style_elements$Element$Attributes$yScrollbar
					])),
			A2(
				author$project$Utilities$onlyIf,
				author$project$Pages$Interior$hasGrabbedEquipmentInDrawer(model),
				_List_fromArray(
					[
						author$project$Utilities$onMouseUpWithoutPropagation(author$project$Pages$Interior$CancelGrabInDrawer)
					]))),
		A3(
			mdgriffith$style_elements$Element$column,
			author$project$Styles$Style$Unstyled,
			_List_fromArray(
				[
					mdgriffith$style_elements$Element$Attributes$padding(32),
					mdgriffith$style_elements$Element$Attributes$spacing(32)
				]),
			drawerContent));
	return A2(
		author$project$Views$Dashboard$appWithDashboard,
		_List_fromArray(
			[
				A2(
				mdgriffith$style_elements$Element$Attributes$vary,
				author$project$Styles$Style$Dragging,
				author$project$Pages$Interior$isDraggingItem(model)),
				A2(
				mdgriffith$style_elements$Element$Attributes$vary,
				author$project$Styles$Style$Crosshair,
				author$project$Pages$Interior$isInBuildingWallsMode(model)),
				A2(
				mdgriffith$style_elements$Element$Events$custom,
				'mousewheel',
				A4(
					elm$json$Json$Decode$map3,
					toScrollHandler,
					A2(elm$json$Json$Decode$field, 'ctrlKey', elm$json$Json$Decode$bool),
					A2(elm$json$Json$Decode$field, 'deltaX', elm$json$Json$Decode$float),
					A2(elm$json$Json$Decode$field, 'deltaY', elm$json$Json$Decode$float)))
			]),
		{
			aboveDashboard: _Utils_ap(
				A2(
					author$project$Pages$Interior$ContextMenu$view,
					model,
					{deleteItem: author$project$Pages$Interior$DeleteItem, noOp: author$project$Pages$Interior$Ignore, updateItem: author$project$Pages$Interior$UpdateItem}),
				_List_fromArray(
					[drawer])),
			belowDashboard: _List_fromArray(
				[
					A3(
					mdgriffith$style_elements$Element$el,
					author$project$Styles$Style$Unstyled,
					_List_Nil,
					mdgriffith$style_elements$Element$html(
						A2(
							author$project$TypedSvg$svg,
							_List_fromArray(
								[
									elm$svg$Svg$Attributes$viewBox(
									author$project$Pages$Interior$viewBox(model)),
									elm$svg$Svg$Attributes$width(
									elm$core$String$fromFloat(model.session.viewport.width)),
									elm$svg$Svg$Attributes$height(
									elm$core$String$fromFloat(model.session.viewport.height)),
									elm$svg$Svg$Attributes$class(author$project$Styles$SvgStyle$display + (' ' + author$project$Styles$SvgStyle$equipment))
								]),
							_List_fromArray(
								[
									A2(
									author$project$TypedSvg$defs,
									_List_Nil,
									A2(elm$core$List$cons, author$project$Styles$SvgStyle$stylesheet, existingItems.defs)),
									A2(
									ianmackenzie$elm_geometry_svg$Geometry$Svg$relativeTo,
									svgCoordinates,
									A2(
										author$project$TypedSvg$g,
										_List_Nil,
										_Utils_ap(
											_List_fromArray(
												[
													existingItems.backgroundMarkup,
													A3(
													elm$svg$Svg$Keyed$node,
													'g',
													_List_Nil,
													A2(
														elm$core$List$map,
														A3(author$project$Pages$Interior$itemView, model, comfortUi.items, comfortUi.itemsClass),
														elm$core$List$reverse(itemsDisplayed))),
													existingItems.foregroundMarkup
												]),
											false ? _List_fromArray(
												[
													A2(
													author$project$TypedSvg$g,
													_List_fromArray(
														[
															A2(elm$html$Html$Attributes$style, 'pointer-events', 'none')
														]),
													A2(
														elm$core$List$map,
														ianmackenzie$elm_geometry_svg$Geometry$Svg$boundingBox2d(
															_List_fromArray(
																[
																	author$project$TypedSvg$Attributes$fill(
																	author$project$TypedSvg$Types$Fill(
																		A3(author$project$Color$rgb, 255, 0, 255))),
																	author$project$TypedSvg$Attributes$opacity(
																	author$project$TypedSvg$Types$Opacity(0.7))
																])),
														itemBoundingBoxes))
												]) : _List_Nil)))
								]))))
				]),
			controls: _Utils_ap(
				_List_fromArray(
					[
						A2(author$project$Pages$Interior$comfortButton, comfortUi, model)
					]),
				_Utils_ap(
					costButton,
					_Utils_ap(
						wallsControlsButton,
						_List_fromArray(
							[
								A3(
								author$project$Views$Dashboard$dashboardIconButton,
								_List_fromArray(
									[
										author$project$Utilities$onMouseUpWithoutPropagation(author$project$Pages$Interior$Ignore),
										author$project$Utilities$onClickWithoutPropagation(
										author$project$Pages$Interior$OpenDrawer(author$project$Pages$Interior$AddEquipment))
									]),
								author$project$Views$Icon$plus,
								author$project$Pages$Interior$addEquipment)
							])))),
			navigationLinks: _Utils_ap(
				_List_Nil,
				_Utils_ap(
					author$project$Session$RtckLoft$layoutViewEnabled ? _List_fromArray(
						[
							A2(
							mdgriffith$style_elements$Element$link,
							author$project$Route$toString(author$project$Route$Layout),
							A3(
								author$project$Views$Dashboard$dashboardIconButton,
								_List_fromArray(
									[
										author$project$Utilities$onMouseUpWithoutPropagation(author$project$Pages$Interior$Ignore)
									]),
								author$project$Views$Icon$magnifyingGlassMinus,
								'layout'))
						]) : _List_Nil,
					function () {
						var _n20 = _Utils_Tuple2(author$project$Session$RtckLoft$upstairsViewEnabled, model.level);
						_n20$0:
						while (true) {
							if (_n20.b.$ === 'Downstairs') {
								if (!_n20.a) {
									break _n20$0;
								} else {
									var _n21 = _n20.b;
									return _List_fromArray(
										[
											A3(
											author$project$Views$Dashboard$dashboardIconButton,
											_List_fromArray(
												[
													mdgriffith$style_elements$Element$Events$onClick(
													author$project$Pages$Interior$SetLevel(author$project$Architecture$Equipment$Upstairs))
												]),
											author$project$Views$Icon$stairsUp,
											'upstairs')
										]);
								}
							} else {
								if (!_n20.a) {
									break _n20$0;
								} else {
									var _n22 = _n20.b;
									return _List_fromArray(
										[
											A3(
											author$project$Views$Dashboard$dashboardIconButton,
											_List_fromArray(
												[
													mdgriffith$style_elements$Element$Events$onClick(
													author$project$Pages$Interior$SetLevel(author$project$Architecture$Equipment$Downstairs))
												]),
											author$project$Views$Icon$stairsDown,
											'downstairs')
										]);
								}
							}
						}
						return _List_Nil;
					}()))
		});
};
var author$project$Grid$Units$halfInteriorWidth = 40;
var author$project$Grid$Units$toSvgValue = A2(elm$core$Basics$composeR, author$project$Grid$Units$toMillimeters, elm$core$String$fromFloat);
var author$project$Pages$Layout$imagePadding = 15;
var author$project$Pages$Layout$interiorWidth = author$project$Grid$Units$halfInteriorWidth * 2;
var author$project$Pages$Layout$namespaced = function (string) {
	return 'Layout-' + string;
};
var author$project$Grid$Vector$xDistance = function (_n0) {
	var x = _n0.a;
	return author$project$Grid$Units$toMillimeters(x);
};
var author$project$Grid$Vector$yDistance = function (_n0) {
	var y = _n0.b;
	return author$project$Grid$Units$toMillimeters(y);
};
var author$project$Pages$Layout$ToggleBackSide = {$: 'ToggleBackSide'};
var author$project$Pages$Layout$ToggleCore = {$: 'ToggleCore'};
var author$project$Pages$Layout$ToggleFrontSide = {$: 'ToggleFrontSide'};
var author$project$Pages$Layout$ToggleNorth = {$: 'ToggleNorth'};
var elm$svg$Svg$image = elm$svg$Svg$trustedNode('image');
var elm$svg$Svg$Attributes$pointerEvents = _VirtualDom_attribute('pointer-events');
var elm$svg$Svg$Events$onClick = function (msg) {
	return A2(
		elm$html$Html$Events$on,
		'click',
		elm$json$Json$Decode$succeed(msg));
};
var author$project$Pages$Layout$viewSegmentGeometry = function (_n0) {
	var geometry = _n0.geometry;
	var translation = _n0.translation;
	var segment = _n0.segment;
	var toggleMessage = function () {
		switch (segment.$) {
			case 'BackSide':
				return author$project$Pages$Layout$ToggleBackSide;
			case 'Core':
				return author$project$Pages$Layout$ToggleCore;
			case 'FrontSide':
				return author$project$Pages$Layout$ToggleFrontSide;
			default:
				return author$project$Pages$Layout$ToggleNorth;
		}
	}();
	var rectStrokeWidth = ((!geometry.length) || (!geometry.width)) ? elm$svg$Svg$Attributes$strokeWidth(
		author$project$Grid$Units$toSvgValue(
			author$project$Grid$Units$fromModuleLengths(2))) : elm$svg$Svg$Attributes$strokeWidth('0');
	var imageOffset = author$project$Grid$Units$toSvgValue(-author$project$Pages$Layout$imagePadding);
	var imageLength = author$project$Grid$Units$toSvgValue(
		author$project$Grid$Units$fromModuleLengths(geometry.length) + (2 * author$project$Pages$Layout$imagePadding));
	var imageHeight = author$project$Grid$Units$toSvgValue(geometry.width + (2 * author$project$Pages$Layout$imagePadding));
	return A2(
		elm$svg$Svg$g,
		_List_fromArray(
			[
				author$project$TypedSvg$Attributes$transform(
				_List_fromArray(
					[
						A2(
						author$project$TypedSvg$Types$Translate,
						author$project$Grid$Vector$xDistance(translation),
						author$project$Grid$Vector$yDistance(translation) - author$project$Grid$Units$toMillimeters(author$project$Grid$Units$halfInteriorWidth))
					])),
				elm$svg$Svg$Attributes$class(
				author$project$Pages$Layout$namespaced('equipment')),
				elm$svg$Svg$Events$onClick(toggleMessage)
			]),
		_List_fromArray(
			[
				A2(
				elm$svg$Svg$image,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$width(imageLength),
						elm$svg$Svg$Attributes$height(imageHeight),
						elm$svg$Svg$Attributes$xlinkHref(geometry.imageSource),
						elm$svg$Svg$Attributes$x(imageOffset),
						elm$svg$Svg$Attributes$y(imageOffset),
						elm$svg$Svg$Attributes$pointerEvents('none')
					]),
				_List_Nil),
				A2(
				elm$svg$Svg$rect,
				_List_fromArray(
					[
						elm$svg$Svg$Attributes$x('0'),
						elm$svg$Svg$Attributes$y('0'),
						elm$svg$Svg$Attributes$width(
						author$project$Grid$Units$toSvgValue(
							author$project$Grid$Units$fromModuleLengths(geometry.length))),
						elm$svg$Svg$Attributes$height(
						author$project$Grid$Units$toSvgValue(geometry.width)),
						elm$svg$Svg$Attributes$fill('transparent'),
						elm$svg$Svg$Attributes$stroke('transparent'),
						rectStrokeWidth
					]),
				_List_Nil)
			]));
};
var author$project$Pages$Layout$viewPositionedLayout = function (layoutGeometry) {
	return A2(elm$core$List$map, author$project$Pages$Layout$viewSegmentGeometry, layoutGeometry.segments);
};
var author$project$Pages$Layout$viewportWidth = author$project$Grid$Units$fromModuleLengths(20);
var author$project$Views$Icon$magnifyingGlassPlus = author$project$Views$Icon$icon('M 19 3 C 13.488281 3 9 7.488281 9 13 C 9 15.394531 9.839844 17.589844 11.25 19.3125 L 3.28125 27.28125 L 4.71875 28.71875 L 12.6875 20.75 C 14.410156 22.160156 16.605469 23 19 23 C 24.511719 23 29 18.511719 29 13 C 29 7.488281 24.511719 3 19 3 Z M 19 5 C 23.429688 5 27 8.570313 27 13 C 27 17.429688 23.429688 21 19 21 C 14.570313 21 11 17.429688 11 13 C 11 8.570313 14.570313 5 19 5 Z M 18 9 L 18 12 L 15 12 L 15 14 L 18 14 L 18 17 L 20 17 L 20 14 L 23 14 L 23 12 L 20 12 L 20 9 Z');
var elm$svg$Svg$clipPath = elm$svg$Svg$trustedNode('clipPath');
var elm$svg$Svg$Attributes$clipPath = _VirtualDom_attribute('clip-path');
var author$project$Pages$Layout$view = function (session) {
	var svgViewportStart = elm$core$String$fromFloat(
		author$project$Grid$Units$toMillimeters(((-author$project$Pages$Layout$viewportWidth) / 2) | 0));
	var svgSize = elm$core$String$fromFloat(
		author$project$Grid$Units$toMillimeters(author$project$Pages$Layout$viewportWidth));
	var positionedLayout = author$project$Architecture$Layout$positioned(session.layout);
	var chassisImageVerticalOffset = author$project$Grid$Units$toSvgValue(-(author$project$Grid$Units$halfInteriorWidth + author$project$Pages$Layout$imagePadding));
	var chassisImageHeight = author$project$Grid$Units$toSvgValue(author$project$Pages$Layout$interiorWidth + (2 * author$project$Pages$Layout$imagePadding));
	var chassisClipPath = author$project$Pages$Layout$namespaced('chassisClipPath');
	return A2(
		author$project$Views$Dashboard$appWithDashboard,
		_List_Nil,
		{
			aboveDashboard: _List_Nil,
			belowDashboard: _List_fromArray(
				[
					mdgriffith$style_elements$Element$html(
					A2(
						elm$svg$Svg$svg,
						_List_fromArray(
							[
								elm$svg$Svg$Attributes$width(
								elm$core$String$fromFloat(session.viewport.width)),
								elm$svg$Svg$Attributes$height(
								elm$core$String$fromFloat(session.viewport.height)),
								elm$svg$Svg$Attributes$style('display:block'),
								elm$svg$Svg$Attributes$viewBox(svgViewportStart + (' ' + (svgViewportStart + (' ' + (svgSize + (' ' + svgSize))))))
							]),
						_Utils_ap(
							_List_fromArray(
								[
									A2(
									elm$svg$Svg$clipPath,
									_List_fromArray(
										[
											elm$svg$Svg$Attributes$id(chassisClipPath)
										]),
									_List_fromArray(
										[
											A2(
											elm$svg$Svg$rect,
											_List_fromArray(
												[
													elm$svg$Svg$Attributes$x(
													author$project$Grid$Units$toSvgValue(
														author$project$Grid$LongitudinalBoundary$west(positionedLayout.boundary))),
													elm$svg$Svg$Attributes$y(chassisImageVerticalOffset),
													elm$svg$Svg$Attributes$width(
													author$project$Grid$Units$toSvgValue(
														author$project$Grid$LongitudinalBoundary$east(positionedLayout.boundary) - author$project$Grid$LongitudinalBoundary$west(positionedLayout.boundary))),
													elm$svg$Svg$Attributes$height(chassisImageHeight)
												]),
											_List_Nil)
										])),
									A2(
									elm$svg$Svg$image,
									_List_fromArray(
										[
											elm$svg$Svg$Attributes$clipPath('url(#' + (chassisClipPath + ')')),
											elm$svg$Svg$Attributes$x(
											author$project$Grid$Units$toSvgValue(
												author$project$Grid$Units$fromModuleLengths(-6))),
											elm$svg$Svg$Attributes$y(chassisImageVerticalOffset),
											elm$svg$Svg$Attributes$width(
											author$project$Grid$Units$toSvgValue(
												author$project$Grid$Units$fromModuleLengths(12))),
											elm$svg$Svg$Attributes$height(chassisImageHeight),
											elm$svg$Svg$Attributes$xlinkHref('/layout/axes.png')
										]),
									_List_Nil)
								]),
							author$project$Pages$Layout$viewPositionedLayout(positionedLayout))))
				]),
			controls: _List_Nil,
			navigationLinks: _List_fromArray(
				[
					A2(
					mdgriffith$style_elements$Element$link,
					author$project$Route$toString(author$project$Route$Interior),
					A3(author$project$Views$Dashboard$dashboardIconButton, _List_Nil, author$project$Views$Icon$magnifyingGlassPlus, 'interior'))
				])
		});
};
var author$project$Pages$NotFound$view = A2(
	mdgriffith$style_elements$Element$viewport,
	author$project$Styles$Style$styles,
	A3(
		mdgriffith$style_elements$Element$el,
		author$project$Styles$Style$App,
		_List_fromArray(
			[
				mdgriffith$style_elements$Element$Attributes$width(mdgriffith$style_elements$Element$Attributes$fill),
				mdgriffith$style_elements$Element$Attributes$height(mdgriffith$style_elements$Element$Attributes$fill)
			]),
		A3(
			mdgriffith$style_elements$Element$el,
			author$project$Styles$Style$Unstyled,
			_List_fromArray(
				[mdgriffith$style_elements$Element$Attributes$verticalCenter, mdgriffith$style_elements$Element$Attributes$center]),
			A3(
				mdgriffith$style_elements$Element$column,
				author$project$Styles$Style$Unstyled,
				_List_fromArray(
					[
						mdgriffith$style_elements$Element$Attributes$center,
						mdgriffith$style_elements$Element$Attributes$spacing(8)
					]),
				_List_fromArray(
					[
						A3(
						mdgriffith$style_elements$Element$el,
						author$project$Styles$Style$LargeEmoji,
						_List_Nil,
						mdgriffith$style_elements$Element$text('👨\u200d🚀')),
						mdgriffith$style_elements$Element$text('page not found.'),
						A2(
						mdgriffith$style_elements$Element$link,
						author$project$Route$toString(author$project$Route$Layout),
						A3(
							mdgriffith$style_elements$Element$el,
							author$project$Styles$Style$Link,
							_List_Nil,
							mdgriffith$style_elements$Element$text('take me home 🚀')))
					])))));
var author$project$Main$view = function (model) {
	return {
		body: function () {
			switch (model.$) {
				case 'Interior':
					var interiorModel = model.a;
					return _List_fromArray(
						[
							A2(
							elm$html$Html$map,
							author$project$Main$GotInteriorMessage,
							author$project$Pages$Interior$view(interiorModel))
						]);
				case 'Layout':
					var session = model.a;
					return _List_fromArray(
						[
							A2(
							elm$html$Html$map,
							author$project$Main$GotLayoutMessage,
							author$project$Pages$Layout$view(session))
						]);
				case 'NotFound':
					return _List_fromArray(
						[author$project$Pages$NotFound$view]);
				default:
					return _List_fromArray(
						[
							A2(elm$html$Html$div, _List_Nil, _List_Nil)
						]);
			}
		}(),
		title: 'Spacey'
	};
};
var elm$browser$Browser$application = _Browser_application;
var elm$json$Json$Decode$andThen = _Json_andThen;
var author$project$Main$main = elm$browser$Browser$application(
	{init: author$project$Main$init, onUrlChange: author$project$Main$ChangedUrl, onUrlRequest: author$project$Main$ClickedLink, subscriptions: author$project$Main$subscriptions, update: author$project$Main$update, view: author$project$Main$view});
_Platform_export({'Main':{'init':author$project$Main$main(
	A2(
		elm$json$Json$Decode$andThen,
		function (viewport) {
			return A2(
				elm$json$Json$Decode$andThen,
				function (seed) {
					return elm$json$Json$Decode$succeed(
						{seed: seed, viewport: viewport});
				},
				A2(elm$json$Json$Decode$field, 'seed', elm$json$Json$Decode$int));
		},
		A2(
			elm$json$Json$Decode$field,
			'viewport',
			A2(
				elm$json$Json$Decode$andThen,
				function (width) {
					return A2(
						elm$json$Json$Decode$andThen,
						function (height) {
							return elm$json$Json$Decode$succeed(
								{height: height, width: width});
						},
						A2(elm$json$Json$Decode$field, 'height', elm$json$Json$Decode$float));
				},
				A2(elm$json$Json$Decode$field, 'width', elm$json$Json$Decode$float)))))(0)}});}(this));